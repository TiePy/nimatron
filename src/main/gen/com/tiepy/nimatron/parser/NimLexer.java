/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.parser.NimTypes;import jdk.nashorn.internal.parser.Token;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int LINE_COMMENT = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC_COMMENT = 8;
  public static final int STRING_LITERAL = 10;
  public static final int TRIPLE_STRING_LITERAL = 12;
  public static final int RAW_STRING_LITERAL = 14;
  public static final int GENERALIZED_STRING_LITERAL = 16;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 18;
  public static final int CHARACTER_LITERAL = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\45\1\43\1\106\1\107\1\44\22\0\1\111\1\17\1\105\1\40\1\33\1\32\1\25"+
    "\1\55\1\71\1\72\1\4\1\1\1\74\1\1\1\24\1\5\1\51\1\50\1\62\1\61\1\63\1\47\1"+
    "\60\1\47\1\57\1\35\1\7\1\73\1\16\1\3\1\2\2\6\1\46\1\54\2\46\1\67\1\70\2\36"+
    "\1\56\13\36\1\65\2\36\1\52\2\36\1\41\1\112\1\42\1\33\1\37\1\75\1\13\1\53\1"+
    "\76\1\15\1\66\1\23\1\103\1\30\1\20\1\102\1\77\1\31\1\27\1\14\1\10\1\100\1"+
    "\36\1\11\1\22\1\21\1\64\1\26\1\104\1\12\1\101\1\36\1\71\1\34\1\72\1\34\1\0"+
    "\5\36\1\110\172\36\250\0\2\106\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\2\5\1\6\6\7"+
    "\1\10\4\7\1\4\1\11\4\7\1\5\1\12\1\4"+
    "\1\13\1\14\2\15\2\16\1\17\1\13\1\7\1\20"+
    "\2\7\1\15\1\21\1\22\1\23\4\7\1\24\1\0"+
    "\1\25\2\26\1\27\1\30\6\31\2\1\1\32\2\31"+
    "\1\33\1\34\1\31\1\35\2\3\1\36\1\4\2\10"+
    "\1\37\1\10\2\7\1\40\2\7\1\41\3\7\1\10"+
    "\2\7\1\42\2\7\1\10\1\7\1\10\13\7\1\43"+
    "\4\7\4\0\1\44\2\0\1\45\3\0\14\7\1\0"+
    "\1\45\1\46\4\0\1\7\1\0\2\7\1\47\1\10"+
    "\1\50\1\7\1\5\20\7\1\0\1\51\4\0\1\52"+
    "\1\0\1\53\3\0\1\52\1\54\3\13\12\7\1\55"+
    "\1\54\1\56\1\57\1\7\1\60\16\7\1\61\1\62"+
    "\1\63\1\64\1\65\1\0\1\66\1\67\1\70\24\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0384"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u041a\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u04b0\0\u0834"+
    "\0\u087f\0\u08ca\0\u0915\0\u04b0\0\u04b0\0\u04b0\0\u0960\0\u09ab"+
    "\0\u09f6\0\u0339\0\u0339\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0339"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\u0339\0\u0339\0\u0339\0\u0c4e\0\u0c99"+
    "\0\u0ce4\0\u0d2f\0\u0d7a\0\u0339\0\u0dc5\0\u0dc5\0\u0e10\0\u0dc5"+
    "\0\226\0\u0dc5\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0dc5"+
    "\0\u0fd2\0\u0dc5\0\u101d\0\u1068\0\u101d\0\u101d\0\u10b3\0\u0dc5"+
    "\0\u0dc5\0\u10fe\0\u04b0\0\u10fe\0\u10fe\0\u04b0\0\u08ca\0\u08ca"+
    "\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u11df\0\u12c0\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u08ca\0\u1482\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770"+
    "\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u04b0\0\u1932\0\u197d"+
    "\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5"+
    "\0\u1c20\0\u0339\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a"+
    "\0\u2085\0\u20d0\0\u0dc5\0\u0dc5\0\u211b\0\u0ea6\0\u2166\0\u21b1"+
    "\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u08ca\0\u2328\0\u08ca\0\u2373"+
    "\0\u08ca\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580"+
    "\0\u25cb\0\u2616\0\u2661\0\u13a1\0\u26ac\0\u26f7\0\u2742\0\u278d"+
    "\0\u27d8\0\u2823\0\u0339\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a"+
    "\0\u29e5\0\u0339\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u0339\0\u2b5c"+
    "\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4"+
    "\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u0339\0\u0dc5\0\u0dc5\0\u0dc5"+
    "\0\u2f2b\0\u0339\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed"+
    "\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345"+
    "\0\u0339\0\u0339\0\u0339\0\u0339\0\u0339\0\u3390\0\u0339\0\u0339"+
    "\0\u0339\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d"+
    "\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\17\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\42\1\14\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\42\2\47\1\56"+
    "\1\42\1\57\1\42\1\60\1\42\5\47\1\61\1\42"+
    "\1\62\2\42\1\63\1\52\1\64\1\65\1\66\1\67"+
    "\1\42\1\70\1\71\2\42\1\72\1\73\1\74\1\55"+
    "\1\42\1\55\1\46\43\75\1\76\1\77\41\75\3\0"+
    "\1\100\1\75\43\101\2\0\41\101\3\0\2\101\40\102"+
    "\1\103\1\102\1\104\1\102\1\105\41\102\3\0\42\102"+
    "\1\106\1\102\1\107\1\102\1\105\41\102\3\0\45\102"+
    "\1\110\1\111\40\102\1\112\3\0\1\102\1\113\44\102"+
    "\1\105\40\102\1\114\3\0\45\102\1\110\1\111\40\102"+
    "\1\115\3\0\45\102\1\110\1\111\40\102\1\116\3\0"+
    "\46\102\1\105\40\102\1\117\3\0\45\102\1\110\1\111"+
    "\10\102\1\120\30\102\3\0\2\102\2\74\1\121\111\74"+
    "\1\46\1\122\1\123\4\46\6\74\2\46\4\74\2\46"+
    "\4\74\3\46\55\74\1\46\1\0\2\124\1\125\4\124"+
    "\6\0\2\124\4\0\2\124\4\0\3\124\55\0\1\124"+
    "\1\74\1\46\1\122\1\126\4\46\6\74\2\46\4\74"+
    "\2\46\4\74\3\46\55\74\1\46\1\74\1\46\1\122"+
    "\1\46\1\123\3\46\6\74\2\46\4\74\2\46\4\74"+
    "\3\46\55\74\1\46\1\74\1\46\1\122\5\46\6\74"+
    "\2\46\4\74\2\46\4\74\3\46\55\74\1\46\2\74"+
    "\1\121\5\74\1\42\1\127\4\42\2\74\3\42\1\130"+
    "\2\74\4\42\3\74\3\42\6\74\5\42\1\131\1\42"+
    "\1\74\6\42\1\132\4\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\3\42\1\134\2\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\10\42\1\135\2\42\5\74\7\42\1\136\2\74\1\42"+
    "\4\74\1\121\5\74\1\137\5\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\4\42"+
    "\1\140\1\141\2\74\2\42\1\142\1\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\1\143\5\42"+
    "\2\74\1\144\3\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\1\145\5\42\2\74\1\146\3\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\10\42"+
    "\1\147\2\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\4\42\1\150\1\42\2\74\1\42\1\151"+
    "\1\152\1\145\2\74\1\42\1\153\2\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\1\42\1\154\4\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\6\42\1\155\1\42\1\156\2\42\5\74\3\42\1\157"+
    "\3\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\1\42\1\160\2\42\2\74\2\42\1\161\1\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\1\162\1\163"+
    "\4\42\2\74\1\164\3\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\6\42\1\165\4\42\5\74\7\42"+
    "\1\133\2\74\1\42\3\74\1\46\1\122\5\46\6\74"+
    "\2\46\4\74\1\166\1\46\4\74\3\46\5\74\1\52"+
    "\27\74\1\52\17\74\1\46\2\74\1\121\5\74\3\42"+
    "\1\162\2\42\2\74\4\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\1\167\2\42\1\170\2\42"+
    "\2\74\1\171\3\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\10\42\1\172\2\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\6\42\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\10\42\1\132\2\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\15\74\1\173\2\74\1\174"+
    "\1\175\10\74\1\47\1\74\1\47\7\74\3\47\3\74"+
    "\1\176\1\173\5\47\2\177\2\200\1\174\24\74\1\121"+
    "\35\74\1\201\1\202\53\74\1\121\4\74\1\52\14\74"+
    "\1\52\70\74\1\121\40\74\1\53\51\74\1\121\42\74"+
    "\1\55\41\74\1\55\1\74\1\55\3\74\1\121\5\74"+
    "\1\203\1\74\1\204\5\74\1\173\2\74\1\174\1\175"+
    "\10\74\1\47\1\74\1\47\7\74\3\47\1\204\2\205"+
    "\1\176\1\173\5\47\2\177\2\200\1\174\24\74\1\121"+
    "\5\74\1\42\1\206\4\42\2\74\1\207\3\42\2\74"+
    "\3\42\1\210\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\6\42\2\74\2\42\1\211\1\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\2\42\1\212\1\42"+
    "\1\213\1\42\2\74\4\42\2\74\3\42\1\214\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\21\74\1\52\70\74\1\121"+
    "\5\74\1\215\2\42\1\216\2\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\1\42"+
    "\1\217\4\42\2\74\1\42\1\162\2\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\1\220\3\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\6\42\2\74\4\42\2\74\2\42\1\221"+
    "\1\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\102\74\1\222"+
    "\5\74\156\0\1\76\110\0\1\223\111\0\1\224\115\0"+
    "\1\102\107\0\1\225\112\0\1\226\115\0\1\110\154\0"+
    "\1\102\112\0\1\227\112\0\1\230\6\0\7\124\6\0"+
    "\2\124\4\0\2\124\4\0\3\124\55\0\1\124\2\74"+
    "\1\121\5\74\6\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\4\42\1\231"+
    "\2\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\1\42\1\145\2\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\102\74\1\232\7\74\1\121\5\74"+
    "\6\42\2\74\1\233\3\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\6\42\2\74\1\42\1\234"+
    "\1\42\1\145\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\1\42\1\127\4\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\5\42"+
    "\1\235\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\5\42\1\162\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\4\42\2\74\1\42\1\145\2\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\6\42\2\74\1\42\1\236"+
    "\2\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\6\42\2\74\4\42\2\74\3\42\1\237\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\2\42"+
    "\1\240\1\42\2\74\1\241\3\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\3\42\1\242\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\1\42\1\243\2\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\1\244\6\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\10\42"+
    "\1\245\2\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\4\42\1\246\1\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\4\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\2\42\1\247\4\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\6\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\3\42\1\145\3\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\6\42\2\74\4\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\2\42\1\250\4\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\4\42\2\74\1\42\1\251\2\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\2\42"+
    "\1\252\4\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\3\42\1\253\2\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\1\42\1\241\4\42"+
    "\2\74\4\42\2\74\3\42\1\241\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\1\42\1\145\4\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\1\254\5\42\2\74\4\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\4\42\1\255\1\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\4\42\1\256\1\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\5\42\1\241"+
    "\2\74\4\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\6\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\1\257\6\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\2\42\1\260"+
    "\3\42\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\1\42\1\261\2\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\45\74"+
    "\1\262\6\74\1\263\1\264\1\265\33\74\1\121\55\74"+
    "\1\266\1\267\33\74\1\121\32\74\1\270\11\74\3\270"+
    "\5\74\5\270\31\74\1\121\15\74\1\173\2\74\1\174"+
    "\32\74\1\173\5\74\2\177\2\74\1\174\24\74\1\121"+
    "\45\74\1\271\6\74\1\272\1\273\1\274\32\74\1\275"+
    "\1\121\32\74\1\276\11\74\3\276\5\74\5\276\31\74"+
    "\1\121\36\74\1\277\53\74\1\121\44\74\3\300\6\74"+
    "\4\300\31\74\1\121\10\74\1\301\1\74\1\301\5\74"+
    "\1\301\11\74\1\301\10\74\4\301\1\74\2\301\2\74"+
    "\5\301\2\74\3\301\5\74\1\301\16\74\1\121\45\74"+
    "\2\302\43\74\1\121\5\74\6\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\10\42\1\303"+
    "\2\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\4\42\1\304\1\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\1\305\5\42"+
    "\2\74\4\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\6\42\2\74\1\306\3\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\1\307\1\42\1\247\4\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\5\42\1\145\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\6\42"+
    "\1\254\4\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\6\42\2\74\1\310\1\42\1\252\1\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\4\42\1\311\1\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\2\42"+
    "\1\312\1\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\1\256\5\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\10\42\1\313\2\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\1\250\3\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\10\42\1\314"+
    "\2\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\102\74\1\315\5\74\41\0\1\316\156\0\1\317\112\0"+
    "\1\320\5\0\2\74\1\121\5\74\6\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\10\42"+
    "\1\321\2\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\102\74\1\322\7\74\1\121\5\74\6\42\2\74"+
    "\2\42\1\252\1\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\6\42\1\323\4\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\6\42\2\74\1\324\3\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\6\42\2\74\1\42\1\325"+
    "\2\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\1\326\6\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\6\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\10\42\1\162\2\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\4\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\10\42\1\327\2\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\6\42\2\74\4\42\2\74"+
    "\3\42\1\330\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\1\42\1\331\4\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\1\332\5\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\1\333\5\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\4\42"+
    "\2\74\3\42\1\252\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\6\42\2\74\4\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\2\42\1\334\4\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\10\42\1\145\2\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\1\42\1\335\2\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\3\42\1\336\2\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\1\145\6\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\1\42\1\337\4\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\1\314\3\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\6\42\2\74\4\42\2\74\2\42\1\340"+
    "\1\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\55\74\1\341"+
    "\34\74\1\121\60\74\1\342\31\74\1\121\57\74\1\343"+
    "\32\74\1\121\60\74\1\344\31\74\1\121\57\74\1\345"+
    "\32\74\1\121\20\74\1\174\11\74\1\270\1\74\1\270"+
    "\7\74\3\270\3\74\1\346\1\74\5\270\2\74\2\200"+
    "\1\174\24\74\1\121\55\74\1\347\34\74\1\121\60\74"+
    "\1\350\31\74\1\121\57\74\1\351\32\74\1\121\32\74"+
    "\1\276\11\74\3\276\5\74\5\276\31\74\1\121\20\74"+
    "\1\174\11\74\1\276\1\74\1\276\7\74\3\276\3\74"+
    "\1\346\1\74\5\276\4\74\1\174\24\74\1\121\15\74"+
    "\1\173\2\74\1\174\13\74\1\300\7\74\3\300\3\74"+
    "\1\176\1\173\1\74\4\300\2\177\2\74\1\174\24\74"+
    "\1\121\10\74\1\301\1\74\1\301\2\74\1\173\2\74"+
    "\1\301\11\74\1\301\1\74\1\301\6\74\4\301\1\74"+
    "\2\301\1\176\1\173\5\301\2\177\3\301\5\74\1\301"+
    "\16\74\1\121\15\74\1\173\2\74\1\174\13\74\1\302"+
    "\10\74\2\302\3\74\1\176\1\173\5\74\2\177\2\74"+
    "\1\174\24\74\1\121\5\74\3\42\1\352\2\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\5\42\1\145\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\1\352\6\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\4\42\1\353\1\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\10\42\1\354\2\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\3\42\1\145\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\1\42\1\355\1\132\1\42\2\74\1\356\3\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\1\307"+
    "\6\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\1\42\1\145\2\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\10\42\1\145\2\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\4\42\2\74\3\42\1\304\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\4\42\1\145\1\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\4\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\1\132\6\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\1\42\1\314\4\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\4\42\1\130\1\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\1\357"+
    "\3\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\3\42\1\360\2\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\1\42\1\361"+
    "\4\42\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\6\42\1\362\4\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\3\42\1\363\2\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\1\42"+
    "\1\130\2\42\2\74\4\42\3\74\3\42\6\74\7\42"+
    "\1\74\13\42\5\74\7\42\1\133\2\74\1\42\4\74"+
    "\1\121\5\74\1\42\1\132\4\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\4\42\2\74\3\42\1\364\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\1\256\3\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\6\42"+
    "\2\74\4\42\2\74\3\42\1\365\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\1\145\5\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\1\304"+
    "\5\42\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\20\74\1\174\44\74\1\174\24\74\1\121"+
    "\5\74\6\42\2\74\4\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\1\42\1\145\5\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\4\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\5\42\1\145\1\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\2\42"+
    "\1\132\4\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\6\42\2\74\1\366\3\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\6\42\2\74\4\42\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\10\42\1\367"+
    "\2\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\4\42\1\321\1\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\1\42\1\304"+
    "\4\42\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\3\42\1\370\2\74"+
    "\4\42\3\74\3\42\6\74\7\42\1\74\13\42\5\74"+
    "\7\42\1\133\2\74\1\42\4\74\1\121\5\74\5\42"+
    "\1\252\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\1\42\1\371\2\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\3\42\1\372\2\42\2\74\4\42\2\74\4\42\3\74"+
    "\3\42\6\74\7\42\1\74\13\42\5\74\7\42\1\133"+
    "\2\74\1\42\4\74\1\121\5\74\6\42\2\74\4\42"+
    "\2\74\3\42\1\154\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\4\42\1\373\1\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\1\42\1\374"+
    "\4\42\2\74\4\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\3\42\1\375\2\42\2\74\4\42"+
    "\2\74\4\42\3\74\3\42\6\74\7\42\1\74\13\42"+
    "\5\74\7\42\1\133\2\74\1\42\4\74\1\121\5\74"+
    "\1\162\5\42\2\74\4\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\13\42\5\74\7\42\1\133\2\74"+
    "\1\42\4\74\1\121\5\74\6\42\2\74\1\42\1\252"+
    "\2\42\2\74\4\42\3\74\3\42\6\74\7\42\1\74"+
    "\13\42\5\74\7\42\1\133\2\74\1\42\4\74\1\121"+
    "\5\74\6\42\2\74\4\42\2\74\4\42\3\74\3\42"+
    "\6\74\7\42\1\74\6\42\1\252\4\42\5\74\7\42"+
    "\1\133\2\74\1\42\4\74\1\121\5\74\6\42\2\74"+
    "\1\42\1\242\2\42\2\74\4\42\3\74\3\42\6\74"+
    "\7\42\1\74\13\42\5\74\7\42\1\133\2\74\1\42"+
    "\4\74\1\121\5\74\6\42\2\74\4\42\2\74\4\42"+
    "\3\74\3\42\6\74\7\42\1\74\13\42\5\74\1\252"+
    "\6\42\1\133\2\74\1\42\2\74";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14775];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\60\1\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\11\1\1\1\11\5\1\2\11\51\1\4\0"+
    "\1\1\2\0\1\1\3\0\14\1\1\0\2\11\4\0"+
    "\1\1\1\0\27\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\3\0\20\1\3\11\25\1\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private final Stack<Integer> stateStack = new Stack<Integer>();

private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

private void handleIndent() {
    lastIndentSpaces = indentSpaces;
    indentSpaces = 0;
    pushState(INDENTER);
}

private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();

private IElementType getIndenterToken() {
    if (indentSpaces == lastIndentSpaces) {
        popState();
        return NimTypes.IND_EQ;
    } else if (indentSpaces > lastIndentSpaces) {

        // Note the incremental column positions for indentation.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimTypes.IND_GT;
    } else {
        Indent lastIndent = indentStack.pop();
        int diff = lastIndent.Column - indentSpaces;

        // Handle exact proper single dedent.
        if (diff == lastIndent.Increment) {
            popState();
            return NimTypes.IND_LT;
        }

        // Handle multi-dedent.
        if (diff > lastIndent.Increment) {
            return NimTypes.IND_LT;
        }

        popState();
        return TokenType.BAD_CHARACTER;
    }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case INDENTER: {
              return getIndenterToken();
            }  // fall though
            case 254: break;
            case LINE_COMMENT: {
              popState(); return TokenType.WHITE_SPACE;
            }  // fall though
            case 255: break;
            case BLOCK_COMMENT: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 256: break;
            case BLOCK_DOC_COMMENT: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 257: break;
            case STRING_LITERAL: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 258: break;
            case TRIPLE_STRING_LITERAL: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 259: break;
            case RAW_STRING_LITERAL: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 260: break;
            case GENERALIZED_STRING_LITERAL: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 261: break;
            case GENERALIZED_TRIPLE_STRING_LITERAL: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 262: break;
            case CHARACTER_LITERAL: {
              return TokenType.BAD_CHARACTER;
            }  // fall though
            case 263: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 57: break;
          case 2: 
            { return NimTypes.OP8;
            } 
            // fall through
          case 58: break;
          case 3: 
            { return NimTypes.OP0;
            } 
            // fall through
          case 59: break;
          case 4: 
            { return NimTypes.OPR;
            } 
            // fall through
          case 60: break;
          case 5: 
            { return NimTypes.OP9;
            } 
            // fall through
          case 61: break;
          case 6: 
            { return NimTypes.OP2;
            } 
            // fall through
          case 62: break;
          case 7: 
            { return NimTypes.IDENT;
            } 
            // fall through
          case 63: break;
          case 8: 
            { return NimTypes.OP5;
            } 
            // fall through
          case 64: break;
          case 9: 
            { return NimTypes.OP7;
            } 
            // fall through
          case 65: break;
          case 10: 
            { return NimTypes.OP10;
            } 
            // fall through
          case 66: break;
          case 11: 
            { return NimTypes.INT_LIT;
            } 
            // fall through
          case 67: break;
          case 12: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 68: break;
          case 13: 
            { return NimTypes.BRACKET;
            } 
            // fall through
          case 69: break;
          case 14: 
            { handleIndent();
            } 
            // fall through
          case 70: break;
          case 15: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 16: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 72: break;
          case 17: 
            { return NimTypes.SEMICOLON;
            } 
            // fall through
          case 73: break;
          case 18: 
            { return NimTypes.COMMA;
            } 
            // fall through
          case 74: break;
          case 19: 
            { return NimTypes.GRAVE_ACCENT;
            } 
            // fall through
          case 75: break;
          case 20: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 76: break;
          case 21: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 77: break;
          case 22: 
            { indentSpaces = 0;
            } 
            // fall through
          case 78: break;
          case 23: 
            { indentSpaces++;
            } 
            // fall through
          case 79: break;
          case 24: 
            { popState(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 80: break;
          case 25: 
            { 
            } 
            // fall through
          case 81: break;
          case 26: 
            { popState(); return NimTypes.STR_LIT;
            } 
            // fall through
          case 82: break;
          case 27: 
            { popState(); return NimTypes.RSTR_LIT;
            } 
            // fall through
          case 83: break;
          case 28: 
            { popState(); return NimTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 84: break;
          case 29: 
            { popState(); return NimTypes.CHAR_LIT;
            } 
            // fall through
          case 85: break;
          case 30: 
            { return NimTypes.OP1;
            } 
            // fall through
          case 86: break;
          case 31: 
            { return NimTypes.OP3;
            } 
            // fall through
          case 87: break;
          case 32: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 88: break;
          case 33: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 89: break;
          case 34: 
            { return NimTypes.KEYW;
            } 
            // fall through
          case 90: break;
          case 35: 
            { return NimTypes.OP6;
            } 
            // fall through
          case 91: break;
          case 36: 
            { return NimTypes.UINT_LIT;
            } 
            // fall through
          case 92: break;
          case 37: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 93: break;
          case 38: 
            { if (popState() == 0) return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 94: break;
          case 39: 
            { return NimTypes.OP4;
            } 
            // fall through
          case 95: break;
          case 40: 
            { return NimTypes.NIL;
            } 
            // fall through
          case 96: break;
          case 41: 
            { return NimTypes.INT8_LIT;
            } 
            // fall through
          case 97: break;
          case 42: 
            { return NimTypes.FLOAT_LIT;
            } 
            // fall through
          case 98: break;
          case 43: 
            { return NimTypes.UINT8_LIT;
            } 
            // fall through
          case 99: break;
          case 44: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 100: break;
          case 45: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 101: break;
          case 46: 
            { popState(); return NimTypes.TRIPLESTR_LIT;
            } 
            // fall through
          case 102: break;
          case 47: 
            { popState(); return NimTypes.GENERALIZED_TRIPLESTR_LIT;
            } 
            // fall through
          case 103: break;
          case 48: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 104: break;
          case 49: 
            { return NimTypes.INT16_LIT;
            } 
            // fall through
          case 105: break;
          case 50: 
            { return NimTypes.INT64_LIT;
            } 
            // fall through
          case 106: break;
          case 51: 
            { return NimTypes.INT32_LIT;
            } 
            // fall through
          case 107: break;
          case 52: 
            { return NimTypes.FLOAT64_LIT;
            } 
            // fall through
          case 108: break;
          case 53: 
            { return NimTypes.FLOAT32_LIT;
            } 
            // fall through
          case 109: break;
          case 54: 
            { return NimTypes.UINT16_LIT;
            } 
            // fall through
          case 110: break;
          case 55: 
            { return NimTypes.UINT64_LIT;
            } 
            // fall through
          case 111: break;
          case 56: 
            { return NimTypes.UINT32_LIT;
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
