/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.parser.NimTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int LINE_COMMENT = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC_COMMENT = 8;
  public static final int STRING_LITERAL = 10;
  public static final int TRIPLE_STRING_LITERAL = 12;
  public static final int RAW_STRING_LITERAL = 14;
  public static final int GENERALIZED_STRING_LITERAL = 16;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 18;
  public static final int CHARACTER_LITERAL = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     7,  7,  6,  6,  8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\44\1\42\1\107\1\110\1\43\22\0\1\112\1\17\1\106\1\37\1\33\1\32\1\25"+
    "\1\54\1\73\1\72\1\4\1\1\1\75\1\1\1\24\1\5\1\50\1\47\1\61\1\60\1\62\1\46\1"+
    "\57\1\46\1\56\1\34\1\7\1\74\1\16\1\3\1\2\2\6\1\45\1\53\2\45\1\66\1\67\2\35"+
    "\1\55\13\35\1\64\2\35\1\51\2\35\1\40\1\113\1\41\1\33\1\36\1\76\1\13\1\52\1"+
    "\77\1\15\1\65\1\23\1\104\1\30\1\20\1\103\1\100\1\31\1\27\1\14\1\10\1\101\1"+
    "\35\1\11\1\22\1\21\1\63\1\26\1\105\1\12\1\102\1\35\1\71\1\0\1\70\2\0\5\35"+
    "\1\111\172\35\250\0\2\107\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\2\4\1\5\6\6"+
    "\1\7\4\6\1\1\1\10\4\6\1\4\1\11\1\12"+
    "\1\13\2\14\2\15\1\16\1\12\1\6\1\17\2\6"+
    "\1\14\2\20\1\21\1\22\1\23\4\6\1\24\1\0"+
    "\1\25\2\26\1\27\1\30\6\31\2\32\1\33\2\31"+
    "\1\33\1\3\1\34\2\7\1\35\1\7\2\6\1\36"+
    "\2\6\1\37\3\6\1\7\2\6\1\40\2\6\1\7"+
    "\1\6\1\7\14\6\1\41\4\6\4\0\1\12\2\0"+
    "\1\42\3\0\14\6\1\0\1\42\1\43\3\0\1\6"+
    "\1\0\2\6\1\44\1\7\23\6\1\0\1\12\2\0"+
    "\1\12\1\0\1\12\1\45\3\12\11\6\1\46\1\45"+
    "\1\6\1\47\11\6\1\12\5\6\1\0\25\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u02f8\0\u03dc\0\u02ac"+
    "\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u0390\0\u05f0"+
    "\0\u063c\0\u0688\0\u06d4\0\u0720\0\u02ac\0\u076c\0\u07b8\0\u0804"+
    "\0\u0850\0\u02ac\0\u02ac\0\u089c\0\u08e8\0\u0934\0\u02ac\0\u02ac"+
    "\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u02ac\0\u0ab0\0\u0afc\0\u0b48"+
    "\0\u02ac\0\u0b94\0\u02ac\0\u02ac\0\u02ac\0\u0be0\0\u0c2c\0\u0c78"+
    "\0\u0cc4\0\u0d10\0\u02ac\0\u0d5c\0\u0d5c\0\u0da8\0\u0d5c\0\230"+
    "\0\u0d5c\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0d5c\0\u0f70"+
    "\0\u0d5c\0\u0fbc\0\u1008\0\u0fbc\0\u0d5c\0\u02ac\0\u0d5c\0\u02ac"+
    "\0\u0804\0\u0804\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u10ec"+
    "\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u0804\0\u1398"+
    "\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8"+
    "\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858"+
    "\0\u02ac\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c"+
    "\0\u1ab8\0\u19d4\0\u1b04\0\u1b50\0\u02ac\0\u1b9c\0\u1be8\0\u1c34"+
    "\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94"+
    "\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u0d5c\0\u0d5c\0\u205c"+
    "\0\u0e40\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u0804\0\u2224"+
    "\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484"+
    "\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u12b4\0\u2600\0\u264c\0\u2698"+
    "\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u02ac\0\u2814\0\u2860\0\u28ac"+
    "\0\u28f8\0\u2944\0\u02ac\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0"+
    "\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u02ac"+
    "\0\u0d5c\0\u2d20\0\u02ac\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c"+
    "\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u0804\0\u3018\0\u3064\0\u30b0"+
    "\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310"+
    "\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570"+
    "\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\15\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\40\1\12\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\40\2\44\1\53\1\40"+
    "\1\54\1\40\1\55\1\40\5\44\1\56\1\40\1\57"+
    "\2\40\1\47\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\40\1\67\1\70\2\40\1\71\1\72\1\73"+
    "\1\52\1\40\1\52\1\12\42\74\1\75\1\76\43\74"+
    "\3\0\1\77\1\74\42\100\2\0\43\100\3\0\2\100"+
    "\37\101\1\102\1\101\1\103\1\101\1\104\43\101\3\0"+
    "\41\101\1\105\1\101\1\106\1\101\1\104\43\101\3\0"+
    "\44\101\1\107\1\110\42\101\1\111\3\0\1\101\1\112"+
    "\43\101\1\104\42\101\1\113\3\0\44\101\1\107\1\110"+
    "\42\101\1\114\3\0\44\101\1\107\1\110\10\101\1\111"+
    "\32\101\3\0\2\101\2\73\1\115\113\73\1\115\1\116"+
    "\110\73\3\0\1\117\110\0\2\73\1\115\1\120\112\73"+
    "\1\115\1\73\1\116\111\73\1\115\5\73\1\40\1\121"+
    "\4\40\2\73\3\40\1\122\2\73\4\40\2\73\3\40"+
    "\6\73\5\40\1\123\1\40\1\73\6\40\1\124\4\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\3\40\1\126\2\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\10\40\1\127\2\40\7\73"+
    "\7\40\1\130\2\73\1\40\4\73\1\115\5\73\1\131"+
    "\5\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\4\40\1\132\1\133\2\73\2\40"+
    "\1\134\1\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\1\135\5\40\2\73\1\136\3\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\1\137"+
    "\5\40\2\73\1\140\3\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\10\40\1\141\2\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\4\40\1\142"+
    "\1\40\2\73\1\40\1\143\1\144\1\137\2\73\1\40"+
    "\1\145\2\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\1\40\1\146\4\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\6\40\1\147\1\40\1\150"+
    "\2\40\7\73\3\40\1\151\3\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\1\40\1\152\2\40"+
    "\2\73\2\40\1\153\1\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\1\154\1\155\1\40\1\156\2\40\2\73"+
    "\1\157\3\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\6\40\1\160\4\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\21\73\1\161\14\73\1\47\26\73"+
    "\1\47\1\73\1\61\23\73\1\115\5\73\3\40\1\154"+
    "\2\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\1\162\2\40\1\163\2\40\2\73"+
    "\1\164\3\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\10\40\1\165\2\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\10\40\1\124\2\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\15\73\1\166\2\73\1\167\1\170"+
    "\7\73\1\44\1\73\1\44\7\73\3\44\3\73\1\171"+
    "\1\166\5\44\2\172\2\173\1\167\26\73\1\115\34\73"+
    "\1\174\1\175\55\73\1\115\4\73\1\47\14\73\1\47"+
    "\71\73\1\115\37\73\1\50\53\73\1\115\41\73\1\52"+
    "\43\73\1\52\1\73\1\52\3\73\1\115\5\73\1\176"+
    "\1\73\1\177\5\73\1\166\2\73\1\167\1\170\7\73"+
    "\1\44\1\73\1\44\7\73\3\44\1\177\2\200\1\171"+
    "\1\166\5\44\2\172\2\173\1\167\26\73\1\115\5\73"+
    "\1\40\1\201\4\40\2\73\1\202\3\40\2\73\3\40"+
    "\1\203\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\2\40\1\204\1\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\2\40\1\205\1\40\1\206"+
    "\1\40\2\73\4\40\2\73\3\40\1\207\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\21\73\1\47\71\73\1\115\21\73"+
    "\1\61\71\73\1\115\5\73\1\210\2\40\1\211\2\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\1\40\1\212\4\40\2\73\1\40\1\154"+
    "\2\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\1\213\3\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\4\40"+
    "\2\73\2\40\1\214\1\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\103\73\1\215\5\73\156\0\1\75\111\0\1\216"+
    "\112\0\1\217\116\0\1\101\110\0\1\220\113\0\1\221"+
    "\116\0\1\107\157\0\1\101\113\0\1\222\5\0\2\73"+
    "\1\115\5\73\6\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\4\40\1\223"+
    "\2\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\1\40\1\137\2\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\103\73\1\224\7\73\1\115\5\73"+
    "\6\40\2\73\1\225\3\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\1\40\1\226"+
    "\1\40\1\137\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\1\40\1\121\4\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\5\40"+
    "\1\227\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\5\40\1\154\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\4\40\2\73\1\40\1\137\2\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\1\40\1\230"+
    "\2\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\4\40\2\73\3\40\1\137\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\2\40"+
    "\1\231\1\40\2\73\1\137\3\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\3\40\1\232\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\1\40\1\233\2\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\1\234\6\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\4\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\10\40"+
    "\1\235\2\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\4\40\1\236\1\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\2\40\1\237\4\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\6\40\1\240"+
    "\4\40\7\73\3\40\1\137\3\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\2\40"+
    "\1\241\4\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\6\40\2\73\4\40\2\73\1\40\1\242\2\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\4\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\2\40\1\243\4\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\3\40\1\244\2\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\1\40"+
    "\1\137\4\40\2\73\4\40\2\73\3\40\1\137\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\1\40\1\137\4\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\1\245\5\40\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\6\40\2\73"+
    "\4\40\2\73\3\40\1\246\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\4\40\1\247\1\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\4\40"+
    "\1\250\1\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\5\40\1\137\2\73\4\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\6\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\1\251\6\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\2\40\1\252\3\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\1\40\1\253\2\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\44\73\1\254\6\73"+
    "\1\255\1\256\1\257\35\73\1\115\54\73\1\256\1\257"+
    "\35\73\1\115\31\73\1\260\11\73\3\260\5\73\5\260"+
    "\33\73\1\115\15\73\1\166\2\73\1\167\31\73\1\166"+
    "\5\73\2\172\2\73\1\167\25\73\1\261\1\115\31\73"+
    "\1\262\11\73\3\262\5\73\5\262\33\73\1\115\35\73"+
    "\1\263\55\73\1\115\43\73\3\264\6\73\4\264\33\73"+
    "\1\115\10\73\1\265\1\73\1\265\5\73\1\265\10\73"+
    "\1\265\10\73\4\265\1\73\2\265\2\73\5\265\2\73"+
    "\3\265\7\73\1\265\16\73\1\115\44\73\2\266\45\73"+
    "\1\115\5\73\6\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\10\40\1\267\2\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\4\40"+
    "\1\162\1\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\1\270\5\40\2\73\4\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\6\40\2\73\1\271\3\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\1\272\1\40\1\237\4\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\5\40\1\137\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\6\40\1\245\4\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\6\40\2\73\1\273\1\40\1\243\1\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\4\40\1\274"+
    "\1\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\2\40\1\275\1\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\1\250\5\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\10\40\1\276"+
    "\2\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\1\241\3\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\10\40\1\277\2\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\103\73\1\300"+
    "\5\73\40\0\1\301\161\0\1\111\5\0\2\73\1\115"+
    "\5\73\6\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\10\40\1\302\2\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\103\73\1\303\7\73"+
    "\1\115\5\73\6\40\2\73\2\40\1\243\1\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\6\40\1\304\4\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\1\305\3\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\6\40\2\73\1\40\1\306\2\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\1\307\6\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\6\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\10\40\1\154\2\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\10\40\1\310\2\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\6\40\2\73\4\40\2\73\3\40\1\311\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\1\40\1\312\4\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\1\313\5\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\1\314\5\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\10\40\1\315\2\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\6\40\2\73"+
    "\4\40\2\73\3\40\1\243\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\6\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\2\40\1\316"+
    "\4\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\10\40\1\137\2\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\1\40\1\317"+
    "\2\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\2\40\1\240\1\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\3\40\1\320"+
    "\2\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\1\137"+
    "\6\40\1\125\2\73\1\40\4\73\1\115\5\73\1\40"+
    "\1\321\4\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\1\277\3\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\6\40\2\73\4\40\2\73\2\40\1\322\1\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\54\73\1\255\36\73\1\115"+
    "\57\73\1\255\33\73\1\115\56\73\1\255\34\73\1\115"+
    "\20\73\1\167\10\73\1\260\1\73\1\260\7\73\3\260"+
    "\3\73\1\323\1\73\5\260\2\73\2\173\1\167\26\73"+
    "\1\115\31\73\1\262\11\73\3\262\5\73\5\262\33\73"+
    "\1\115\20\73\1\167\10\73\1\262\1\73\1\262\7\73"+
    "\3\262\3\73\1\323\1\73\5\262\4\73\1\167\26\73"+
    "\1\115\15\73\1\166\2\73\1\167\12\73\1\264\7\73"+
    "\3\264\3\73\1\171\1\166\1\73\4\264\2\172\2\73"+
    "\1\167\26\73\1\115\10\73\1\265\1\73\1\265\2\73"+
    "\1\166\2\73\1\265\10\73\1\265\1\73\1\265\6\73"+
    "\4\265\1\73\2\265\1\171\1\166\5\265\2\172\3\265"+
    "\7\73\1\265\16\73\1\115\15\73\1\166\2\73\1\167"+
    "\12\73\1\266\10\73\2\266\3\73\1\171\1\166\5\73"+
    "\2\172\2\73\1\167\26\73\1\115\5\73\3\40\1\324"+
    "\2\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\1\324"+
    "\6\40\1\125\2\73\1\40\4\73\1\115\5\73\4\40"+
    "\1\325\1\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\10\40\1\326"+
    "\2\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\3\40\1\137\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\1\40"+
    "\1\327\1\124\1\40\2\73\1\330\3\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\1\272\6\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\1\40"+
    "\1\137\2\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\10\40\1\137\2\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\3\40\1\162\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\4\40\1\137\1\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\4\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\1\124\6\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\1\40\1\277\4\40\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\4\40\1\122"+
    "\1\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\1\331\3\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\3\40"+
    "\1\332\2\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\1\40\1\333\4\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\6\40\1\334\4\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\3\40\1\335"+
    "\2\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\1\40\1\122\2\40"+
    "\2\73\4\40\2\73\3\40\6\73\7\40\1\73\13\40"+
    "\7\73\7\40\1\125\2\73\1\40\4\73\1\115\5\73"+
    "\1\40\1\124\4\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\4\40"+
    "\2\73\3\40\1\336\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\1\250\3\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\6\40\2\73\4\40"+
    "\2\73\3\40\1\337\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\1\137\5\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\1\162\5\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\20\73\1\167\43\73\1\167\26\73\1\115\5\73\6\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\1\40\1\137\5\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\5\40\1\137\1\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\2\40\1\124\4\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\6\40\2\73"+
    "\1\340\3\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\6\40\2\73\4\40\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\10\40\1\341\2\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\4\40"+
    "\1\302\1\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\1\40\1\162\4\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\3\40\1\342\2\73\4\40\2\73"+
    "\3\40\6\73\7\40\1\73\13\40\7\73\7\40\1\125"+
    "\2\73\1\40\4\73\1\115\5\73\5\40\1\243\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\1\40\1\343\2\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\3\40\1\344"+
    "\2\40\2\73\4\40\2\73\4\40\2\73\3\40\6\73"+
    "\7\40\1\73\13\40\7\73\7\40\1\125\2\73\1\40"+
    "\4\73\1\115\5\73\6\40\2\73\4\40\2\73\3\40"+
    "\1\345\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\4\40"+
    "\1\346\1\40\2\73\4\40\2\73\4\40\2\73\3\40"+
    "\6\73\7\40\1\73\13\40\7\73\7\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\1\40\1\347\4\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\3\40\1\350\2\40\2\73\4\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\1\154\5\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\7\40\1\125\2\73\1\40\4\73"+
    "\1\115\5\73\6\40\2\73\1\40\1\243\2\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\13\40\7\73"+
    "\7\40\1\125\2\73\1\40\4\73\1\115\5\73\6\40"+
    "\2\73\4\40\2\73\4\40\2\73\3\40\6\73\7\40"+
    "\1\73\13\40\7\73\3\40\1\137\3\40\1\125\2\73"+
    "\1\40\4\73\1\115\5\73\6\40\2\73\4\40\2\73"+
    "\4\40\2\73\3\40\6\73\7\40\1\73\6\40\1\243"+
    "\4\40\7\73\7\40\1\125\2\73\1\40\4\73\1\115"+
    "\5\73\6\40\2\73\1\40\1\232\2\40\2\73\4\40"+
    "\2\73\3\40\6\73\7\40\1\73\13\40\7\73\7\40"+
    "\1\125\2\73\1\40\4\73\1\115\5\73\6\40\2\73"+
    "\4\40\2\73\4\40\2\73\3\40\6\73\7\40\1\73"+
    "\13\40\7\73\1\243\6\40\1\125\2\73\1\40\2\73";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\61\1\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\46\1\4\0\1\1\2\0\1\1\3\0\14\1\1\0"+
    "\2\11\3\0\1\1\1\0\27\1\1\0\1\1\2\0"+
    "\1\1\1\0\17\1\1\11\21\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private Stack<Integer> stateStack = new Stack<Integer>();

private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

private void handleIndent() {
    lastIndentSpaces = indentSpaces;
    indentSpaces = 0;
    pushState(INDENTER);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NimTypes.FRAGMENT;
            } 
            // fall through
          case 40: break;
          case 2: 
            { return NimTypes.OP8;
            } 
            // fall through
          case 41: break;
          case 3: 
            { return NimTypes.OP0;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return NimTypes.OP9;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return NimTypes.OP2;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return NimTypes.IDENT;
            } 
            // fall through
          case 45: break;
          case 7: 
            { return NimTypes.OP5;
            } 
            // fall through
          case 46: break;
          case 8: 
            { return NimTypes.OP7;
            } 
            // fall through
          case 47: break;
          case 9: 
            { return NimTypes.OP10;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return NimTypes.NUMERICAL_CONSTANT;
            } 
            // fall through
          case 49: break;
          case 11: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 50: break;
          case 12: 
            { return NimTypes.BRACKET;
            } 
            // fall through
          case 51: break;
          case 13: 
            { handleIndent();
            } 
            // fall through
          case 52: break;
          case 14: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 15: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 54: break;
          case 16: 
            { return NimTypes.PARENTHESIS;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return NimTypes.C_SEMICOLON;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return NimTypes.C_COMMA;
            } 
            // fall through
          case 57: break;
          case 19: 
            { return NimTypes.C_GRAVE_ACCENT;
            } 
            // fall through
          case 58: break;
          case 20: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 59: break;
          case 21: 
            { yypushback(1);
        popState();

        if (indentSpaces == lastIndentSpaces) {
            return NimTypes.IND_EQ;
        } else if (indentSpaces > lastIndentSpaces) {
            return NimTypes.IND_GT;
        } else {
            return NimTypes.IND_LT;
        }
            } 
            // fall through
          case 60: break;
          case 22: 
            { indentSpaces = 0;
            } 
            // fall through
          case 61: break;
          case 23: 
            { indentSpaces++;
            } 
            // fall through
          case 62: break;
          case 24: 
            { popState(); return NimTypes.COMMENT;
            } 
            // fall through
          case 63: break;
          case 25: 
            { 
            } 
            // fall through
          case 64: break;
          case 26: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 65: break;
          case 27: 
            { popState(); return NimTypes.STRING_LITERAL;
            } 
            // fall through
          case 66: break;
          case 28: 
            { return NimTypes.OP1;
            } 
            // fall through
          case 67: break;
          case 29: 
            { return NimTypes.OP3;
            } 
            // fall through
          case 68: break;
          case 30: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 69: break;
          case 31: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 70: break;
          case 32: 
            { return NimTypes.KEYW;
            } 
            // fall through
          case 71: break;
          case 33: 
            { return NimTypes.OP6;
            } 
            // fall through
          case 72: break;
          case 34: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 73: break;
          case 35: 
            { if (popState() == 0) return NimTypes.COMMENT;
            } 
            // fall through
          case 74: break;
          case 36: 
            { return NimTypes.OP4;
            } 
            // fall through
          case 75: break;
          case 37: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 76: break;
          case 38: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 77: break;
          case 39: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
