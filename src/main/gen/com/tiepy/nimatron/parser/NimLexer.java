/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.parser.NimTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int LINE_COMMENT = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC_COMMENT = 8;
  public static final int STRING_LITERAL = 10;
  public static final int TRIPLE_STRING_LITERAL = 12;
  public static final int RAW_STRING_LITERAL = 14;
  public static final int GENERALIZED_STRING_LITERAL = 16;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 18;
  public static final int CHARACTER_LITERAL = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     7,  7,  6,  6,  8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\76\1\77\1\2\22\0\1\101\1\64\1\75\1\4\3\64\1\50\1\71\1\70\1"+
    "\64\1\61\1\73\1\61\1\62\1\64\1\45\1\44\1\55\1\54\1\56\1\43\1\53\1\43\1\52"+
    "\1\7\1\67\1\72\5\64\1\42\1\47\2\42\1\60\1\63\2\10\1\51\13\10\1\57\2\10\1\46"+
    "\2\10\1\5\1\102\1\6\1\64\1\11\1\74\1\12\1\20\1\24\1\13\1\26\1\33\1\40\1\36"+
    "\1\21\1\37\1\25\1\22\1\17\1\15\1\23\1\30\1\10\1\14\1\16\1\27\1\31\1\32\1\41"+
    "\1\34\1\35\1\10\1\66\1\64\1\65\1\64\1\0\5\10\1\100\172\10\250\0\2\76\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\3\1\4\2\5\1\6\25\7"+
    "\1\6\1\10\2\11\1\5\2\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\6\23\2\24\1\25"+
    "\2\23\1\25\1\0\1\26\2\0\1\6\3\0\1\27"+
    "\2\7\1\30\1\7\1\30\3\7\1\31\12\7\2\30"+
    "\26\7\4\0\1\32\2\0\1\33\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\4\7\1\30\33\7\3\6"+
    "\1\34\1\0\1\35\17\7\1\6\22\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u025b"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u025b"+
    "\0\u09af\0\u09f2\0\u0a35\0\u025b\0\u0a78\0\u025b\0\u025b\0\u025b"+
    "\0\u0abb\0\u025b\0\u025b\0\u0afe\0\u025b\0\206\0\u025b\0\u0b41"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u025b\0\u0c90\0\u025b\0\u0cd3"+
    "\0\u0d16\0\u0cd3\0\u0d59\0\u025b\0\u0d9c\0\u0ddf\0\u0d9c\0\u0e22"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u03ed"+
    "\0\u103a\0\u107d\0\u10c0\0\u0eeb\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814"+
    "\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u025b\0\u0bc7\0\u1af5\0\u025b\0\u1b38\0\u025b"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1e19\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u0fb4\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u025b\0\u25b0\0\u025b\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\u2917\0\u295a\0\u299d\0\u03ed\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\12\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\22\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\3\22\1\46"+
    "\1\22\2\21\1\47\2\22\1\50\1\22\5\21\2\22"+
    "\1\51\1\52\1\22\1\51\1\20\1\53\1\51\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\0\1\15\1\22"+
    "\1\15\1\51\1\62\1\63\1\64\73\62\3\0\1\65"+
    "\1\62\1\66\2\0\73\66\3\0\2\66\2\67\1\70"+
    "\1\67\1\71\1\67\1\72\67\67\3\0\4\67\1\70"+
    "\1\67\1\73\1\67\1\74\67\67\3\0\3\67\1\75"+
    "\1\76\72\67\1\77\3\0\1\67\1\100\2\67\1\70"+
    "\72\67\1\101\3\0\3\67\1\75\1\76\72\67\1\102"+
    "\3\0\3\67\1\75\1\76\45\67\1\77\25\67\3\0"+
    "\2\67\104\0\1\13\104\0\1\15\73\0\1\15\1\0"+
    "\1\15\5\0\1\103\1\104\157\0\1\20\4\0\1\20"+
    "\22\0\1\21\1\0\1\21\7\0\1\105\4\0\1\106"+
    "\2\0\1\107\1\0\1\110\7\0\3\21\2\0\1\111"+
    "\1\105\5\21\1\107\1\106\1\0\1\112\1\110\26\0"+
    "\41\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\4\22\1\114\1\22\1\115\1\116\31\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\12\22\1\117\1\22\1\120\2\22\1\121\21\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\3\22\1\122\13\22\1\123\21\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\124\2\0\1\22\11\0\12\22"+
    "\1\125\1\22\1\126\24\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\20\22\1\127\6\22"+
    "\1\130\11\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\3\22\1\131\6\22\1\132\1\22"+
    "\1\115\2\22\1\133\21\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\5\22\1\134\4\22"+
    "\1\135\1\136\25\22\1\0\10\22\2\0\1\22\11\0"+
    "\1\113\2\0\1\22\11\0\6\22\1\137\1\140\1\141"+
    "\7\22\1\142\3\22\1\120\14\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\17\22\1\143"+
    "\21\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\5\22\1\120\3\22\1\144\10\22\1\143"+
    "\1\22\1\120\14\22\1\0\10\22\2\0\1\22\11\0"+
    "\1\113\2\0\1\22\11\0\3\22\1\145\10\22\1\146"+
    "\24\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\6\22\1\147\4\22\1\150\11\22\1\151"+
    "\13\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\5\22\1\152\11\22\1\153\2\22\1\154"+
    "\3\22\1\155\12\22\1\0\10\22\2\0\1\22\11\0"+
    "\1\113\2\0\1\22\11\0\5\22\1\156\12\22\1\157"+
    "\20\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\7\22\1\160\31\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\3\22\1\157"+
    "\35\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\3\22\1\161\1\22\1\162\4\22\1\163"+
    "\1\22\1\157\5\22\1\164\16\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\14\22\1\157"+
    "\24\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\12\22\1\165\26\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\27\22\1\166"+
    "\11\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\1\21\1\0\1\21\6\0\1\167\1\105"+
    "\1\0\1\170\2\0\1\106\2\0\1\107\1\0\1\110"+
    "\1\171\6\0\3\21\1\171\1\167\1\111\1\105\5\21"+
    "\1\107\1\106\1\0\1\112\1\110\100\0\2\51\1\0"+
    "\1\51\2\0\1\51\12\0\1\51\6\0\1\20\52\0"+
    "\2\51\1\0\1\51\1\20\1\0\1\51\1\54\11\0"+
    "\1\51\62\0\1\20\102\0\1\54\115\0\1\172\6\0"+
    "\1\63\102\0\1\67\106\0\1\104\101\0\1\173\102\0"+
    "\1\103\102\0\1\174\77\0\1\75\176\0\1\67\102\0"+
    "\1\175\12\0\1\176\141\0\1\177\5\0\1\200\1\201"+
    "\1\202\35\0\1\203\33\0\3\203\4\0\5\203\2\0"+
    "\1\204\74\0\1\201\1\202\47\0\1\105\7\0\1\107"+
    "\1\0\1\110\15\0\1\105\5\0\1\107\3\0\1\110"+
    "\26\0\1\205\33\0\3\205\4\0\5\205\121\0\1\206"+
    "\14\0\4\22\1\157\34\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\4\22\1\120\34\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\10\22\1\120\30\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\7\22\1\207\13\22"+
    "\1\120\15\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\24\22\1\210\14\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\12\22"+
    "\1\211\26\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\20\22\1\212\3\22\1\120\14\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\13\22\1\120\25\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\20\22\1\213\20\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\3\22\1\214\35\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\5\22\1\120\5\22"+
    "\1\120\25\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\15\22\1\215\23\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\25\22"+
    "\1\216\13\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\20\22\1\217\20\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\17\22"+
    "\1\220\21\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\6\22\1\115\32\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\14\22"+
    "\1\221\24\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\15\22\1\222\2\22\1\223\20\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\6\22\1\224\32\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\21\22\1\225\17\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\17\22\1\226\21\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\20\22\1\120\20\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\30\22\1\227\10\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\7\22\1\230\31\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\6\22\1\231\32\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\4\22\1\120\15\22"+
    "\1\232\16\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\7\22\1\233\2\22\1\234\26\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\15\22\1\235\3\22\1\225\17\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\22\22"+
    "\1\236\3\22\1\120\12\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\10\22\1\237\30\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\21\22\1\240\17\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\21\22\1\233\17\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\14\22\1\241\24\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\5\22\1\120\33\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\12\22\1\242\26\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\13\22\1\243\25\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\14\22\1\232\24\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\6\22\1\244\32\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\6\22\1\241\32\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\17\22\1\245\21\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\12\22\1\240\4\22\1\246\21\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\46\0\2\247"+
    "\100\0\3\250\5\0\4\250\33\0\1\251\2\0\2\251"+
    "\4\0\1\251\3\0\1\251\1\0\1\251\4\0\1\251"+
    "\6\0\4\251\1\0\1\251\2\0\5\251\1\0\1\251"+
    "\2\0\1\251\114\0\1\252\102\0\1\77\60\0\1\200"+
    "\105\0\1\200\101\0\1\200\34\0\1\203\1\0\1\203"+
    "\21\0\1\110\7\0\3\203\2\0\1\253\1\0\5\203"+
    "\4\0\1\110\26\0\1\203\33\0\3\203\4\0\5\203"+
    "\33\0\1\205\1\0\1\205\14\0\1\106\4\0\1\110"+
    "\7\0\3\205\2\0\1\253\1\0\5\205\1\0\1\106"+
    "\2\0\1\110\114\0\1\254\14\0\15\22\1\255\2\22"+
    "\1\256\20\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\17\22\1\157\21\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\7\22"+
    "\1\233\31\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\22\22\1\257\16\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\12\22"+
    "\1\246\26\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\20\22\1\260\20\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\5\22"+
    "\1\261\33\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\27\22\1\262\11\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\3\22"+
    "\1\263\35\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\15\22\1\263\23\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\13\22"+
    "\1\264\25\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\17\22\1\265\21\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\14\22"+
    "\1\143\24\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\14\22\1\266\24\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\5\22"+
    "\1\267\33\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\17\22\1\270\21\22\1\0\10\22"+
    "\2\0\1\22\11\0\1\113\2\0\1\22\11\0\17\22"+
    "\2\120\20\22\1\0\10\22\2\0\1\22\11\0\1\113"+
    "\2\0\1\22\11\0\7\22\1\143\5\22\1\235\2\22"+
    "\1\271\2\22\1\272\15\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\17\22\1\120\21\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\24\22\1\120\14\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\17\22\1\273\21\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\17\22\1\274\21\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\21\22\1\275\17\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\13\22\1\233\25\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\15\22\1\120\23\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\6\22\1\276\32\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\7\22\1\236\31\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\3\22\1\277\35\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\11\0\13\22\1\115\25\22"+
    "\1\0\10\22\2\0\1\22\11\0\1\113\2\0\1\22"+
    "\11\0\6\22\1\120\32\22\1\0\10\22\2\0\1\22"+
    "\11\0\1\113\2\0\1\22\13\0\1\247\7\0\1\105"+
    "\7\0\1\107\1\0\1\110\10\0\2\247\2\0\1\111"+
    "\1\105\5\0\1\107\3\0\1\110\30\0\1\250\7\0"+
    "\1\105\7\0\1\107\1\0\1\110\7\0\3\250\2\0"+
    "\1\111\1\105\1\0\4\250\1\107\3\0\1\110\26\0"+
    "\1\251\1\0\3\251\4\0\1\251\1\105\2\0\1\251"+
    "\1\0\1\251\2\0\1\107\1\0\1\251\6\0\4\251"+
    "\1\0\1\251\1\111\1\105\5\251\1\107\1\251\2\0"+
    "\1\251\52\0\1\110\27\0\1\110\26\0\3\22\1\300"+
    "\35\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\12\22\1\301\26\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\5\22\1\246"+
    "\33\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\12\22\1\241\26\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\14\22\1\120"+
    "\24\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\14\22\1\115\24\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\16\22\1\120"+
    "\22\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\22\22\1\302\16\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\5\22\1\303"+
    "\33\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\5\22\1\143\33\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\3\22\1\304"+
    "\35\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\15\22\1\143\23\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\12\22\1\305"+
    "\26\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\17\22\1\306\21\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\21\22\1\143"+
    "\17\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\13\22\1\307\25\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\31\22\1\120"+
    "\7\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\13\22\1\310\25\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\5\22\1\115"+
    "\33\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\6\22\1\270\32\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\4\22\1\233"+
    "\34\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\24\22\1\311\14\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\20\22\1\44"+
    "\20\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\6\22\1\312\32\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\5\22\1\313"+
    "\33\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\3\22\1\314\35\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\13\22\1\315"+
    "\25\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\3\22\1\316\35\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\22\22\1\233"+
    "\16\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\20\22\1\210\20\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\20\22\1\233"+
    "\20\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\11\0\26\22\1\120\12\22\1\0\10\22\2\0"+
    "\1\22\11\0\1\113\2\0\1\22\11\0\15\22\1\233"+
    "\23\22\1\0\10\22\2\0\1\22\11\0\1\113\2\0"+
    "\1\22\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11926];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\11\4\1\1\11\27\1\1\11\3\1\1\11"+
    "\1\1\3\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\11\1\1\1\11\3\1\1\0\1\11\2\0"+
    "\1\1\3\0\54\1\4\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\1\1\0\1\1\1\0\43\1\1\11"+
    "\1\0\1\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private Stack<Integer> stateStack = new Stack<Integer>();

private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

private void handleIndent() {
    lastIndentSpaces = indentSpaces;
    indentSpaces = 0;
    pushState(INDENTER);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NimTypes.FRAGMENT;
            } 
            // fall through
          case 30: break;
          case 2: 
            { handleIndent();
            } 
            // fall through
          case 31: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 32: break;
          case 4: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 33: break;
          case 5: 
            { return NimTypes.BRACKET;
            } 
            // fall through
          case 34: break;
          case 6: 
            { return NimTypes.NUMERICAL_CONSTANT;
            } 
            // fall through
          case 35: break;
          case 7: 
            { return NimTypes.IDENT;
            } 
            // fall through
          case 36: break;
          case 8: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 37: break;
          case 9: 
            { return NimTypes.OPERATOR;
            } 
            // fall through
          case 38: break;
          case 10: 
            { return NimTypes.PARENTHESIS;
            } 
            // fall through
          case 39: break;
          case 11: 
            { return NimTypes.SEMICOLON;
            } 
            // fall through
          case 40: break;
          case 12: 
            { return NimTypes.COMMA;
            } 
            // fall through
          case 41: break;
          case 13: 
            { return NimTypes.GRAVE_ACCENT;
            } 
            // fall through
          case 42: break;
          case 14: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 43: break;
          case 15: 
            { yypushback(1);
        popState();

        if (indentSpaces == lastIndentSpaces) {
            return NimTypes.IND_EQ;
        } else if (indentSpaces > lastIndentSpaces) {
            return NimTypes.IND_GT;
        } else {
            return NimTypes.IND_LT;
        }
            } 
            // fall through
          case 44: break;
          case 16: 
            { indentSpaces = 0;
            } 
            // fall through
          case 45: break;
          case 17: 
            { indentSpaces++;
            } 
            // fall through
          case 46: break;
          case 18: 
            { popState(); return NimTypes.COMMENT;
            } 
            // fall through
          case 47: break;
          case 19: 
            { 
            } 
            // fall through
          case 48: break;
          case 20: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 49: break;
          case 21: 
            { popState(); return NimTypes.STRING_LITERAL;
            } 
            // fall through
          case 50: break;
          case 22: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 51: break;
          case 23: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 52: break;
          case 24: 
            { return NimTypes.KEYWORD;
            } 
            // fall through
          case 53: break;
          case 25: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 54: break;
          case 26: 
            { if (popState() == 0) return NimTypes.COMMENT;
            } 
            // fall through
          case 55: break;
          case 27: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 56: break;
          case 28: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 57: break;
          case 29: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
