/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.parser.NimTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int DEDENTER = 4;
  public static final int LINE_COMMENT = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int BLOCK_DOC_COMMENT = 10;
  public static final int DISCARD_COMMENT = 12;
  public static final int STRING_LITERAL = 14;
  public static final int TRIPLE_STRING_LITERAL = 16;
  public static final int RAW_STRING_LITERAL = 18;
  public static final int GENERALIZED_STRING_LITERAL = 20;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 22;
  public static final int CHARACTER_LITERAL = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\43\1\41\1\105\1\106\1\42\22\0\1\103\1\17\1\104\1\36\3\25\1\53\1\67"+
    "\1\70\1\4\1\1\1\72\1\1\1\24\1\5\1\47\1\46\1\60\1\57\1\61\1\45\1\56\1\45\1"+
    "\55\1\33\1\7\1\71\1\16\1\3\1\2\2\6\1\44\1\52\2\44\1\65\1\66\2\34\1\54\13\34"+
    "\1\63\2\34\1\50\2\34\1\37\1\110\1\40\1\25\1\35\1\73\1\13\1\51\1\74\1\15\1"+
    "\64\1\23\1\101\1\30\1\20\1\100\1\75\1\31\1\27\1\14\1\10\1\76\1\34\1\11\1\22"+
    "\1\21\1\62\1\26\1\102\1\12\1\77\1\34\1\67\1\32\1\70\1\32\1\0\5\34\1\107\172"+
    "\34\250\0\2\105\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\2\1\4\12\5\1\3"+
    "\1\2\4\5\1\3\1\6\1\7\2\10\2\11\1\12"+
    "\1\6\1\5\1\13\2\5\1\10\1\14\1\15\1\16"+
    "\4\5\1\17\1\0\1\20\2\21\1\22\1\23\1\24"+
    "\7\25\2\1\1\26\2\25\1\27\1\30\1\25\1\31"+
    "\2\2\1\3\1\2\2\5\1\32\2\5\1\33\3\5"+
    "\1\2\2\5\1\34\2\5\1\2\1\5\1\2\17\5"+
    "\4\0\1\35\2\0\1\36\3\0\14\5\1\0\1\36"+
    "\1\37\5\0\1\5\1\0\2\5\1\2\1\40\23\5"+
    "\1\0\1\41\4\0\1\42\1\0\1\43\3\0\1\42"+
    "\1\44\3\6\12\5\1\45\1\44\1\46\1\47\1\5"+
    "\1\50\11\5\1\51\5\5\1\52\1\53\1\54\1\55"+
    "\1\56\1\0\1\57\1\60\1\61\25\5\1\34\1\5"+
    "\3\0\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u03fe\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u04d9\0\u0845"+
    "\0\u088e\0\u08d7\0\u0920\0\u04d9\0\u0969\0\u09b2\0\u09fb\0\u03b5"+
    "\0\u03b5\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u03b5\0\u0b68\0\u0bb1"+
    "\0\u0bfa\0\u03b5\0\u03b5\0\u03b5\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e"+
    "\0\u0d67\0\u03b5\0\u0db0\0\u0db0\0\u0df9\0\u0db0\0\u0db0\0\333"+
    "\0\u0db0\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0db0"+
    "\0\u0ff8\0\u0db0\0\u1041\0\u108a\0\u1041\0\u1041\0\u10d3\0\u0db0"+
    "\0\u0db0\0\u111c\0\u111c\0\u08d7\0\u1165\0\u11ae\0\u11f7\0\u1240"+
    "\0\u1289\0\u11f7\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f"+
    "\0\u08d7\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u03b5\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15"+
    "\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u0db0\0\u0db0\0\u20cb"+
    "\0\u0e8b\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca"+
    "\0\u2313\0\u08d7\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9"+
    "\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u13ad\0\u26c8"+
    "\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u03b5\0\u28c7"+
    "\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u03b5\0\u2a7d\0\u2ac6"+
    "\0\u2b0f\0\u2b58\0\u03b5\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5"+
    "\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d"+
    "\0\u03b5\0\u0db0\0\u0db0\0\u0db0\0\u2f56\0\u03b5\0\u2f9f\0\u2fe8"+
    "\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u08d7"+
    "\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u03b5\0\u03b5\0\u03b5"+
    "\0\u03b5\0\u03b5\0\u339d\0\u03b5\0\u03b5\0\u03b5\0\u33e6\0\u342f"+
    "\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677"+
    "\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf"+
    "\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07"+
    "\0\u03b5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\17\1\22\2\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\17\1\21\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\42\1\16\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\42\2\45\1\54\1\42\1\55"+
    "\1\42\1\56\1\42\5\45\1\57\1\42\1\60\2\42"+
    "\1\61\1\50\1\62\1\63\1\64\1\65\1\42\1\66"+
    "\1\67\2\42\1\70\1\53\1\71\1\72\1\53\1\42"+
    "\1\44\41\73\1\74\1\75\40\73\1\76\1\73\3\0"+
    "\1\73\41\77\2\0\42\77\3\0\1\77\41\100\2\0"+
    "\42\100\3\0\1\100\36\101\1\102\1\101\1\103\1\101"+
    "\1\104\42\101\3\0\37\101\1\105\1\101\1\106\1\101"+
    "\1\104\42\101\3\0\43\101\1\104\41\101\1\107\3\0"+
    "\42\101\1\110\1\111\41\101\1\112\3\0\1\113\42\101"+
    "\1\104\41\101\1\114\3\0\42\101\1\110\1\111\41\101"+
    "\1\115\3\0\42\101\1\110\1\111\41\101\1\116\3\0"+
    "\43\101\1\104\41\101\1\117\3\0\42\101\1\110\1\111"+
    "\10\101\1\120\31\101\3\0\1\101\2\72\1\121\107\72"+
    "\1\44\1\122\1\37\4\44\6\72\2\44\4\72\2\44"+
    "\4\72\1\44\55\72\1\44\1\0\2\123\1\122\4\123"+
    "\6\0\2\123\4\0\2\123\4\0\1\123\55\0\1\123"+
    "\1\72\1\44\1\122\1\44\1\37\3\44\6\72\2\44"+
    "\4\72\2\44\4\72\1\44\55\72\1\44\1\72\1\44"+
    "\1\122\5\44\6\72\2\44\4\72\2\44\4\72\1\44"+
    "\55\72\1\44\2\72\1\121\5\72\1\42\1\124\4\42"+
    "\2\72\3\42\1\124\2\72\4\42\1\72\3\42\6\72"+
    "\5\42\1\125\1\42\1\72\6\42\1\126\4\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\3\42\1\130\2\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\10\42\1\131\2\42\5\72"+
    "\7\42\1\72\1\132\2\72\1\42\3\72\1\121\5\72"+
    "\1\133\5\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\4\42\1\134\1\135"+
    "\2\72\2\42\1\136\1\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\1\137\5\42\2\72"+
    "\1\140\3\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\1\141\5\42\2\72\1\142\3\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\10\42"+
    "\1\143\2\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\4\42\1\144\1\42\2\72\1\42"+
    "\1\145\1\146\1\141\2\72\1\42\1\147\2\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\1\42\1\150"+
    "\4\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\6\42\1\151\1\42\1\152\2\42\5\72"+
    "\3\42\1\153\3\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\1\42\1\154\2\42\2\72"+
    "\2\42\1\155\1\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\1\156\1\157\1\42\1\160\2\42\2\72"+
    "\1\161\3\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\6\42\1\162\4\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\2\72\1\44\1\122\5\44\6\72\2\44"+
    "\4\72\1\37\1\44\4\72\1\44\5\72\1\50\27\72"+
    "\1\50\17\72\1\44\2\72\1\121\5\72\3\42\1\156"+
    "\2\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\1\134\2\42\1\163\2\42"+
    "\2\72\1\164\3\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\10\42\1\165\2\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\10\42\1\126\2\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\15\72"+
    "\1\166\2\72\1\167\1\170\6\72\1\45\1\72\1\45"+
    "\7\72\3\45\3\72\1\171\1\166\5\45\2\172\2\173"+
    "\1\167\24\72\1\121\33\72\1\174\1\175\53\72\1\121"+
    "\4\72\1\50\14\72\1\50\66\72\1\121\36\72\1\51"+
    "\51\72\1\121\40\72\1\53\37\72\1\53\2\72\1\53"+
    "\4\72\1\121\5\72\1\176\1\72\1\177\5\72\1\166"+
    "\2\72\1\167\1\170\6\72\1\45\1\72\1\45\7\72"+
    "\3\45\1\177\2\200\1\171\1\166\5\45\2\172\2\173"+
    "\1\167\24\72\1\121\5\72\1\42\1\201\4\42\2\72"+
    "\1\202\3\42\2\72\3\42\1\203\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\2\42\1\204"+
    "\1\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\2\42\1\205\1\42\1\206\1\42\2\72"+
    "\4\42\2\72\3\42\1\207\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\21\72\1\50\66\72\1\121\5\72\1\210"+
    "\2\42\1\211\2\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\1\42\1\212"+
    "\4\42\2\72\1\42\1\156\2\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\1\213\3\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\2\42"+
    "\1\214\1\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\101\72\1\215\4\72\152\0\1\74\106\0\1\216\107\0"+
    "\1\217\113\0\1\101\105\0\1\220\110\0\1\221\156\0"+
    "\1\222\45\0\1\110\153\0\1\101\110\0\1\223\110\0"+
    "\1\224\5\0\7\123\6\0\2\123\4\0\2\123\4\0"+
    "\1\123\55\0\1\123\2\72\1\121\5\72\6\42\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\4\42\1\225\2\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\1\42\1\141"+
    "\2\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\101\72\1\226\6\72\1\121\5\72\6\42\2\72"+
    "\1\227\3\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\1\42\1\230\1\42"+
    "\1\141\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\1\42\1\124\4\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\5\42\1\124\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\5\42\1\156\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\4\42\2\72\1\42\1\141"+
    "\2\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\1\42\1\231\2\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\4\42\2\72\3\42\1\232\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\2\42\1\233\1\42"+
    "\2\72\1\124\3\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\3\42\1\234\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\6\42"+
    "\2\72\1\42\1\235\2\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\1\236\6\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\10\42\1\237\2\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\4\42\1\240\1\42\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\2\42\1\241"+
    "\4\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\6\42\1\242\4\42\5\72\3\42\1\141"+
    "\3\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\2\42\1\243\4\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\4\42\2\72\1\42\1\244\2\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\2\42\1\245\4\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\3\42\1\246\2\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\1\42\1\124\4\42\2\72\4\42\2\72\3\42\1\124"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\1\42"+
    "\1\141\4\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\1\247\5\42\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\4\42\2\72\3\42\1\250"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\4\42"+
    "\1\251\1\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\4\42\1\252\1\42"+
    "\2\72\4\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\1\253"+
    "\6\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\2\42\1\254\3\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\1\42\1\255\2\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\43\72\1\256\6\72\1\257\1\260"+
    "\1\261\33\72\1\121\53\72\1\262\1\263\33\72\1\121"+
    "\30\72\1\264\11\72\3\264\5\72\5\264\31\72\1\121"+
    "\15\72\1\166\2\72\1\167\30\72\1\166\5\72\2\172"+
    "\2\72\1\167\24\72\1\121\43\72\1\265\6\72\1\266"+
    "\1\267\1\270\32\72\1\271\1\121\30\72\1\272\11\72"+
    "\3\272\5\72\5\272\31\72\1\121\34\72\1\273\53\72"+
    "\1\121\42\72\3\274\6\72\4\274\31\72\1\121\10\72"+
    "\1\275\1\72\1\275\5\72\1\275\7\72\1\275\10\72"+
    "\4\275\1\72\2\275\2\72\5\275\2\72\3\275\5\72"+
    "\1\275\16\72\1\121\43\72\2\276\43\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\10\42\1\277\2\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\4\42\1\300"+
    "\1\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\1\301\5\42\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\6\42\2\72\1\302\3\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\1\303\1\42\1\241\4\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\5\42\1\141\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\6\42\1\247\4\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\1\304\1\42"+
    "\1\245\1\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\4\42\1\305\1\42\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\6\42\2\72\2\42\1\306\1\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\1\252"+
    "\5\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\10\42\1\307"+
    "\2\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\1\243\3\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\10\42\1\310\2\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\101\72\1\311\4\72\37\0\1\312\155\0\1\217\110\0"+
    "\1\313\110\0\1\314\4\0\2\72\1\121\5\72\6\42"+
    "\2\72\4\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\10\42\1\315\2\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\101\72\1\316\6\72\1\121"+
    "\5\72\6\42\2\72\2\42\1\245\1\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\6\42"+
    "\2\72\4\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\6\42\1\317\4\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\6\42\2\72\1\320"+
    "\3\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\1\42\1\321\2\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\1\322\6\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\6\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\10\42\1\156\2\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\6\42"+
    "\2\72\4\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\10\42\1\323\2\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\6\42\2\72\4\42"+
    "\2\72\3\42\1\324\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\1\42\1\325\4\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\1\326\5\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\1\327\5\42\2\72"+
    "\4\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\10\42\1\330\2\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\3\42\1\245\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\6\42\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\2\42\1\331\4\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\10\42\1\141\2\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\6\42\2\72\1\42\1\332\2\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\6\42"+
    "\2\72\2\42\1\242\1\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\3\42\1\333\2\42"+
    "\2\72\4\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\1\141"+
    "\6\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\1\42\1\334\4\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\1\310\3\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\2\42"+
    "\1\335\1\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\53\72\1\336\34\72\1\121\56\72\1\337\31\72\1\121"+
    "\55\72\1\340\32\72\1\121\56\72\1\341\31\72\1\121"+
    "\55\72\1\342\32\72\1\121\20\72\1\167\7\72\1\264"+
    "\1\72\1\264\7\72\3\264\3\72\1\343\1\72\5\264"+
    "\2\72\2\173\1\167\24\72\1\121\53\72\1\344\34\72"+
    "\1\121\56\72\1\345\31\72\1\121\55\72\1\346\32\72"+
    "\1\121\30\72\1\272\11\72\3\272\5\72\5\272\31\72"+
    "\1\121\20\72\1\167\7\72\1\272\1\72\1\272\7\72"+
    "\3\272\3\72\1\343\1\72\5\272\4\72\1\167\24\72"+
    "\1\121\15\72\1\166\2\72\1\167\11\72\1\274\7\72"+
    "\3\274\3\72\1\171\1\166\1\72\4\274\2\172\2\72"+
    "\1\167\24\72\1\121\10\72\1\275\1\72\1\275\2\72"+
    "\1\166\2\72\1\275\7\72\1\275\1\72\1\275\6\72"+
    "\4\275\1\72\2\275\1\171\1\166\5\275\2\172\3\275"+
    "\5\72\1\275\16\72\1\121\15\72\1\166\2\72\1\167"+
    "\11\72\1\276\10\72\2\276\3\72\1\171\1\166\5\72"+
    "\2\172\2\72\1\167\24\72\1\121\5\72\3\42\1\347"+
    "\2\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\5\42\1\141\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\6\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\1\347\6\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\4\42\1\350"+
    "\1\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\10\42\1\351"+
    "\2\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\3\42\1\141\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\6\42"+
    "\2\72\1\42\1\352\1\126\1\42\2\72\1\353\3\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\1\303"+
    "\6\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\1\42\1\141\2\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\10\42\1\141\2\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\3\42\1\300\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\4\42\1\141\1\42"+
    "\2\72\4\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\1\126"+
    "\6\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\1\42\1\310\4\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\4\42\1\124"+
    "\1\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\1\354\3\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\3\42\1\355\2\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\1\42"+
    "\1\356\4\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\6\42\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\6\42"+
    "\1\357\4\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\3\42\1\360\2\42\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\6\42\2\72\1\42\1\124\2\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\1\42"+
    "\1\126\4\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\6\42\2\72\4\42"+
    "\2\72\3\42\1\361\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\1\252\3\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\6\42"+
    "\2\72\4\42\2\72\3\42\1\362\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\1\141\5\42\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\1\300\5\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\20\72\1\167\42\72"+
    "\1\167\24\72\1\121\5\72\6\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\1\42\1\141\5\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\5\42\1\141"+
    "\1\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\2\42\1\126\4\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\1\363\3\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\10\42\1\364\2\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\4\42\1\315\1\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\1\42"+
    "\1\365\4\42\2\72\4\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\6\42\2\72\3\42"+
    "\1\366\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\5\42\1\245\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\6\42"+
    "\2\72\1\42\1\367\2\42\2\72\4\42\1\72\3\42"+
    "\6\72\7\42\1\72\13\42\5\72\7\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\5\72\3\42\1\370\2\42"+
    "\2\72\4\42\2\72\4\42\1\72\3\42\6\72\7\42"+
    "\1\72\13\42\5\72\7\42\1\72\1\127\2\72\1\42"+
    "\3\72\1\121\5\72\6\42\2\72\4\42\2\72\3\42"+
    "\1\371\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\7\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\4\42\1\372\1\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\1\42\1\373"+
    "\4\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\5\42\1\374\2\72\4\42"+
    "\2\72\4\42\1\72\3\42\6\72\7\42\1\72\13\42"+
    "\5\72\7\42\1\72\1\127\2\72\1\42\3\72\1\121"+
    "\5\72\3\42\1\375\2\42\2\72\4\42\2\72\4\42"+
    "\1\72\3\42\6\72\7\42\1\72\13\42\5\72\7\42"+
    "\1\72\1\127\2\72\1\42\3\72\1\121\5\72\1\156"+
    "\5\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\1\42\1\245"+
    "\2\42\2\72\4\42\1\72\3\42\6\72\7\42\1\72"+
    "\13\42\5\72\7\42\1\72\1\127\2\72\1\42\3\72"+
    "\1\121\5\72\6\42\2\72\4\42\2\72\4\42\1\72"+
    "\3\42\6\72\7\42\1\72\13\42\5\72\3\42\1\141"+
    "\3\42\1\72\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\6\42\1\245\4\42\5\72\7\42\1\72"+
    "\1\127\2\72\1\42\3\72\1\121\5\72\6\42\2\72"+
    "\1\42\1\234\2\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\7\42\1\72\1\127\2\72"+
    "\1\42\3\72\1\121\5\72\6\42\2\72\4\42\2\72"+
    "\4\42\1\72\3\42\6\72\7\42\1\72\13\42\5\72"+
    "\7\42\1\376\1\127\2\72\1\42\3\72\1\121\5\72"+
    "\6\42\2\72\4\42\2\72\4\42\1\72\3\42\6\72"+
    "\7\42\1\72\13\42\5\72\1\245\6\42\1\72\1\127"+
    "\2\72\1\42\3\72\1\121\101\72\1\377\6\72\1\121"+
    "\101\72\1\u0100\6\72\1\121\101\72\1\u0101\4\72";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15184];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\54\1\1\0\2\11\1\1\2\11\1\1\1\11"+
    "\6\1\1\11\1\1\1\11\5\1\2\11\44\1\4\0"+
    "\1\1\2\0\1\1\3\0\14\1\1\0\2\11\5\0"+
    "\1\1\1\0\27\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\3\0\20\1\3\11\26\1\1\0\32\1\3\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

// -----------------------------------------------------------------------------
// State stack
// -----------------------------------------------------------------------------

private final Stack<Integer> stateStack = new Stack<Integer>();

/**
 * Pushes new state onto stack and sets parser to begin new state.
 * @param newState New parser state.
 * @return New stack size.
 */
private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

/**
 * Pops previous state from stack.
 * @return Previous state.
 */
private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

// -----------------------------------------------------------------------------
// Indent spaces handler
// -----------------------------------------------------------------------------

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

/**
 * Records last indent spaces and pushes the INDENTER state onto stack.
 */
private void handleIndent() {
    lastIndentSpaces = indentSpaces;
    indentSpaces = 0;
    pushState(INDENTER);
}

// -----------------------------------------------------------------------------
// Stack indenter
// -----------------------------------------------------------------------------

/**
 * Stores column number and increment for each indentation level.
 * This is required as it's not certain each indent is same size.
 */
private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();
private final Stack<IElementType> dedentStack = new Stack<IElementType>();

/**
 * This method is used to return multiple tokens by stalling the return state transition.
 * @return Next token to be returned to parser.
 */
private IElementType getIndenterToken() {

    // Return from INDENTER state with indent at same level, when length same.
    if (indentSpaces == lastIndentSpaces) {
        popState();
        return NimTypes.IND_EQ;
    }

    // Return from INDENTER state with indent at higher level, when length greater.
    if (indentSpaces > lastIndentSpaces) {

        // Length of last indent on stack, if any.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;

        // Push an entry onto the indenter stack.
        // Note the incremental column positions for indentation.
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimTypes.INDENT;
    }

    // Handle dedents.
    // Following is where indentSpaces < lastIndentSpaces.

    // Determine difference with previous indentation level.
    Indent lastIndent = indentStack.pop();
    int diff = lastIndent.Column - indentSpaces;

    // Handle error case where dedent is smaller than last indent.
    if (diff < lastIndent.Increment) {
        return TokenType.BAD_CHARACTER;
    }

    dedentStack.push(NimTypes.IND_EQ);

    // Add required dedents to stack to be returned.
    while (diff > lastIndent.Increment) {

        // Determine difference with previous indentation level.
        lastIndent = indentStack.pop();
        diff = lastIndent.Column - indentSpaces;

        // Handle error case where dedent is smaller than last indent.
        if (diff < lastIndent.Increment) {
            return TokenType.BAD_CHARACTER;
        }

        dedentStack.push(NimTypes.DEDENT);
    }

    lastIndentSpaces = lastIndent.Column;

    popState();
    pushState(DEDENTER);
    return NimTypes.DEDENT;
}

private IElementType getDedenterToken() {
    IElementType token = dedentStack.pop();
    if (dedentStack.size() == 0) popState();
    return token;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 51: break;
          case 2: 
            { return NimTypes.OP;
            } 
            // fall through
          case 52: break;
          case 3: 
            { return NimTypes.OPR;
            } 
            // fall through
          case 53: break;
          case 4: 
            { return NimTypes.OP2;
            } 
            // fall through
          case 54: break;
          case 5: 
            { return NimTypes.IDENT;
            } 
            // fall through
          case 55: break;
          case 6: 
            { return NimTypes.INT_LIT;
            } 
            // fall through
          case 56: break;
          case 7: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 57: break;
          case 8: 
            { return NimTypes.BRACKET;
            } 
            // fall through
          case 58: break;
          case 9: 
            { handleIndent();
            } 
            // fall through
          case 59: break;
          case 10: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 11: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 61: break;
          case 12: 
            { return NimTypes.SEMICOLON;
            } 
            // fall through
          case 62: break;
          case 13: 
            { return NimTypes.COMMA;
            } 
            // fall through
          case 63: break;
          case 14: 
            { return NimTypes.GRAVE_ACCENT;
            } 
            // fall through
          case 64: break;
          case 15: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 65: break;
          case 16: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 66: break;
          case 17: 
            { indentSpaces = 0;
            } 
            // fall through
          case 67: break;
          case 18: 
            { indentSpaces++;
            } 
            // fall through
          case 68: break;
          case 19: 
            { yypushback(1); return getDedenterToken();
            } 
            // fall through
          case 69: break;
          case 20: 
            { popState(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 21: 
            { 
            } 
            // fall through
          case 71: break;
          case 22: 
            { popState(); return NimTypes.STR_LIT;
            } 
            // fall through
          case 72: break;
          case 23: 
            { popState(); return NimTypes.RSTR_LIT;
            } 
            // fall through
          case 73: break;
          case 24: 
            { popState(); return NimTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 74: break;
          case 25: 
            { popState(); return NimTypes.CHAR_LIT;
            } 
            // fall through
          case 75: break;
          case 26: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 76: break;
          case 27: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 77: break;
          case 28: 
            { return NimTypes.KEYW;
            } 
            // fall through
          case 78: break;
          case 29: 
            { return NimTypes.UINT_LIT;
            } 
            // fall through
          case 79: break;
          case 30: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 80: break;
          case 31: 
            { if (popState() == 0) return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 81: break;
          case 32: 
            { return NimTypes.NIL;
            } 
            // fall through
          case 82: break;
          case 33: 
            { return NimTypes.INT8_LIT;
            } 
            // fall through
          case 83: break;
          case 34: 
            { return NimTypes.FLOAT_LIT;
            } 
            // fall through
          case 84: break;
          case 35: 
            { return NimTypes.UINT8_LIT;
            } 
            // fall through
          case 85: break;
          case 36: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 86: break;
          case 37: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 87: break;
          case 38: 
            { popState(); return NimTypes.TRIPLESTR_LIT;
            } 
            // fall through
          case 88: break;
          case 39: 
            { popState(); return NimTypes.GENERALIZED_TRIPLESTR_LIT;
            } 
            // fall through
          case 89: break;
          case 40: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 90: break;
          case 41: 
            { return NimTypes.BOOL_LIT;
            } 
            // fall through
          case 91: break;
          case 42: 
            { return NimTypes.INT16_LIT;
            } 
            // fall through
          case 92: break;
          case 43: 
            { return NimTypes.INT64_LIT;
            } 
            // fall through
          case 93: break;
          case 44: 
            { return NimTypes.INT32_LIT;
            } 
            // fall through
          case 94: break;
          case 45: 
            { return NimTypes.FLOAT64_LIT;
            } 
            // fall through
          case 95: break;
          case 46: 
            { return NimTypes.FLOAT32_LIT;
            } 
            // fall through
          case 96: break;
          case 47: 
            { return NimTypes.UINT16_LIT;
            } 
            // fall through
          case 97: break;
          case 48: 
            { return NimTypes.UINT64_LIT;
            } 
            // fall through
          case 98: break;
          case 49: 
            { return NimTypes.UINT32_LIT;
            } 
            // fall through
          case 99: break;
          case 50: 
            { pushState(DISCARD_COMMENT);
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
