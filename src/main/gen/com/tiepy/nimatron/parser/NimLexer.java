/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.parser.NimTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int LINE_COMMENT = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC_COMMENT = 8;
  public static final int STRING_LITERAL = 10;
  public static final int TRIPLE_STRING_LITERAL = 12;
  public static final int RAW_STRING_LITERAL = 14;
  public static final int GENERALIZED_STRING_LITERAL = 16;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 18;
  public static final int CHARACTER_LITERAL = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\45\1\43\1\110\1\111\1\44\22\0\1\113\1\17\1\107\1\40\1\33\1\32\1\25"+
    "\1\55\1\74\1\73\1\4\1\1\1\76\1\1\1\24\1\5\1\51\1\50\1\62\1\61\1\63\1\47\1"+
    "\60\1\47\1\57\1\35\1\7\1\75\1\16\1\3\1\2\2\6\1\46\1\54\2\46\1\67\1\70\2\36"+
    "\1\56\13\36\1\65\2\36\1\52\2\36\1\41\1\114\1\42\1\33\1\37\1\77\1\13\1\53\1"+
    "\100\1\15\1\66\1\23\1\105\1\30\1\20\1\104\1\101\1\31\1\27\1\14\1\10\1\102"+
    "\1\36\1\11\1\22\1\21\1\64\1\26\1\106\1\12\1\103\1\36\1\72\1\34\1\71\1\34\1"+
    "\0\5\36\1\112\172\36\250\0\2\110\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\2\5\1\6\6\7"+
    "\1\10\4\7\1\4\1\11\4\7\1\5\1\12\1\4"+
    "\1\13\1\14\2\15\2\16\1\17\1\13\1\7\1\20"+
    "\2\7\1\15\2\21\1\22\1\23\1\24\4\7\1\25"+
    "\1\0\1\26\2\27\1\30\1\31\6\32\2\1\1\33"+
    "\2\32\1\34\1\35\1\32\1\36\2\3\1\37\1\4"+
    "\2\10\1\40\1\10\2\7\1\41\2\7\1\42\3\7"+
    "\1\10\2\7\1\43\2\7\1\10\1\7\1\10\13\7"+
    "\1\44\4\7\4\0\1\45\2\0\1\46\3\0\14\7"+
    "\1\0\1\46\1\47\4\0\1\7\1\0\2\7\1\50"+
    "\1\10\1\51\21\7\1\0\1\52\4\0\1\53\1\0"+
    "\1\54\3\0\1\53\1\55\3\13\11\7\1\56\1\55"+
    "\1\57\1\60\1\7\1\61\16\7\1\62\1\63\1\64"+
    "\1\65\1\66\1\0\1\67\1\70\1\71\24\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u039c"+
    "\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e"+
    "\0\u0436\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u04d0\0\u086c"+
    "\0\u08b9\0\u0906\0\u0953\0\u04d0\0\u04d0\0\u04d0\0\u09a0\0\u09ed"+
    "\0\u0a3a\0\u034f\0\u034f\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u034f"+
    "\0\u0bbb\0\u0c08\0\u0c55\0\u034f\0\u0ca2\0\u034f\0\u034f\0\u034f"+
    "\0\u0cef\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u034f\0\u0e70\0\u0e70"+
    "\0\u0ebd\0\u0e70\0\232\0\u0e70\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1"+
    "\0\u103e\0\u0e70\0\u108b\0\u0e70\0\u10d8\0\u1125\0\u10d8\0\u10d8"+
    "\0\u1172\0\u0e70\0\u0e70\0\u11bf\0\u04d0\0\u11bf\0\u11bf\0\u04d0"+
    "\0\u0906\0\u0906\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u12a6"+
    "\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u0906\0\u155b"+
    "\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3"+
    "\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u19de\0\u04d0"+
    "\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46"+
    "\0\u1c93\0\u1ce0\0\u1d2d\0\u034f\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61"+
    "\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9"+
    "\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u0e70\0\u0e70\0\u224a\0\u0f57"+
    "\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418\0\u0906\0\u2465"+
    "\0\u0906\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680"+
    "\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u1474\0\u2801\0\u284e\0\u289b"+
    "\0\u28e8\0\u2935\0\u2982\0\u034f\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6"+
    "\0\u2b03\0\u2b50\0\u034f\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u034f"+
    "\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u2eec"+
    "\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u034f\0\u0e70\0\u0e70\0\u0e70"+
    "\0\u306d\0\u034f\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b"+
    "\0\u3288\0\u32d5\0\u3322\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3"+
    "\0\u034f\0\u034f\0\u034f\0\u034f\0\u034f\0\u34f0\0\u034f\0\u034f"+
    "\0\u034f\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b"+
    "\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u3926\0\u3973"+
    "\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\17\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\42\1\14\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\42\2\47\1\56"+
    "\1\42\1\57\1\42\1\60\1\42\5\47\1\61\1\42"+
    "\1\62\2\42\1\52\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\42\1\72\1\73\2\42\1\74\1\75"+
    "\1\76\1\55\1\42\1\55\1\46\43\77\1\100\1\101"+
    "\43\77\3\0\1\102\1\77\43\103\2\0\43\103\3\0"+
    "\2\103\40\104\1\105\1\104\1\106\1\104\1\107\43\104"+
    "\3\0\42\104\1\110\1\104\1\111\1\104\1\107\43\104"+
    "\3\0\45\104\1\112\1\113\42\104\1\114\3\0\1\104"+
    "\1\115\44\104\1\107\42\104\1\116\3\0\45\104\1\112"+
    "\1\113\42\104\1\117\3\0\45\104\1\112\1\113\42\104"+
    "\1\120\3\0\46\104\1\107\42\104\1\121\3\0\45\104"+
    "\1\112\1\113\10\104\1\122\32\104\3\0\2\104\2\76"+
    "\1\123\113\76\1\46\1\124\1\125\4\46\6\76\2\46"+
    "\4\76\2\46\4\76\3\46\57\76\1\46\1\0\2\126"+
    "\1\127\4\126\6\0\2\126\4\0\2\126\4\0\3\126"+
    "\57\0\1\126\1\76\1\46\1\124\1\130\4\46\6\76"+
    "\2\46\4\76\2\46\4\76\3\46\57\76\1\46\1\76"+
    "\1\46\1\124\1\46\1\125\3\46\6\76\2\46\4\76"+
    "\2\46\4\76\3\46\57\76\1\46\1\76\1\46\1\124"+
    "\5\46\6\76\2\46\4\76\2\46\4\76\3\46\57\76"+
    "\1\46\2\76\1\123\5\76\1\42\1\131\4\42\2\76"+
    "\3\42\1\132\2\76\4\42\3\76\3\42\6\76\5\42"+
    "\1\133\1\42\1\76\6\42\1\134\4\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\3\42\1\136"+
    "\2\42\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\10\42\1\137\2\42\7\76\7\42\1\140"+
    "\2\76\1\42\4\76\1\123\5\76\1\141\5\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\4\42\1\142\1\143\2\76\2\42\1\144\1\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\1\145\5\42\2\76\1\146\3\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\1\147\5\42\2\76"+
    "\1\150\3\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\10\42\1\151\2\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\4\42\1\152\1\42\2\76"+
    "\1\42\1\153\1\154\1\147\2\76\1\42\1\155\2\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\1\42\1\156"+
    "\4\42\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\6\42\1\157\1\42\1\160\2\42\7\76"+
    "\3\42\1\161\3\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\1\42\1\162\2\42\2\76\2\42"+
    "\1\163\1\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\1\164\1\165\4\42\2\76\1\166\3\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\6\42\1\167\4\42"+
    "\7\76\7\42\1\135\2\76\1\42\3\76\1\46\1\124"+
    "\5\46\6\76\2\46\4\76\1\170\1\46\4\76\3\46"+
    "\5\76\1\52\26\76\1\52\1\76\1\64\20\76\1\46"+
    "\2\76\1\123\5\76\3\42\1\164\2\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\1\171\2\42\1\172\2\42\2\76\1\173\3\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\10\42\1\174"+
    "\2\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\4\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\10\42\1\134"+
    "\2\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\15\76\1\175\2\76\1\176\1\177\10\76\1\47\1\76"+
    "\1\47\7\76\3\47\3\76\1\200\1\175\5\47\2\201"+
    "\2\202\1\176\26\76\1\123\35\76\1\203\1\204\55\76"+
    "\1\123\4\76\1\52\14\76\1\52\72\76\1\123\40\76"+
    "\1\53\53\76\1\123\42\76\1\55\43\76\1\55\1\76"+
    "\1\55\3\76\1\123\5\76\1\205\1\76\1\206\5\76"+
    "\1\175\2\76\1\176\1\177\10\76\1\47\1\76\1\47"+
    "\7\76\3\47\1\206\2\207\1\200\1\175\5\47\2\201"+
    "\2\202\1\176\26\76\1\123\5\76\1\42\1\210\4\42"+
    "\2\76\1\211\3\42\2\76\3\42\1\212\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\2\42\1\213"+
    "\1\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\2\42\1\214\1\42\1\215\1\42\2\76\4\42"+
    "\2\76\3\42\1\216\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\21\76\1\52\72\76\1\123\21\76\1\64\72\76\1\123"+
    "\5\76\1\217\2\42\1\220\2\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\1\42"+
    "\1\221\4\42\2\76\1\42\1\164\2\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\6\42\2\76"+
    "\1\222\3\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\2\42\1\223"+
    "\1\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\104\76\1\224"+
    "\5\76\160\0\1\100\112\0\1\225\113\0\1\226\117\0"+
    "\1\104\111\0\1\227\114\0\1\230\117\0\1\112\160\0"+
    "\1\104\114\0\1\231\114\0\1\232\6\0\7\126\6\0"+
    "\2\126\4\0\2\126\4\0\3\126\57\0\1\126\2\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\4\42\1\233"+
    "\2\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\1\42\1\147\2\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\104\76\1\234\7\76\1\123\5\76"+
    "\6\42\2\76\1\235\3\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\1\42\1\236"+
    "\1\42\1\147\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\1\42\1\131\4\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\5\42"+
    "\1\237\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\5\42\1\164\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\4\42\2\76\1\42\1\147\2\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\1\42\1\240"+
    "\2\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\4\42\2\76\3\42\1\241\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\6\42\2\76\2\42"+
    "\1\242\1\42\2\76\1\147\3\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\3\42\1\243\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\1\42\1\244\2\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\1\245\6\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\6\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\10\42"+
    "\1\246\2\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\4\42\1\247\1\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\2\42\1\250\4\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\3\42\1\147\3\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\4\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\2\42\1\251\4\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\6\42\2\76"+
    "\4\42\2\76\1\42\1\252\2\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\4\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\2\42"+
    "\1\253\4\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\3\42\1\254\2\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\1\42\1\147\4\42"+
    "\2\76\4\42\2\76\3\42\1\147\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\1\42\1\147\4\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\1\255\5\42\2\76\4\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\4\42\1\256\1\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\4\42\1\257\1\42\2\76\4\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\5\42\1\147"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\1\260\6\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\2\42\1\261"+
    "\3\42\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\1\42\1\262\2\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\45\76"+
    "\1\263\6\76\1\264\1\265\1\266\35\76\1\123\55\76"+
    "\1\267\1\270\35\76\1\123\32\76\1\271\11\76\3\271"+
    "\5\76\5\271\33\76\1\123\15\76\1\175\2\76\1\176"+
    "\32\76\1\175\5\76\2\201\2\76\1\176\26\76\1\123"+
    "\45\76\1\272\6\76\1\273\1\274\1\275\34\76\1\276"+
    "\1\123\32\76\1\277\11\76\3\277\5\76\5\277\33\76"+
    "\1\123\36\76\1\300\55\76\1\123\44\76\3\301\6\76"+
    "\4\301\33\76\1\123\10\76\1\302\1\76\1\302\5\76"+
    "\1\302\11\76\1\302\10\76\4\302\1\76\2\302\2\76"+
    "\5\302\2\76\3\302\7\76\1\302\16\76\1\123\45\76"+
    "\2\303\45\76\1\123\5\76\6\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\10\42\1\304"+
    "\2\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\4\42\1\171\1\42\2\76\4\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\1\305\5\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\1\306\3\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\6\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\1\307\1\42\1\250\4\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\5\42\1\147\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\6\42"+
    "\1\255\4\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\1\310\1\42\1\253\1\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\4\42\1\311\1\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\6\42\2\76\2\42"+
    "\1\312\1\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\1\257\5\42\2\76\4\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\6\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\10\42\1\313\2\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\1\251\3\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\10\42\1\314"+
    "\2\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\104\76\1\315\5\76\41\0\1\316\162\0\1\317\114\0"+
    "\1\320\5\0\2\76\1\123\5\76\6\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\10\42"+
    "\1\321\2\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\104\76\1\322\7\76\1\123\5\76\6\42\2\76"+
    "\2\42\1\253\1\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\4\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\6\42\1\323\4\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\6\42\2\76\1\324\3\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\1\42\1\325"+
    "\2\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\1\326\6\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\10\42\1\164\2\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\10\42\1\327\2\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\4\42\2\76"+
    "\3\42\1\330\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\1\42\1\331\4\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\1\332\5\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\1\333\5\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\6\42\2\76\4\42"+
    "\2\76\3\42\1\253\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\4\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\2\42\1\334\4\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\6\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\10\42\1\147\2\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\1\42\1\335\2\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\3\42\1\336\2\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\6\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\1\147\6\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\1\42\1\337\4\42\2\76\4\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\6\42\2\76"+
    "\1\314\3\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\2\42\1\340"+
    "\1\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\55\76\1\341"+
    "\36\76\1\123\60\76\1\342\33\76\1\123\57\76\1\343"+
    "\34\76\1\123\60\76\1\344\33\76\1\123\57\76\1\345"+
    "\34\76\1\123\20\76\1\176\11\76\1\271\1\76\1\271"+
    "\7\76\3\271\3\76\1\346\1\76\5\271\2\76\2\202"+
    "\1\176\26\76\1\123\55\76\1\347\36\76\1\123\60\76"+
    "\1\350\33\76\1\123\57\76\1\351\34\76\1\123\32\76"+
    "\1\277\11\76\3\277\5\76\5\277\33\76\1\123\20\76"+
    "\1\176\11\76\1\277\1\76\1\277\7\76\3\277\3\76"+
    "\1\346\1\76\5\277\4\76\1\176\26\76\1\123\15\76"+
    "\1\175\2\76\1\176\13\76\1\301\7\76\3\301\3\76"+
    "\1\200\1\175\1\76\4\301\2\201\2\76\1\176\26\76"+
    "\1\123\10\76\1\302\1\76\1\302\2\76\1\175\2\76"+
    "\1\302\11\76\1\302\1\76\1\302\6\76\4\302\1\76"+
    "\2\302\1\200\1\175\5\302\2\201\3\302\7\76\1\302"+
    "\16\76\1\123\15\76\1\175\2\76\1\176\13\76\1\303"+
    "\10\76\2\303\3\76\1\200\1\175\5\76\2\201\2\76"+
    "\1\176\26\76\1\123\5\76\3\42\1\352\2\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\4\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\1\352\6\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\4\42\1\353\1\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\10\42\1\354\2\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\3\42\1\147\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\1\42\1\355\1\134"+
    "\1\42\2\76\1\356\3\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\1\307\6\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\1\42\1\147\2\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\10\42"+
    "\1\147\2\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\3\42\1\171"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\4\42\1\147"+
    "\1\42\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\4\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\1\134"+
    "\6\42\1\135\2\76\1\42\4\76\1\123\5\76\1\42"+
    "\1\314\4\42\2\76\4\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\4\42\1\132\1\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\1\357\3\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\3\42\1\360\2\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\1\42\1\361\4\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\6\42\1\362\4\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\3\42\1\363\2\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\1\42\1\132\2\42\2\76\4\42"+
    "\3\76\3\42\6\76\7\42\1\76\13\42\7\76\7\42"+
    "\1\135\2\76\1\42\4\76\1\123\5\76\1\42\1\134"+
    "\4\42\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\4\42\2\76\3\42"+
    "\1\364\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\1\257\3\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\6\42\2\76\4\42\2\76\3\42"+
    "\1\365\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\1\147"+
    "\5\42\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\1\171\5\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\20\76\1\176"+
    "\44\76\1\176\26\76\1\123\5\76\6\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\1\42\1\147\5\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\4\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\5\42\1\147"+
    "\1\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\2\42\1\134\4\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\6\42\2\76\1\366\3\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\6\42\2\76\4\42\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\10\42\1\367\2\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\4\42\1\321\1\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\1\42\1\171\4\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\3\42\1\370\2\76\4\42\3\76\3\42\6\76"+
    "\7\42\1\76\13\42\7\76\7\42\1\135\2\76\1\42"+
    "\4\76\1\123\5\76\5\42\1\253\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\1\42\1\371\2\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\3\42\1\372\2\42\2\76"+
    "\4\42\2\76\4\42\3\76\3\42\6\76\7\42\1\76"+
    "\13\42\7\76\7\42\1\135\2\76\1\42\4\76\1\123"+
    "\5\76\6\42\2\76\4\42\2\76\3\42\1\156\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\4\42\1\373\1\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\1\42\1\374\4\42\2\76\4\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\3\42"+
    "\1\375\2\42\2\76\4\42\2\76\4\42\3\76\3\42"+
    "\6\76\7\42\1\76\13\42\7\76\7\42\1\135\2\76"+
    "\1\42\4\76\1\123\5\76\1\164\5\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\13\42"+
    "\7\76\7\42\1\135\2\76\1\42\4\76\1\123\5\76"+
    "\6\42\2\76\1\42\1\253\2\42\2\76\4\42\3\76"+
    "\3\42\6\76\7\42\1\76\13\42\7\76\7\42\1\135"+
    "\2\76\1\42\4\76\1\123\5\76\6\42\2\76\4\42"+
    "\2\76\4\42\3\76\3\42\6\76\7\42\1\76\6\42"+
    "\1\253\4\42\7\76\7\42\1\135\2\76\1\42\4\76"+
    "\1\123\5\76\6\42\2\76\1\42\1\243\2\42\2\76"+
    "\4\42\3\76\3\42\6\76\7\42\1\76\13\42\7\76"+
    "\7\42\1\135\2\76\1\42\4\76\1\123\5\76\6\42"+
    "\2\76\4\42\2\76\4\42\3\76\3\42\6\76\7\42"+
    "\1\76\13\42\7\76\1\253\6\42\1\135\2\76\1\42"+
    "\2\76";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15169];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\62\1\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\11\1\1\1\11\5\1\2\11\51\1\4\0"+
    "\1\1\2\0\1\1\3\0\14\1\1\0\2\11\4\0"+
    "\1\1\1\0\26\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\3\0\17\1\3\11\25\1\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private Stack<Integer> stateStack = new Stack<Integer>();

private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

private void handleIndent() {
    lastIndentSpaces = indentSpaces;
    indentSpaces = 0;
    pushState(INDENTER);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 2: 
            { return NimTypes.OP8;
            } 
            // fall through
          case 59: break;
          case 3: 
            { return NimTypes.OP0;
            } 
            // fall through
          case 60: break;
          case 4: 
            { return NimTypes.OPR;
            } 
            // fall through
          case 61: break;
          case 5: 
            { return NimTypes.OP9;
            } 
            // fall through
          case 62: break;
          case 6: 
            { return NimTypes.OP2;
            } 
            // fall through
          case 63: break;
          case 7: 
            { return NimTypes.IDENT;
            } 
            // fall through
          case 64: break;
          case 8: 
            { return NimTypes.OP5;
            } 
            // fall through
          case 65: break;
          case 9: 
            { return NimTypes.OP7;
            } 
            // fall through
          case 66: break;
          case 10: 
            { return NimTypes.OP10;
            } 
            // fall through
          case 67: break;
          case 11: 
            { return NimTypes.INT_LIT;
            } 
            // fall through
          case 68: break;
          case 12: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 69: break;
          case 13: 
            { return NimTypes.BRACKET;
            } 
            // fall through
          case 70: break;
          case 14: 
            { handleIndent();
            } 
            // fall through
          case 71: break;
          case 15: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 16: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 73: break;
          case 17: 
            { return NimTypes.PARENTHESIS;
            } 
            // fall through
          case 74: break;
          case 18: 
            { return NimTypes.C_SEMICOLON;
            } 
            // fall through
          case 75: break;
          case 19: 
            { return NimTypes.C_COMMA;
            } 
            // fall through
          case 76: break;
          case 20: 
            { return NimTypes.C_GRAVE_ACCENT;
            } 
            // fall through
          case 77: break;
          case 21: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 78: break;
          case 22: 
            { yypushback(1);
        popState();

        if (indentSpaces == lastIndentSpaces) {
            return NimTypes.IND_EQ;
        } else if (indentSpaces > lastIndentSpaces) {
            return NimTypes.IND_GT;
        } else {
            return NimTypes.IND_LT;
        }
            } 
            // fall through
          case 79: break;
          case 23: 
            { indentSpaces = 0;
            } 
            // fall through
          case 80: break;
          case 24: 
            { indentSpaces++;
            } 
            // fall through
          case 81: break;
          case 25: 
            { popState(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 82: break;
          case 26: 
            { 
            } 
            // fall through
          case 83: break;
          case 27: 
            { popState(); return NimTypes.STR_LIT;
            } 
            // fall through
          case 84: break;
          case 28: 
            { popState(); return NimTypes.RSTR_LIT;
            } 
            // fall through
          case 85: break;
          case 29: 
            { popState(); return NimTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 86: break;
          case 30: 
            { popState(); return NimTypes.CHAR_LIT;
            } 
            // fall through
          case 87: break;
          case 31: 
            { return NimTypes.OP1;
            } 
            // fall through
          case 88: break;
          case 32: 
            { return NimTypes.OP3;
            } 
            // fall through
          case 89: break;
          case 33: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 90: break;
          case 34: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 91: break;
          case 35: 
            { return NimTypes.KEYW;
            } 
            // fall through
          case 92: break;
          case 36: 
            { return NimTypes.OP6;
            } 
            // fall through
          case 93: break;
          case 37: 
            { return NimTypes.UINT_LIT;
            } 
            // fall through
          case 94: break;
          case 38: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 95: break;
          case 39: 
            { if (popState() == 0) return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 96: break;
          case 40: 
            { return NimTypes.OP4;
            } 
            // fall through
          case 97: break;
          case 41: 
            { return NimTypes.NIL;
            } 
            // fall through
          case 98: break;
          case 42: 
            { return NimTypes.INT8_LIT;
            } 
            // fall through
          case 99: break;
          case 43: 
            { return NimTypes.FLOAT_LIT;
            } 
            // fall through
          case 100: break;
          case 44: 
            { return NimTypes.UINT8_LIT;
            } 
            // fall through
          case 101: break;
          case 45: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 102: break;
          case 46: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 103: break;
          case 47: 
            { popState(); return NimTypes.TRIPLESTR_LIT;
            } 
            // fall through
          case 104: break;
          case 48: 
            { popState(); return NimTypes.GENERALIZED_TRIPLESTR_LIT;
            } 
            // fall through
          case 105: break;
          case 49: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 106: break;
          case 50: 
            { return NimTypes.INT16_LIT;
            } 
            // fall through
          case 107: break;
          case 51: 
            { return NimTypes.INT64_LIT;
            } 
            // fall through
          case 108: break;
          case 52: 
            { return NimTypes.INT32_LIT;
            } 
            // fall through
          case 109: break;
          case 53: 
            { return NimTypes.FLOAT64_LIT;
            } 
            // fall through
          case 110: break;
          case 54: 
            { return NimTypes.FLOAT32_LIT;
            } 
            // fall through
          case 111: break;
          case 55: 
            { return NimTypes.UINT16_LIT;
            } 
            // fall through
          case 112: break;
          case 56: 
            { return NimTypes.UINT64_LIT;
            } 
            // fall through
          case 113: break;
          case 57: 
            { return NimTypes.UINT32_LIT;
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
