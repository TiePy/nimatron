/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.psi.NimElementTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int DEDENTER = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC_COMMENT = 8;
  public static final int DISCARD_COMMENT = 10;
  public static final int STRING_LITERAL = 12;
  public static final int TRIPLE_STRING_LITERAL = 14;
  public static final int RAW_STRING_LITERAL = 16;
  public static final int GENERALIZED_STRING_LITERAL = 18;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 20;
  public static final int CHARACTER_LITERAL = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\51\1\47\1\114\1\115\1\50\22\0\1\117\1\22\1\120\1\44\1\36\1\35\1\30"+
    "\1\61\1\77\1\101\1\6\1\5\1\103\1\1\1\27\1\7\1\55\1\54\1\66\1\65\1\67\1\53"+
    "\1\64\1\53\1\63\1\41\1\11\1\102\1\21\1\4\1\2\1\12\1\10\1\52\1\60\1\52\1\75"+
    "\1\73\1\74\2\42\1\62\13\42\1\71\2\42\1\56\2\42\1\45\1\121\1\46\1\37\1\43\1"+
    "\104\1\16\1\57\1\105\1\20\1\72\1\26\1\112\1\33\1\23\1\111\1\106\1\34\1\32"+
    "\1\17\1\13\1\107\1\42\1\14\1\25\1\24\1\70\1\31\1\113\1\15\1\110\1\42\1\76"+
    "\1\40\1\100\1\3\1\0\5\42\1\116\172\42\250\0\2\114\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\6\13\1\14\1\4\4\13\1\4"+
    "\1\15\4\13\1\16\1\17\1\20\1\4\1\21\1\22"+
    "\2\23\2\24\1\25\1\21\1\13\1\26\2\13\1\23"+
    "\1\27\1\30\1\31\1\32\1\33\4\13\1\34\1\35"+
    "\2\36\1\37\1\40\7\41\1\1\1\42\2\41\1\42"+
    "\1\43\1\41\1\44\1\41\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\2\13\1\57"+
    "\2\13\1\60\3\13\1\56\4\13\1\61\1\62\1\56"+
    "\1\13\1\56\13\13\1\63\3\13\1\21\1\0\1\21"+
    "\2\0\1\21\1\0\2\22\1\64\7\0\14\13\1\0"+
    "\1\64\1\65\5\0\1\13\1\0\2\13\1\56\23\13"+
    "\3\0\1\21\1\0\1\21\1\66\3\21\11\13\1\67"+
    "\1\66\1\43\1\13\1\70\7\13\1\21\5\13\1\0"+
    "\24\13\1\56\1\13\3\0\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u0668\0\u0668\0\u06ba"+
    "\0\u070c\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0668\0\u0ae4\0\u0b36\0\u0b88"+
    "\0\u0bda\0\u0668\0\u0668\0\u0668\0\u0668\0\u0c2c\0\u0c7e\0\u0cd0"+
    "\0\u03d8\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\u03d8\0\u0ebc"+
    "\0\u0f0e\0\u0f60\0\u0f60\0\u03d8\0\u03d8\0\u03d8\0\u03d8\0\u0fb2"+
    "\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u03d8\0\u03d8\0\u114c\0\u03d8"+
    "\0\u03d8\0\u03d8\0\u119e\0\u11f0\0\u1242\0\u1294\0\u12e6\0\u1338"+
    "\0\u138a\0\u03d8\0\u13dc\0\u142e\0\u1480\0\u1480\0\u14d2\0\u03d8"+
    "\0\u1524\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668"+
    "\0\u0668\0\u0668\0\u0b88\0\u1576\0\u15c8\0\u161a\0\u166c\0\u16be"+
    "\0\u161a\0\u1710\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc"+
    "\0\u194e\0\u0668\0\u0668\0\u19a0\0\u19f2\0\u1a44\0\u1a96\0\u1ae8"+
    "\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1d78"+
    "\0\u1dca\0\u0668\0\u1e1c\0\u1e6e\0\u1ec0\0\u03d8\0\u1f12\0\u1f64"+
    "\0\u1fb6\0\u2008\0\u1f12\0\u205a\0\u20ac\0\u20fe\0\u20ac\0\u2150"+
    "\0\u21a2\0\u21f4\0\u0d22\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e"+
    "\0\u23e0\0\u2432\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e"+
    "\0\u2670\0\u26c2\0\u2714\0\u03d8\0\u03d8\0\u2766\0\u11f0\0\u27b8"+
    "\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u2a48"+
    "\0\u2a9a\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u2cd8"+
    "\0\u2d2a\0\u2d7c\0\u2dce\0\u1806\0\u2e20\0\u2e72\0\u2ec4\0\u2f16"+
    "\0\u29f6\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102\0\u3154"+
    "\0\u20ac\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392"+
    "\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u03d8\0\u03d8\0\u03d8"+
    "\0\u357e\0\u03d8\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a"+
    "\0\u37bc\0\u0b88\0\u380e\0\u3860\0\u38b2\0\u3904\0\u3956\0\u39a8"+
    "\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38"+
    "\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\u3e76\0\u3ec8"+
    "\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\u4106\0\u4158"+
    "\0\u41aa\0\u03d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\50\1\15\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\50\2\56\1\65\1\50\1\66\1\50"+
    "\1\67\1\50\5\56\1\70\1\50\1\71\3\50\1\72"+
    "\1\73\1\61\1\74\1\75\1\76\1\77\1\100\1\50"+
    "\1\101\1\102\2\50\1\103\1\0\1\64\1\50\1\64"+
    "\1\104\1\55\47\105\1\106\1\107\43\105\3\0\1\110"+
    "\2\105\47\111\2\0\43\111\3\0\3\111\44\112\1\113"+
    "\1\112\1\114\1\112\1\115\43\112\3\0\47\112\1\116"+
    "\1\112\1\117\1\112\1\115\43\112\3\0\53\112\1\115"+
    "\43\112\3\0\1\112\1\120\50\112\1\15\1\121\43\112"+
    "\3\0\1\112\1\122\1\123\50\112\1\115\43\112\3\0"+
    "\1\112\1\124\50\112\1\15\1\121\43\112\3\0\1\112"+
    "\1\125\50\112\1\15\1\121\43\112\3\0\1\112\1\126"+
    "\51\112\1\115\43\112\3\0\1\112\1\127\50\112\1\15"+
    "\1\121\10\112\1\130\32\112\3\0\2\112\1\131\123\0"+
    "\1\55\1\132\1\55\1\133\6\55\6\0\2\55\4\0"+
    "\2\55\4\0\4\55\60\0\1\55\1\0\3\55\1\134"+
    "\6\55\6\0\2\55\4\0\2\55\4\0\4\55\60\0"+
    "\1\55\1\0\1\55\1\135\10\55\6\0\2\55\4\0"+
    "\2\55\4\0\4\55\60\0\1\55\1\0\1\55\1\136"+
    "\1\55\1\137\6\55\6\0\2\55\4\0\2\55\4\0"+
    "\4\55\60\0\1\55\1\0\3\55\1\140\6\55\6\0"+
    "\2\55\4\0\2\55\4\0\4\55\60\0\1\55\1\0"+
    "\3\55\1\141\6\55\6\0\2\55\4\0\2\55\4\0"+
    "\4\55\60\0\1\55\1\0\5\55\1\142\4\55\6\0"+
    "\2\55\4\0\2\55\4\0\4\55\60\0\1\55\1\0"+
    "\12\55\6\0\2\55\4\0\2\55\4\0\4\55\60\0"+
    "\1\55\13\0\1\50\1\143\4\50\2\0\3\50\1\143"+
    "\2\0\4\50\4\0\3\50\6\0\5\50\1\144\1\50"+
    "\1\0\6\50\1\145\5\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\3\50\1\147\2\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\10\50"+
    "\1\150\3\50\7\0\7\50\2\0\1\50\1\0\1\151"+
    "\14\0\1\152\5\50\2\0\4\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\4\50\1\153\1\154\2\0"+
    "\2\50\1\155\1\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\1\156\5\50\2\0\1\157\3\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\1\143\5\50"+
    "\2\0\1\160\3\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\10\50\1\161\3\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\2\0\3\55\1\162\6\55\6\0"+
    "\2\55\4\0\2\55\4\0\4\55\60\0\1\55\1\0"+
    "\3\55\1\163\6\55\6\0\2\55\4\0\2\55\4\0"+
    "\4\55\60\0\1\55\13\0\4\50\1\164\1\50\2\0"+
    "\1\50\1\165\1\166\1\143\2\0\1\50\1\167\2\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\1\50\1\170\4\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\6\50\1\171\1\50\1\172\3\50\7\0\3\50"+
    "\1\173\3\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\1\50\1\174\2\50\2\0\2\50\1\175\1\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\1\152\1\176\1\50"+
    "\1\177\2\50\2\0\1\200\3\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\6\50\1\201\5\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\2\0\12\55\6\0"+
    "\2\55\4\0\1\202\1\55\4\0\4\55\5\0\1\61"+
    "\31\0\2\61\17\0\1\55\13\0\3\50\1\152\2\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\1\153\2\50\1\203\2\50\2\0\1\204\3\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\10\50"+
    "\1\205\3\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\10\50\1\145\3\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\21\0\1\206"+
    "\2\0\1\207\2\0\1\210\1\211\11\0\1\56\1\0"+
    "\1\56\7\0\3\56\3\0\1\212\1\207\5\56\2\213"+
    "\2\214\1\210\1\206\24\0\44\215\1\216\1\217\1\215"+
    "\1\220\1\221\43\215\3\0\3\215\11\0\1\61\15\0"+
    "\1\61\136\0\1\222\2\0\3\223\43\0\1\223\1\0"+
    "\1\223\46\0\1\222\2\0\1\62\2\223\43\0\1\223"+
    "\1\0\1\223\46\0\1\215\2\0\2\223\1\64\43\0"+
    "\1\64\1\0\1\64\15\0\1\224\1\0\1\225\2\0"+
    "\1\206\2\0\1\207\2\0\1\210\1\211\11\0\1\56"+
    "\1\0\1\56\7\0\3\56\1\225\2\226\1\212\1\207"+
    "\5\56\2\213\2\214\1\210\1\206\37\0\1\50\1\227"+
    "\4\50\2\0\1\230\3\50\2\0\3\50\1\231\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\2\50\1\232"+
    "\1\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\2\50\1\233\1\50\1\234\1\50\2\0\4\50\2\0"+
    "\3\50\1\235\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\30\0\1\61"+
    "\105\0\1\236\2\50\1\237\2\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\1\50\1\240"+
    "\4\50\2\0\1\50\1\152\2\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\1\241\3\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\4\50\2\0\2\50\1\242\1\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\121\0\1\243\50\0\1\106\117\0\1\244"+
    "\120\0\1\245\124\0\1\112\116\0\1\246\121\0\1\247"+
    "\175\0\1\250\50\0\1\15\172\0\2\112\120\0\1\251"+
    "\121\0\1\112\121\0\1\252\62\0\1\112\37\0\1\112"+
    "\13\0\6\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\4\50\1\253\2\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\1\50"+
    "\1\143\2\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\121\0\1\254\14\0\6\50\2\0\1\255\3\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\6\50\2\0"+
    "\1\50\1\256\1\50\1\143\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\1\50\1\143\4\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\5\50"+
    "\1\143\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\5\50\1\152\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\4\50"+
    "\2\0\1\50\1\143\2\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\1\50\1\257\2\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\4\50"+
    "\2\0\3\50\1\143\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\2\50\1\260\1\50\2\0\1\143\3\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\3\50"+
    "\1\261\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\1\50\1\262\2\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\1\263\6\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\10\50"+
    "\1\264\3\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\4\50\1\265\1\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\2\50\1\266\4\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\6\50\1\267\5\50\7\0\3\50"+
    "\1\143\3\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\2\50\1\270\4\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\4\50\2\0\1\50"+
    "\1\271\2\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\2\50\1\272\4\50\2\0\1\50"+
    "\1\0\1\146\14\0\3\50\1\273\2\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\1\50"+
    "\1\143\4\50\2\0\4\50\2\0\3\50\1\143\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\1\274\5\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\4\50\2\0\3\50\1\275\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\4\50\1\276\1\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\4\50\1\277"+
    "\1\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\6\50\2\0\4\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\1\300\6\50"+
    "\2\0\1\50\1\0\1\146\14\0\2\50\1\301\3\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\1\50\1\302\2\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\55\0\1\303\6\0\1\206"+
    "\1\304\1\305\120\0\1\304\1\305\75\0\1\306\11\0"+
    "\3\306\5\0\5\306\52\0\1\206\2\0\1\207\2\0"+
    "\1\210\33\0\1\207\5\0\2\213\2\0\1\210\1\206"+
    "\25\0\1\307\3\0\1\307\33\0\1\310\11\0\3\310"+
    "\5\0\5\310\32\0\47\215\1\220\1\221\43\215\3\0"+
    "\50\215\1\311\1\215\1\220\1\221\43\215\3\0\3\215"+
    "\44\0\1\215\2\0\2\223\1\220\43\0\1\220\1\0"+
    "\1\220\46\0\1\215\2\0\1\220\1\223\1\220\43\0"+
    "\1\220\1\0\1\220\2\0\47\222\1\220\1\221\43\222"+
    "\3\0\3\222\53\0\3\312\6\0\4\312\50\0\1\313"+
    "\1\0\1\313\5\0\1\313\12\0\1\313\10\0\4\313"+
    "\1\0\2\313\2\0\5\313\2\0\4\313\7\0\1\313"+
    "\70\0\2\314\57\0\6\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\10\50\1\315\3\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\4\50"+
    "\1\153\1\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\1\316\5\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\6\50\2\0"+
    "\1\317\3\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\1\320\1\50\1\266"+
    "\4\50\2\0\1\50\1\0\1\146\14\0\5\50\1\143"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\6\50\1\274\5\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\1\321\1\50\1\272"+
    "\1\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\4\50\1\322\1\50\2\0\4\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\2\50\1\323"+
    "\1\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\1\277\5\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\10\50\1\324\3\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\1\270\3\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\10\50\1\325\3\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\121\0\1\326\46\0\1\327\174\0"+
    "\1\245\121\0\1\122\121\0\1\330\14\0\6\50\2\0"+
    "\4\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\10\50\1\331\3\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\121\0\1\332\14\0\6\50\2\0\2\50\1\272"+
    "\1\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\6\50\1\333\5\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\1\325\3\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\1\50\1\334\2\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\1\335\6\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\10\50\1\152"+
    "\3\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\10\50\1\336\3\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\4\50\2\0"+
    "\3\50\1\337\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\1\50"+
    "\1\340\4\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\1\145\5\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\1\341\5\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\10\50\1\342\3\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\4\50"+
    "\2\0\3\50\1\272\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\2\50\1\343\4\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\10\50\1\143"+
    "\3\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\1\50\1\344\2\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\2\50\1\267"+
    "\1\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\3\50\1\345\2\50\2\0\4\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\1\143\6\50\2\0\1\50\1\0\1\146\14\0\1\50"+
    "\1\346\4\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\4\50\2\0\2\50"+
    "\1\347\1\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\65\0\1\206"+
    "\124\0\1\206\120\0\1\206\53\0\1\206\5\0\1\210"+
    "\12\0\1\306\1\0\1\306\7\0\3\306\3\0\1\350"+
    "\1\0\5\306\2\0\2\214\1\210\1\206\65\0\1\310"+
    "\11\0\3\310\5\0\5\310\52\0\1\206\5\0\1\210"+
    "\12\0\1\310\1\0\1\310\7\0\3\310\3\0\1\350"+
    "\1\0\5\310\4\0\1\210\1\206\44\0\1\206\2\0"+
    "\1\207\2\0\1\210\14\0\1\312\7\0\3\312\3\0"+
    "\1\212\1\207\1\0\4\312\2\213\2\0\1\210\1\206"+
    "\42\0\1\313\1\0\1\313\2\0\1\207\2\0\1\313"+
    "\12\0\1\313\1\0\1\313\6\0\4\313\1\0\2\313"+
    "\1\212\1\207\5\313\2\213\4\313\7\0\1\313\34\0"+
    "\1\206\2\0\1\207\2\0\1\210\14\0\1\314\10\0"+
    "\2\314\3\0\1\212\1\207\5\0\2\213\2\0\1\210"+
    "\1\206\37\0\3\50\1\351\2\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\6\50\2\0"+
    "\4\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\1\351\6\50\2\0\1\50\1\0\1\146"+
    "\14\0\4\50\1\352\1\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\10\50"+
    "\1\353\3\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\3\50\1\143\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\1\50\1\354"+
    "\1\145\1\50\2\0\1\355\3\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\1\320\6\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\1\50\1\143\2\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\10\50"+
    "\1\143\3\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\4\50\2\0\3\50\1\153\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\4\50\1\143\1\50\2\0"+
    "\4\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\1\145\6\50\2\0\1\50"+
    "\1\0\1\146\14\0\1\50\1\325\4\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\1\356\3\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\3\50\1\357\2\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\1\50\1\360"+
    "\4\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\6\50\2\0\4\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\6\50\1\361\5\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\3\50\1\362"+
    "\2\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\1\50\1\145\4\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\7\50\2\0\1\50\1\0\1\146\14\0\6\50\2\0"+
    "\4\50\2\0\3\50\1\363\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\6\50\2\0\1\277\3\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\4\50\2\0"+
    "\3\50\1\364\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\1\143"+
    "\5\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\1\153\5\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\21\0\1\206\5\0\1\210"+
    "\45\0\1\210\1\206\37\0\6\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\1\50\1\143\5\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\4\50\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\5\50\1\143\1\50\2\0"+
    "\1\50\1\0\1\146\14\0\6\50\2\0\4\50\2\0"+
    "\4\50\4\0\3\50\6\0\7\50\1\0\14\50\7\0"+
    "\2\50\1\145\4\50\2\0\1\50\1\0\1\146\14\0"+
    "\6\50\2\0\1\365\3\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\10\50\1\366\3\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\4\50"+
    "\1\331\1\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\1\50\1\367\4\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\3\50\1\370\2\0\4\50\4\0\3\50\6\0"+
    "\7\50\1\0\14\50\7\0\7\50\2\0\1\50\1\0"+
    "\1\146\14\0\5\50\1\272\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\1\50"+
    "\1\32\2\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\0\1\146"+
    "\14\0\3\50\1\371\2\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\7\50"+
    "\2\0\1\50\1\0\1\146\14\0\6\50\2\0\4\50"+
    "\2\0\3\50\1\372\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\4\50\1\373\1\50\2\0\4\50\2\0\4\50\4\0"+
    "\3\50\6\0\7\50\1\0\14\50\7\0\7\50\2\0"+
    "\1\50\1\0\1\146\14\0\1\50\1\374\4\50\2\0"+
    "\4\50\2\0\4\50\4\0\3\50\6\0\7\50\1\0"+
    "\14\50\7\0\7\50\2\0\1\50\1\0\1\146\14\0"+
    "\5\50\1\375\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\3\50\1\376\2\50\2\0\4\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\1\50\1\272\2\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\4\50\2\0\4\50"+
    "\4\0\3\50\6\0\7\50\1\0\14\50\7\0\3\50"+
    "\1\143\3\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\6\50\1\272\5\50\7\0\7\50\2\0\1\50"+
    "\1\0\1\146\14\0\6\50\2\0\1\50\1\261\2\50"+
    "\2\0\4\50\4\0\3\50\6\0\7\50\1\0\14\50"+
    "\7\0\7\50\2\0\1\50\1\0\1\146\14\0\6\50"+
    "\2\0\4\50\2\0\4\50\4\0\3\50\6\0\7\50"+
    "\1\0\14\50\7\0\7\50\2\0\1\50\1\377\1\146"+
    "\14\0\6\50\2\0\4\50\2\0\4\50\4\0\3\50"+
    "\6\0\7\50\1\0\14\50\7\0\1\272\6\50\2\0"+
    "\1\50\1\0\1\146\121\0\1\u0100\121\0\1\u0101\121\0"+
    "\1\u0102\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\43\1\1\11\5\1\1\11\4\1\4\11"+
    "\5\1\2\11\1\1\3\11\7\1\1\11\5\1\1\11"+
    "\55\1\1\11\1\0\1\1\2\0\1\1\1\0\3\1"+
    "\7\0\14\1\1\0\2\11\5\0\1\1\1\0\26\1"+
    "\3\0\1\1\1\0\16\1\3\11\1\1\1\11\15\1"+
    "\1\0\26\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

// -----------------------------------------------------------------------------
// State stack
// -----------------------------------------------------------------------------

private final Stack<Integer> stateStack = new Stack<Integer>();

/**
 * Pushes new state onto stack and sets parser to begin new state.
 * @param newState New parser state.
 * @return New stack size.
 */
private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

/**
 * Pops previous state from stack.
 * @return Previous state.
 */
private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

// -----------------------------------------------------------------------------
// Indent spaces handler
// -----------------------------------------------------------------------------

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

// NOTE: Indent handler is suspended within parenthesis.
private boolean suspendIndent = false;

/**
 * Records last indent spaces and pushes the INDENTER state onto stack.
 */
private void handleIndent() {
    if (!suspendIndent) {
        lastIndentSpaces = indentSpaces;
        indentSpaces = 0;
        pushState(INDENTER);
    }
}

// -----------------------------------------------------------------------------
// Stack indenter
// -----------------------------------------------------------------------------

/**
 * Stores column number and increment for each indentation level.
 * This is required as it's not certain each indent is same size.
 */
private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();
private final Stack<IElementType> dedentStack = new Stack<IElementType>();

/**
 * This method is used to return multiple tokens by stalling the return state transition.
 * @return Next token to be returned to parser.
 */
private IElementType getIndenterToken() {

    // Return from INDENTER state with indent at same level, when length same.
    if (indentSpaces == lastIndentSpaces) {
        popState();
        return NimElementTypes.IND_EQ;
    }

    // Return from INDENTER state with indent at higher level, when length greater.
    if (indentSpaces > lastIndentSpaces) {

        // Length of last indent on stack, if any.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;

        // Push an entry onto the indenter stack.
        // Note the incremental column positions for indentation.
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimElementTypes.INDENT;
    }

    // Handle dedents.
    // Following is where indentSpaces < lastIndentSpaces.

    // Determine difference with previous indentation level.
    Indent lastIndent = indentStack.pop();
    int diff = lastIndent.Column - indentSpaces;

    dedentStack.push(NimElementTypes.IND_EQ);

    // Add required dedents to stack to be returned.
    while (diff > lastIndent.Increment) {

        // Determine difference with previous indentation level.
        lastIndent = indentStack.pop();
        diff = lastIndent.Column - indentSpaces;

        dedentStack.push(NimElementTypes.DEDENT);
    }

    lastIndentSpaces = lastIndent.Column;

    popState();
    pushState(DEDENTER);
    return NimElementTypes.DEDENT;
}

private IElementType getDedenterToken() {
    IElementType token = dedentStack.pop();
    if (dedentStack.size() == 0) popState();
    return token;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 2: 
            { return NimElementTypes.OP8B;
            } 
            // fall through
          case 59: break;
          case 3: 
            { return NimElementTypes.OP5E;
            } 
            // fall through
          case 60: break;
          case 4: 
            { return NimElementTypes.OPR;
            } 
            // fall through
          case 61: break;
          case 5: 
            { return NimElementTypes.OP8A;
            } 
            // fall through
          case 62: break;
          case 6: 
            { return NimElementTypes.OP9A;
            } 
            // fall through
          case 63: break;
          case 7: 
            { return NimElementTypes.OP9B;
            } 
            // fall through
          case 64: break;
          case 8: 
            { return NimElementTypes.OP2A;
            } 
            // fall through
          case 65: break;
          case 9: 
            { return NimElementTypes.OP2B;
            } 
            // fall through
          case 66: break;
          case 10: 
            { return NimElementTypes.OP2C;
            } 
            // fall through
          case 67: break;
          case 11: 
            { return NimElementTypes.IDENT;
            } 
            // fall through
          case 68: break;
          case 12: 
            { return NimElementTypes.OP5C;
            } 
            // fall through
          case 69: break;
          case 13: 
            { return NimElementTypes.OP7A;
            } 
            // fall through
          case 70: break;
          case 14: 
            { return NimElementTypes.OP9G;
            } 
            // fall through
          case 71: break;
          case 15: 
            { return NimElementTypes.OP10A;
            } 
            // fall through
          case 72: break;
          case 16: 
            { return NimElementTypes.OP10B;
            } 
            // fall through
          case 73: break;
          case 17: 
            { return NimElementTypes.NUM_LIT;
            } 
            // fall through
          case 74: break;
          case 18: 
            { return NimElementTypes.COMMENT;
            } 
            // fall through
          case 75: break;
          case 19: 
            { return NimElementTypes.BRACKET;
            } 
            // fall through
          case 76: break;
          case 20: 
            { handleIndent(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 21: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 78: break;
          case 22: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 79: break;
          case 23: 
            { suspendIndent = true; return NimElementTypes.PARENTHESIS;
            } 
            // fall through
          case 80: break;
          case 24: 
            { suspendIndent = false; return NimElementTypes.PARENTHESIS;
            } 
            // fall through
          case 81: break;
          case 25: 
            { return NimElementTypes.C_SEMICOLON;
            } 
            // fall through
          case 82: break;
          case 26: 
            { return NimElementTypes.C_COMMA;
            } 
            // fall through
          case 83: break;
          case 27: 
            { return NimElementTypes.C_GRAVE_ACCENT;
            } 
            // fall through
          case 84: break;
          case 28: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 85: break;
          case 29: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 86: break;
          case 30: 
            { indentSpaces = 0;
            } 
            // fall through
          case 87: break;
          case 31: 
            { indentSpaces++;
            } 
            // fall through
          case 88: break;
          case 32: 
            { yypushback(1); return getDedenterToken();
            } 
            // fall through
          case 89: break;
          case 33: 
            { 
            } 
            // fall through
          case 90: break;
          case 34: 
            { popState(); return NimElementTypes.STR_LIT;
            } 
            // fall through
          case 91: break;
          case 35: 
            { popState(); return NimElementTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 92: break;
          case 36: 
            { popState(); return NimElementTypes.CHAR_LIT;
            } 
            // fall through
          case 93: break;
          case 37: 
            { return NimElementTypes.OP0A;
            } 
            // fall through
          case 94: break;
          case 38: 
            { return NimElementTypes.OP1C;
            } 
            // fall through
          case 95: break;
          case 39: 
            { return NimElementTypes.OP5D;
            } 
            // fall through
          case 96: break;
          case 40: 
            { return NimElementTypes.OP0B;
            } 
            // fall through
          case 97: break;
          case 41: 
            { return NimElementTypes.OP0C;
            } 
            // fall through
          case 98: break;
          case 42: 
            { return NimElementTypes.OP5A;
            } 
            // fall through
          case 99: break;
          case 43: 
            { return NimElementTypes.OP1A;
            } 
            // fall through
          case 100: break;
          case 44: 
            { return NimElementTypes.OP1B;
            } 
            // fall through
          case 101: break;
          case 45: 
            { return NimElementTypes.OP1D;
            } 
            // fall through
          case 102: break;
          case 46: 
            { return NimElementTypes.KEYW;
            } 
            // fall through
          case 103: break;
          case 47: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 104: break;
          case 48: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 105: break;
          case 49: 
            { return NimElementTypes.OP5B;
            } 
            // fall through
          case 106: break;
          case 50: 
            { return NimElementTypes.OP5F;
            } 
            // fall through
          case 107: break;
          case 51: 
            { return NimElementTypes.OP6A;
            } 
            // fall through
          case 108: break;
          case 52: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 109: break;
          case 53: 
            { if (popState() == 0) return NimElementTypes.COMMENT;
            } 
            // fall through
          case 110: break;
          case 54: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 111: break;
          case 55: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 112: break;
          case 56: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 113: break;
          case 57: 
            { pushState(DISCARD_COMMENT);
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
