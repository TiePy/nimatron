/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.psi.NimElementTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int DEDENTER = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC_COMMENT = 8;
  public static final int DISCARD_COMMENT = 10;
  public static final int STRING_LITERAL = 12;
  public static final int TRIPLE_STRING_LITERAL = 14;
  public static final int RAW_STRING_LITERAL = 16;
  public static final int GENERALIZED_STRING_LITERAL = 18;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 20;
  public static final int CHARACTER_LITERAL = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\12\1\10\1\76\1\77\1\11\22\0\1\101\1\1\1\102\1\5\3\1\1\24\1\55\1\60"+
    "\1\1\1\40\1\62\1\40\1\41\1\1\1\16\1\15\1\32\1\31\1\33\1\14\1\30\1\14\1\27"+
    "\1\2\1\56\1\61\5\1\1\13\1\23\1\13\1\45\1\37\1\43\2\3\1\26\13\3\1\35\2\3\1"+
    "\20\2\3\1\6\1\103\1\7\1\1\1\4\1\63\1\50\1\22\1\65\1\44\1\36\1\42\1\74\1\72"+
    "\1\25\1\73\1\66\1\51\1\64\1\53\1\21\1\67\1\3\1\47\1\52\1\46\1\34\1\70\1\75"+
    "\1\17\1\71\1\3\1\54\1\1\1\57\1\1\1\0\5\3\1\100\172\3\250\0\2\76\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\3\1\4\1\5\2\6\2\7"+
    "\1\10\1\3\3\4\1\11\3\4\1\2\10\4\1\6"+
    "\1\12\1\13\1\14\1\15\1\16\6\4\1\17\1\20"+
    "\2\21\1\22\1\23\7\24\1\1\1\25\2\24\1\25"+
    "\1\26\1\24\1\27\1\24\2\0\1\3\2\0\2\3"+
    "\1\30\2\5\1\31\7\0\3\4\1\32\4\4\2\32"+
    "\21\4\1\33\1\4\1\32\15\4\1\0\1\31\1\34"+
    "\10\0\1\3\1\0\1\3\1\0\1\35\3\3\30\4"+
    "\1\32\7\4\1\36\1\35\1\26\1\0\1\37\14\4"+
    "\1\3\26\4\1\32\3\0\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u0330\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u0330\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4"+
    "\0\u09d4\0\u0330\0\u0330\0\u0330\0\u0330\0\u0a18\0\u0a5c\0\u0aa0"+
    "\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0330\0\u0330\0\u0bf4\0\u0330"+
    "\0\u0330\0\u0330\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0330\0\u0e14\0\u0e58\0\u0e9c\0\u0e9c\0\u0ee0\0\u0330"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u0330"+
    "\0\u10bc\0\u1100\0\u1144\0\u1100\0\u1188\0\u11cc\0\u1210\0\u04c8"+
    "\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u03fc\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u10bc\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u0330"+
    "\0\u0330\0\u1e48\0\u0c7c\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u1100\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u1a4c\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u0330\0\u0330\0\u0330\0\u29f8\0\u0330\0\u2a3c\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u2ce4\0\u2d28\0\u03fc\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c"+
    "\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u0330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\15\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\20\2\17\1\27\1\30\1\20"+
    "\1\31\1\32\1\20\1\33\1\34\1\20\5\17\1\35"+
    "\1\20\1\36\1\20\1\16\1\37\1\40\1\20\1\41"+
    "\1\20\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\16\1\23\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\20\1\60\1\61\1\62\3\20\1\63\1\0"+
    "\1\26\1\20\1\26\1\64\1\16\10\65\1\66\1\67"+
    "\64\65\3\0\1\70\2\65\10\71\2\0\64\71\3\0"+
    "\3\71\5\72\1\73\1\72\1\74\1\72\1\75\64\72"+
    "\3\0\10\72\1\76\1\72\1\77\1\72\1\75\64\72"+
    "\3\0\14\72\1\75\64\72\3\0\1\72\1\100\11\72"+
    "\1\15\1\101\64\72\3\0\1\72\1\102\1\103\11\72"+
    "\1\75\64\72\3\0\1\72\1\104\11\72\1\15\1\101"+
    "\64\72\3\0\1\72\1\105\11\72\1\15\1\101\64\72"+
    "\3\0\1\72\1\106\12\72\1\75\64\72\3\0\1\72"+
    "\1\107\11\72\1\15\1\101\12\72\1\110\51\72\3\0"+
    "\2\72\1\111\105\0\1\16\36\0\2\16\14\0\1\16"+
    "\24\0\1\16\2\0\1\17\1\0\1\17\7\0\3\17"+
    "\5\0\1\112\2\113\5\17\2\114\2\115\1\0\1\116"+
    "\2\117\2\120\40\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\12\20\10\0\12\20\2\0\1\20\1\0\1\121"+
    "\1\0\5\122\1\123\1\124\1\122\1\125\1\126\64\122"+
    "\3\0\3\122\41\0\1\23\14\0\1\23\32\0\1\127"+
    "\2\0\3\130\64\0\1\130\1\0\1\130\7\0\1\127"+
    "\2\0\1\24\2\130\64\0\1\130\1\0\1\130\7\0"+
    "\1\122\2\0\2\130\1\26\64\0\1\26\1\0\1\26"+
    "\4\0\1\17\1\0\1\17\7\0\3\17\2\131\1\132"+
    "\2\133\1\112\2\113\5\17\2\114\2\115\1\0\1\116"+
    "\2\117\2\120\40\0\3\20\6\0\6\20\1\134\2\20"+
    "\1\0\13\20\2\0\12\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\7\20\1\135\1\20"+
    "\1\0\7\20\1\136\3\20\2\0\1\137\4\20\1\137"+
    "\4\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\1\140\12\20\2\0\5\20"+
    "\1\141\1\20\1\142\2\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\1\137\3\20\1\143\3\20\1\144\1\145\10\0"+
    "\1\146\11\20\2\0\1\20\1\0\1\121\3\0\3\20"+
    "\6\0\11\20\1\0\13\20\2\0\10\20\1\147\1\20"+
    "\10\0\12\20\2\0\1\20\1\0\1\121\3\0\3\20"+
    "\6\0\4\20\1\150\4\20\1\0\13\20\2\0\7\20"+
    "\1\151\1\20\1\152\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\2\0\1\16\5\0\1\23\30\0\2\16\14\0"+
    "\1\16\2\23\22\0\1\16\2\0\3\20\6\0\6\20"+
    "\1\134\2\20\1\0\1\153\6\20\1\154\3\20\2\0"+
    "\5\20\1\155\1\156\3\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\6\20\1\137\2\20"+
    "\1\0\1\157\10\20\1\160\1\20\2\0\12\20\10\0"+
    "\12\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\7\20\1\161\1\20\1\162\1\20\2\0"+
    "\5\20\1\163\4\20\10\0\5\20\1\164\4\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\11\20\1\165\1\20\2\0\6\20\1\166\3\20\10\0"+
    "\12\20\2\0\1\20\1\0\1\167\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\2\20\1\170\5\20\1\171"+
    "\1\172\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\11\20\1\136\1\20\2\0"+
    "\12\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\4\20\1\173"+
    "\5\20\10\0\6\20\1\174\3\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\6\20\1\175\2\20\1\0"+
    "\1\176\12\20\2\0\12\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\42\0\1\23\44\0\3\20\6\0\6\20"+
    "\1\172\2\20\1\0\1\177\10\20\1\200\1\20\2\0"+
    "\6\20\1\201\3\20\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\6\20\1\202\2\20\1\0"+
    "\13\20\2\0\6\20\1\203\3\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\4\20\1\134\1\204\4\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\6\20\1\134\3\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\1\205\12\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\12\20\10\0\6\20\1\206\3\20\2\0"+
    "\1\20\1\0\1\121\103\0\1\207\11\0\1\66\101\0"+
    "\1\210\102\0\1\211\106\0\1\72\100\0\1\212\103\0"+
    "\1\213\200\0\1\214\11\0\1\15\175\0\2\72\102\0"+
    "\1\215\103\0\1\72\103\0\1\216\25\0\1\72\56\0"+
    "\1\72\25\0\2\113\5\0\2\114\4\0\2\117\2\120"+
    "\53\0\1\217\11\0\1\120\1\220\1\221\54\0\1\222"+
    "\11\0\3\222\10\0\5\222\4\0\1\223\45\0\1\224"+
    "\11\0\3\224\10\0\5\224\100\0\1\220\1\221\154\0"+
    "\1\225\1\0\10\122\1\125\1\126\64\122\3\0\11\122"+
    "\1\226\1\122\1\125\1\126\64\122\3\0\3\122\5\0"+
    "\1\122\2\0\2\130\1\125\64\0\1\125\1\0\1\125"+
    "\7\0\1\122\2\0\1\125\1\130\1\125\64\0\1\125"+
    "\1\0\1\125\2\0\10\127\1\125\1\126\64\127\3\0"+
    "\3\127\2\0\1\227\10\0\4\227\3\0\2\227\3\0"+
    "\5\227\2\0\2\227\2\0\4\227\2\0\1\227\14\0"+
    "\1\227\32\0\3\230\11\0\4\230\65\0\2\231\67\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\5\20\1\137"+
    "\4\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\12\20\10\0"+
    "\7\20\1\232\2\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\4\20\1\137"+
    "\5\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\11\20\1\172"+
    "\10\0\12\20\2\0\1\20\1\0\1\121\3\0\3\20"+
    "\6\0\11\20\1\0\11\20\1\233\1\20\2\0\12\20"+
    "\10\0\12\20\2\0\1\20\1\0\1\121\3\0\3\20"+
    "\6\0\6\20\1\234\2\20\1\0\13\20\2\0\12\20"+
    "\10\0\12\20\2\0\1\20\1\0\1\121\3\0\3\20"+
    "\6\0\11\20\1\0\11\20\1\235\1\20\2\0\12\20"+
    "\10\0\12\20\2\0\1\20\1\0\1\121\3\0\3\20"+
    "\6\0\11\20\1\0\13\20\2\0\11\20\1\236\10\0"+
    "\12\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\4\20\1\237\5\20\10\0"+
    "\1\20\1\240\10\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\12\20\10\0"+
    "\3\20\1\241\6\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\1\242\12\20\2\0\12\20"+
    "\10\0\12\20\2\0\1\20\1\0\1\121\3\0\3\20"+
    "\6\0\11\20\1\0\13\20\2\0\12\20\10\0\1\20"+
    "\1\243\1\20\1\241\6\20\2\0\1\20\1\0\1\121"+
    "\3\0\3\20\6\0\11\20\1\0\1\244\12\20\2\0"+
    "\10\20\1\245\1\20\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\7\20\1\246"+
    "\3\20\2\0\2\20\1\137\7\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\11\20\1\247\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\11\20\1\250\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\6\20\1\246\2\20\1\0"+
    "\13\20\2\0\12\20\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\13\20\2\0"+
    "\7\20\1\251\2\20\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\13\20\2\0"+
    "\10\20\1\252\1\20\10\0\4\20\1\137\5\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\1\253\11\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\12\20\10\0\3\20\1\254\6\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\12\20\10\0\1\255\11\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\7\20\1\256"+
    "\3\20\2\0\12\20\10\0\5\20\1\137\4\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\12\20\10\0\3\20\1\245\6\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\1\137\3\20\1\257\5\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\1\260\12\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\2\20\1\134\7\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\12\20\10\0\1\137\11\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\2\20\1\137\7\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\6\20\1\261\3\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\5\20\1\137\1\20\1\137\2\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\4\20\1\262\5\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\7\20\1\137\2\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\4\20"+
    "\1\263\4\20\1\0\13\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\4\20\1\264\5\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\12\20\10\0\1\20\1\265\10\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\11\20\1\266\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\10\20\1\267\1\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\6\20\1\250"+
    "\2\20\1\0\13\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\11\20\1\270\1\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\1\254\10\20\1\271\1\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\103\0\1\272\7\0\1\273"+
    "\177\0\1\211\103\0\1\102\103\0\1\274\31\0\1\120"+
    "\106\0\1\120\102\0\1\120\53\0\1\222\1\0\1\222"+
    "\7\0\3\222\5\0\1\275\2\0\5\222\6\0\2\117"+
    "\2\120\40\0\1\222\11\0\3\222\10\0\5\222\52\0"+
    "\1\224\1\0\1\224\7\0\3\224\5\0\1\275\2\0"+
    "\5\224\2\0\2\115\2\0\2\117\2\120\140\0\1\276"+
    "\3\0\1\227\1\0\1\227\6\0\4\227\3\0\2\227"+
    "\1\112\2\113\5\227\2\114\2\227\2\0\4\227\2\0"+
    "\1\227\14\0\1\227\22\0\1\230\7\0\3\230\5\0"+
    "\1\112\2\113\1\0\4\230\2\114\4\0\2\117\2\120"+
    "\42\0\1\231\10\0\2\231\5\0\1\112\2\113\5\0"+
    "\2\114\4\0\2\117\2\120\40\0\3\20\6\0\11\20"+
    "\1\0\11\20\1\277\1\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\6\20\1\300\3\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\12\20\10\0\1\20\1\300\10\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\5\20\1\301\4\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\6\20"+
    "\1\136\2\20\1\0\13\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\11\20\1\302\1\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\7\20\1\303\2\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\6\20"+
    "\1\304\2\20\1\0\13\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\11\20\1\305\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\11\20\1\306\1\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\1\137\11\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\11\20"+
    "\1\137\1\20\2\0\12\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\6\20\1\307\3\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\12\20\10\0\1\20\1\137\10\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\10\20\1\256\1\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\4\20\1\310\5\20\10\0\1\20\1\311\10\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\11\20\1\134\1\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\7\20\1\245\2\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\12\20\10\0\3\20\1\312\6\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\11\20\1\313\1\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\7\20\1\314\3\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\10\20\1\245\1\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\4\20\1\315\5\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\1\271\12\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\12\20\10\0\6\20\1\316\3\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\5\20\1\317\4\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\4\20\1\320\3\20\1\136\1\20\10\0"+
    "\1\20\1\243\2\20\1\321\5\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\11\20\1\137"+
    "\1\20\2\0\4\20\1\137\5\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\7\20\1\172\2\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\13\20\2\0\11\20\1\137\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\43\0\2\117\2\120\40\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\12\20\10\0\1\20\1\136"+
    "\10\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\12\20\10\0\2\20\1\137"+
    "\7\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\6\20\1\322\3\20\10\0"+
    "\12\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\5\20\1\323\4\20\10\0"+
    "\12\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\7\20\1\324\3\20\2\0\12\20\10\0"+
    "\12\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\5\20\1\136\4\20\10\0"+
    "\12\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\12\20\10\0\10\20\1\137"+
    "\1\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\12\20\10\0\3\20\1\136"+
    "\6\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\13\20\2\0\7\20\1\325\2\20\10\0"+
    "\12\20\2\0\1\20\1\0\1\121\3\0\3\20\6\0"+
    "\11\20\1\0\1\326\12\20\2\0\12\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\6\20\1\327\3\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\7\20\1\330\2\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\13\20\2\0\5\20\1\271\4\20\10\0\12\20"+
    "\2\0\1\20\1\0\1\121\3\0\3\20\6\0\11\20"+
    "\1\0\1\250\12\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\6\20\1\172"+
    "\2\20\1\0\13\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\6\20\1\137"+
    "\2\20\1\0\13\20\2\0\12\20\10\0\12\20\2\0"+
    "\1\20\1\0\1\121\3\0\3\20\6\0\11\20\1\0"+
    "\1\331\12\20\2\0\12\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\11\20"+
    "\1\332\1\20\2\0\12\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\4\20\1\30\5\20\10\0\12\20\2\0\1\20"+
    "\1\0\1\121\3\0\3\20\6\0\11\20\1\0\13\20"+
    "\2\0\1\333\11\20\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\13\20\2\0"+
    "\2\20\1\245\7\20\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\13\20\2\0"+
    "\7\20\1\334\2\20\10\0\12\20\2\0\1\20\1\0"+
    "\1\121\3\0\3\20\6\0\11\20\1\0\13\20\2\0"+
    "\11\20\1\277\10\0\12\20\2\0\1\20\1\0\1\121"+
    "\3\0\3\20\6\0\11\20\1\0\13\20\2\0\5\20"+
    "\1\335\4\20\10\0\12\20\2\0\1\20\1\0\1\121"+
    "\3\0\3\20\6\0\11\20\1\0\13\20\2\0\6\20"+
    "\1\336\3\20\10\0\12\20\2\0\1\20\1\0\1\121"+
    "\3\0\3\20\6\0\11\20\1\0\13\20\2\0\11\20"+
    "\1\337\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\5\20\1\340"+
    "\4\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\6\20\1\341"+
    "\3\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\12\20\10\0"+
    "\5\20\1\137\4\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\2\20\1\342"+
    "\7\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\4\20\1\245"+
    "\5\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\7\20\1\245\3\20\2\0"+
    "\12\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\4\20\1\253"+
    "\5\20\10\0\12\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\12\20\10\0"+
    "\1\20\1\245\10\20\2\0\1\20\1\0\1\121\3\0"+
    "\3\20\6\0\11\20\1\0\13\20\2\0\12\20\10\0"+
    "\12\20\2\0\1\20\1\343\1\121\103\0\1\344\103\0"+
    "\1\345\103\0\1\346\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\5\1\1\11\7\1\1\11\16\1\4\11"+
    "\7\1\2\11\1\1\3\11\7\1\1\11\5\1\1\11"+
    "\1\1\2\0\1\1\2\0\1\1\1\11\4\1\7\0"+
    "\53\1\1\0\2\11\10\0\1\1\1\0\1\1\1\0"+
    "\44\1\3\11\1\0\1\11\44\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

// -----------------------------------------------------------------------------
// State stack
// -----------------------------------------------------------------------------

private final Stack<Integer> stateStack = new Stack<Integer>();

/**
 * Pushes new state onto stack and sets parser to begin new state.
 * @param newState New parser state.
 * @return New stack size.
 */
private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

/**
 * Pops previous state from stack.
 * @return Previous state.
 */
private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

// -----------------------------------------------------------------------------
// Indent spaces handler
// -----------------------------------------------------------------------------

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

// NOTE: Indent handler is suspended within parenthesis.
private boolean suspendIndent = false;

/**
 * Records last indent spaces and pushes the INDENTER state onto stack.
 */
private void handleIndent() {
    if (!suspendIndent) {
        lastIndentSpaces = indentSpaces;
        indentSpaces = 0;
        pushState(INDENTER);
    }
}

// -----------------------------------------------------------------------------
// Stack indenter
// -----------------------------------------------------------------------------

/**
 * Stores column number and increment for each indentation level.
 * This is required as it's not certain each indent is same size.
 */
private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();
private final Stack<IElementType> dedentStack = new Stack<IElementType>();

/**
 * This method is used to return multiple tokens by stalling the return state transition.
 * @return Next token to be returned to parser.
 */
private IElementType getIndenterToken() {

    // Return from INDENTER state with indent at same level, when length same.
    if (indentSpaces == lastIndentSpaces) {
        popState();
        return NimElementTypes.IND_EQ;
    }

    // Return from INDENTER state with indent at higher level, when length greater.
    if (indentSpaces > lastIndentSpaces) {

        // Length of last indent on stack, if any.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;

        // Push an entry onto the indenter stack.
        // Note the incremental column positions for indentation.
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimElementTypes.INDENT;
    }

    // Handle dedents.
    // Following is where indentSpaces < lastIndentSpaces.

    // Determine difference with previous indentation level.
    Indent lastIndent = indentStack.pop();
    int diff = lastIndent.Column - indentSpaces;

    dedentStack.push(NimElementTypes.IND_EQ);

    // Add required dedents to stack to be returned.
    while (diff > lastIndent.Increment) {

        // Determine difference with previous indentation level.
        lastIndent = indentStack.pop();
        diff = lastIndent.Column - indentSpaces;

        dedentStack.push(NimElementTypes.DEDENT);
    }

    lastIndentSpaces = lastIndent.Column;

    popState();
    pushState(DEDENTER);
    return NimElementTypes.DEDENT;
}

private IElementType getDedenterToken() {
    IElementType token = dedentStack.pop();
    if (dedentStack.size() == 0) popState();
    return token;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 33: break;
          case 2: 
            { return NimElementTypes.OPR;
            } 
            // fall through
          case 34: break;
          case 3: 
            { return NimElementTypes.NUM_LIT;
            } 
            // fall through
          case 35: break;
          case 4: 
            { return NimElementTypes.IDENT;
            } 
            // fall through
          case 36: break;
          case 5: 
            { return NimElementTypes.COMMENT;
            } 
            // fall through
          case 37: break;
          case 6: 
            { return NimElementTypes.BRACKET;
            } 
            // fall through
          case 38: break;
          case 7: 
            { handleIndent(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 39: break;
          case 8: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 9: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 41: break;
          case 10: 
            { suspendIndent = true; return NimElementTypes.PARENTHESIS;
            } 
            // fall through
          case 42: break;
          case 11: 
            { suspendIndent = false; return NimElementTypes.PARENTHESIS;
            } 
            // fall through
          case 43: break;
          case 12: 
            { return NimElementTypes.C_SEMICOLON;
            } 
            // fall through
          case 44: break;
          case 13: 
            { return NimElementTypes.C_COMMA;
            } 
            // fall through
          case 45: break;
          case 14: 
            { return NimElementTypes.C_GRAVE_ACCENT;
            } 
            // fall through
          case 46: break;
          case 15: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 47: break;
          case 16: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 48: break;
          case 17: 
            { indentSpaces = 0;
            } 
            // fall through
          case 49: break;
          case 18: 
            { indentSpaces++;
            } 
            // fall through
          case 50: break;
          case 19: 
            { yypushback(1); return getDedenterToken();
            } 
            // fall through
          case 51: break;
          case 20: 
            { 
            } 
            // fall through
          case 52: break;
          case 21: 
            { popState(); return NimElementTypes.STR_LIT;
            } 
            // fall through
          case 53: break;
          case 22: 
            { popState(); return NimElementTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 54: break;
          case 23: 
            { popState(); return NimElementTypes.CHAR_LIT;
            } 
            // fall through
          case 55: break;
          case 24: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 56: break;
          case 25: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 57: break;
          case 26: 
            { return NimElementTypes.KEYW;
            } 
            // fall through
          case 58: break;
          case 27: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 59: break;
          case 28: 
            { if (popState() == 0) return NimElementTypes.COMMENT;
            } 
            // fall through
          case 60: break;
          case 29: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 61: break;
          case 30: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 62: break;
          case 31: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 63: break;
          case 32: 
            { pushState(DISCARD_COMMENT);
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
