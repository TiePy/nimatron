/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.psi.NimElementTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int DEDENTER = 4;
  public static final int LINE_COMMENT = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int BLOCK_DOC_COMMENT = 10;
  public static final int DISCARD_COMMENT = 12;
  public static final int STRING_LITERAL = 14;
  public static final int TRIPLE_STRING_LITERAL = 16;
  public static final int RAW_STRING_LITERAL = 18;
  public static final int GENERALIZED_STRING_LITERAL = 20;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 22;
  public static final int CHARACTER_LITERAL = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\50\1\46\1\112\1\113\1\47\22\0\1\110\1\21\1\111\1\43\1\35\1\34\1\27"+
    "\1\60\1\74\1\75\1\5\1\4\1\77\1\1\1\26\1\6\1\54\1\53\1\65\1\64\1\66\1\52\1"+
    "\63\1\52\1\62\1\40\1\10\1\76\1\20\1\3\1\2\1\11\1\7\1\51\1\57\2\51\1\72\1\73"+
    "\2\41\1\61\13\41\1\70\2\41\1\55\2\41\1\44\1\115\1\45\1\36\1\42\1\100\1\15"+
    "\1\56\1\101\1\17\1\71\1\25\1\106\1\32\1\22\1\105\1\102\1\33\1\31\1\16\1\12"+
    "\1\103\1\41\1\13\1\24\1\23\1\67\1\30\1\107\1\14\1\104\1\41\1\74\1\37\1\75"+
    "\1\37\1\0\5\41\1\114\172\41\250\0\2\112\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\6\13\1\14\1\4\4\13\1\4"+
    "\1\15\4\13\1\16\1\17\1\20\1\4\1\21\1\22"+
    "\2\23\2\24\1\25\1\21\1\13\1\26\2\13\1\23"+
    "\1\27\1\30\1\31\4\13\1\32\1\0\1\33\2\34"+
    "\1\35\1\36\1\37\7\40\2\1\1\41\2\40\1\42"+
    "\1\43\1\40\1\44\1\3\1\45\1\46\1\4\1\47"+
    "\1\3\1\50\1\51\1\52\1\53\1\54\1\55\2\13"+
    "\1\56\2\13\1\57\3\13\1\60\2\13\1\61\2\13"+
    "\1\62\1\63\1\64\1\13\1\65\14\13\1\66\4\13"+
    "\4\0\1\67\2\0\1\70\3\0\14\13\1\0\1\70"+
    "\1\71\5\0\1\13\1\0\2\13\1\72\1\73\1\74"+
    "\1\75\1\13\1\76\13\13\1\77\1\100\4\13\1\101"+
    "\3\13\1\0\1\102\4\0\1\103\1\0\1\104\3\0"+
    "\1\103\1\105\3\21\12\13\1\106\1\105\1\107\1\110"+
    "\1\13\1\111\11\13\1\112\5\13\1\113\1\114\1\115"+
    "\1\116\1\117\1\0\1\120\1\121\1\122\5\13\1\123"+
    "\5\13\1\124\13\13\1\61\1\13\3\0\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0618\0\u0618\0\u0666"+
    "\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0618\0\u0a5c\0\u0aaa\0\u0af8"+
    "\0\u0b46\0\u0618\0\u0618\0\u0618\0\u0618\0\u0b94\0\u0be2\0\u0c30"+
    "\0\u03f6\0\u03f6\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u03f6\0\u0db6"+
    "\0\u0e04\0\u0e52\0\u03f6\0\u03f6\0\u03f6\0\u0ea0\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\u0fd8\0\u03f6\0\u1026\0\u1026\0\u1074\0\u1026\0\u1026"+
    "\0\352\0\u1026\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248"+
    "\0\u1026\0\u1296\0\u1026\0\u12e4\0\u1332\0\u12e4\0\u12e4\0\u1380"+
    "\0\u1026\0\u1026\0\u13ce\0\u0618\0\u13ce\0\u13ce\0\u13ce\0\u0618"+
    "\0\u0618\0\u0618\0\u0618\0\u0af8\0\u0af8\0\u141c\0\u146a\0\u14b8"+
    "\0\u1506\0\u1554\0\u14b8\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da"+
    "\0\u1728\0\u0af8\0\u1776\0\u17c4\0\u0618\0\u0618\0\u1812\0\u1860"+
    "\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u1ad0"+
    "\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u0618\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62"+
    "\0\u1fb0\0\u03f6\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184"+
    "\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4"+
    "\0\u2442\0\u2490\0\u1026\0\u1026\0\u24de\0\u1110\0\u252c\0\u257a"+
    "\0\u25c8\0\u2616\0\u2664\0\u26b2\0\u2700\0\u0af8\0\u0af8\0\u274e"+
    "\0\u0af8\0\u279c\0\u0af8\0\u27ea\0\u2838\0\u2886\0\u28d4\0\u2922"+
    "\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6\0\u0af8\0\u0af8"+
    "\0\u168c\0\u2b44\0\u2b92\0\u2be0\0\u0af8\0\u2c2e\0\u2c7c\0\u2cca"+
    "\0\u2d18\0\u03f6\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec"+
    "\0\u03f6\0\u2f3a\0\u2f88\0\u2fd6\0\u3024\0\u03f6\0\u3072\0\u30c0"+
    "\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u3330"+
    "\0\u337e\0\u33cc\0\u341a\0\u03f6\0\u1026\0\u1026\0\u1026\0\u3468"+
    "\0\u03f6\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a"+
    "\0\u36d8\0\u3726\0\u0af8\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac"+
    "\0\u03f6\0\u03f6\0\u03f6\0\u03f6\0\u03f6\0\u38fa\0\u03f6\0\u03f6"+
    "\0\u03f6\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u0af8\0\u3ace"+
    "\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06\0\u0af8\0\u3c54\0\u3ca2\0\u3cf0"+
    "\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60"+
    "\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u03f6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\50\1\16\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\50\2\56\1\65\1\50\1\66\1\50\1\67"+
    "\1\50\5\56\1\70\1\50\1\71\2\50\1\72\1\61"+
    "\1\73\1\74\1\75\1\76\1\50\1\77\1\100\2\50"+
    "\1\101\1\64\1\102\1\103\1\64\1\50\1\55\46\104"+
    "\1\105\1\106\40\104\1\107\1\104\3\0\1\104\46\110"+
    "\2\0\42\110\3\0\1\110\46\111\2\0\42\111\3\0"+
    "\1\111\43\112\1\113\1\112\1\114\1\112\1\115\42\112"+
    "\3\0\44\112\1\116\1\112\1\117\1\112\1\115\42\112"+
    "\3\0\50\112\1\115\41\112\1\120\3\0\47\112\1\121"+
    "\1\122\41\112\1\123\3\0\1\124\47\112\1\115\41\112"+
    "\1\125\3\0\47\112\1\121\1\122\41\112\1\126\3\0"+
    "\47\112\1\121\1\122\41\112\1\127\3\0\50\112\1\115"+
    "\41\112\1\130\3\0\47\112\1\121\1\122\10\112\1\131"+
    "\31\112\3\0\1\112\2\103\1\132\114\103\1\55\1\133"+
    "\1\134\6\55\6\103\2\55\4\103\2\55\4\103\4\55"+
    "\55\103\1\55\1\0\2\135\1\136\6\135\6\0\2\135"+
    "\4\0\2\135\4\0\4\135\55\0\1\135\1\103\1\55"+
    "\1\137\1\140\6\55\6\103\2\55\4\103\2\55\4\103"+
    "\4\55\55\103\1\55\1\103\1\55\1\137\1\141\6\55"+
    "\6\103\2\55\4\103\2\55\4\103\4\55\55\103\1\55"+
    "\1\103\1\55\1\137\1\142\6\55\6\103\2\55\4\103"+
    "\2\55\4\103\4\55\55\103\1\55\1\103\1\55\1\137"+
    "\2\55\1\143\4\55\6\103\2\55\4\103\2\55\4\103"+
    "\4\55\55\103\1\55\1\103\1\55\1\137\7\55\6\103"+
    "\2\55\4\103\2\55\4\103\4\55\55\103\1\55\2\103"+
    "\1\132\7\103\1\50\1\144\4\50\2\103\3\50\1\145"+
    "\2\103\4\50\4\103\3\50\6\103\5\50\1\146\1\50"+
    "\1\103\6\50\1\147\4\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\3\50\1\151\2\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\10\50\1\152\2\50\5\103\7\50\1\103\1\153"+
    "\2\103\1\50\3\103\1\132\7\103\1\154\5\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\4\50\1\155\1\156\2\103\2\50\1\157"+
    "\1\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\1\160\5\50\2\103\1\161\3\50\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\1\162\5\50\2\103\1\163\3\50\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\10\50\1\164\2\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\2\103\1\55\1\137"+
    "\1\165\6\55\6\103\2\55\4\103\2\55\4\103\4\55"+
    "\55\103\1\55\1\103\1\55\1\137\1\166\6\55\6\103"+
    "\2\55\4\103\2\55\4\103\4\55\55\103\1\55\2\103"+
    "\1\132\7\103\4\50\1\167\1\50\2\103\1\50\1\170"+
    "\1\171\1\162\2\103\1\50\1\172\2\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\1\50\1\173\4\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\6\50\1\174\1\50\1\175\2\50\5\103\3\50"+
    "\1\176\3\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\1\50\1\177\2\50\2\103\2\50"+
    "\1\200\1\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\1\201\1\202\1\50\1\203\2\50\2\103\1\204"+
    "\3\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\6\50\1\205\4\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\2\103\1\55\1\137\7\55\6\103\2\55\4\103"+
    "\1\206\1\55\4\103\4\55\5\103\1\61\27\103\1\61"+
    "\17\103\1\55\2\103\1\132\7\103\3\50\1\201\2\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\1\207\2\50\1\210\2\50\2\103"+
    "\1\211\3\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\10\50\1\212\2\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\10\50\1\147\2\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\17\103\1\213"+
    "\2\103\1\214\1\215\11\103\1\56\1\103\1\56\7\103"+
    "\3\56\3\103\1\216\1\213\5\56\2\217\2\220\1\214"+
    "\24\103\1\132\40\103\1\221\1\222\53\103\1\132\5\103"+
    "\1\61\15\103\1\61\71\103\1\132\43\103\1\62\51\103"+
    "\1\132\45\103\1\64\37\103\1\64\2\103\1\64\4\103"+
    "\1\132\7\103\1\223\1\103\1\224\5\103\1\213\2\103"+
    "\1\214\1\215\11\103\1\56\1\103\1\56\7\103\3\56"+
    "\1\224\2\225\1\216\1\213\5\56\2\217\2\220\1\214"+
    "\24\103\1\132\7\103\1\50\1\226\4\50\2\103\1\227"+
    "\3\50\2\103\3\50\1\230\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\2\50\1\231\1\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\2\50\1\232\1\50\1\233\1\50\2\103\4\50"+
    "\2\103\3\50\1\234\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\23\103\1\61\71\103\1\132\7\103\1\235\2\50"+
    "\1\236\2\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\1\50\1\237\4\50"+
    "\2\103\1\50\1\201\2\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\1\240"+
    "\3\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\4\50\2\103\2\50\1\241"+
    "\1\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\106\103"+
    "\1\242\4\103\164\0\1\105\113\0\1\243\114\0\1\244"+
    "\120\0\1\112\112\0\1\245\115\0\1\246\163\0\1\247"+
    "\52\0\1\121\160\0\1\112\115\0\1\250\115\0\1\251"+
    "\5\0\11\135\6\0\2\135\4\0\2\135\4\0\4\135"+
    "\55\0\1\135\2\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\4\50\1\252\2\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\1\50\1\162\2\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\106\103\1\253\6\103\1\132\7\103\6\50\2\103\1\254"+
    "\3\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\1\50\1\255\1\50\1\162"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\1\50\1\256\4\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\5\50"+
    "\1\257\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\5\50\1\201\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\1\50\1\162\2\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\1\50\1\260\2\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\3\50\1\261\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\2\50\1\262\1\50\2\103"+
    "\1\263\3\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\3\50\1\264\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\7\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\6\50\2\103"+
    "\1\50\1\265\2\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\1\266\6\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\10\50"+
    "\1\267\2\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\4\50\1\270\1\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\2\50\1\271\4\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\6\50\1\272\4\50\5\103\3\50\1\162\3\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\2\50\1\273\4\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\1\50\1\274\2\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\2\50"+
    "\1\275\4\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\3\50\1\276\2\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\1\50"+
    "\1\277\4\50\2\103\4\50\2\103\3\50\1\300\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\7\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\1\50\1\162"+
    "\4\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\1\301\5\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\3\50\1\302\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\7\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\4\50\1\303"+
    "\1\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\4\50\1\304\1\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\5\50\1\305\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\1\306\6\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\2\50\1\307\3\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\1\50\1\310\2\50\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\50\103"+
    "\1\311\6\103\1\312\1\313\1\314\33\103\1\132\60\103"+
    "\1\315\1\316\33\103\1\132\35\103\1\317\11\103\3\317"+
    "\5\103\5\317\31\103\1\132\17\103\1\213\2\103\1\214"+
    "\33\103\1\213\5\103\2\217\2\103\1\214\24\103\1\132"+
    "\50\103\1\320\6\103\1\321\1\322\1\323\32\103\1\324"+
    "\1\132\1\103\1\324\33\103\1\325\11\103\3\325\5\103"+
    "\5\325\31\103\1\132\41\103\1\326\53\103\1\132\47\103"+
    "\3\327\6\103\4\327\31\103\1\132\12\103\1\330\1\103"+
    "\1\330\5\103\1\330\12\103\1\330\10\103\4\330\1\103"+
    "\2\330\2\103\5\330\2\103\3\330\5\103\1\330\16\103"+
    "\1\132\50\103\2\331\43\103\1\132\7\103\6\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\10\50\1\332\2\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\4\50\1\333\1\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\1\334\5\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\1\335\3\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\6\50\2\103\4\50\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\1\336\1\50\1\271\4\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\5\50\1\162\2\103\4\50\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\6\50\1\301"+
    "\4\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\1\337\1\50\1\275\1\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\4\50\1\340\1\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\2\50\1\341\1\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\1\304\5\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\4\50\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\10\50\1\342\2\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\6\50\2\103\1\273\3\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\10\50\1\343\2\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\106\103\1\344"+
    "\4\103\44\0\1\345\162\0\1\244\115\0\1\346\115\0"+
    "\1\347\4\0\2\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\10\50"+
    "\1\350\2\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\106\103\1\351\6\103\1\132\7\103\6\50"+
    "\2\103\2\50\1\275\1\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\6\50"+
    "\1\352\4\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\1\353\3\50\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\6\50\2\103\1\50\1\354\2\50\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\1\355\6\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\10\50\1\201\2\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\10\50"+
    "\1\356\2\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\4\50\2\103\3\50"+
    "\1\357\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\1\50\1\360\4\50\2\103\4\50\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\7\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\1\361\5\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\1\362\5\50\2\103\4\50\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\6\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\10\50\1\363\2\50\5\103\7\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\6\50\2\103"+
    "\4\50\2\103\3\50\1\275\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\2\50"+
    "\1\364\4\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\10\50\1\162\2\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\1\50\1\365\2\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\2\50"+
    "\1\272\1\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\3\50\1\366\2\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\1\162\6\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\1\50\1\367"+
    "\4\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\6\50\2\103\1\343\3\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\2\50\1\370\1\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\60\103\1\371"+
    "\34\103\1\132\63\103\1\372\31\103\1\132\62\103\1\373"+
    "\32\103\1\132\63\103\1\374\31\103\1\132\62\103\1\375"+
    "\32\103\1\132\22\103\1\214\12\103\1\317\1\103\1\317"+
    "\7\103\3\317\3\103\1\376\1\103\5\317\2\103\2\220"+
    "\1\214\24\103\1\132\60\103\1\377\34\103\1\132\63\103"+
    "\1\u0100\31\103\1\132\62\103\1\u0101\32\103\1\132\35\103"+
    "\1\325\11\103\3\325\5\103\5\325\31\103\1\132\22\103"+
    "\1\214\12\103\1\325\1\103\1\325\7\103\3\325\3\103"+
    "\1\376\1\103\5\325\4\103\1\214\24\103\1\132\17\103"+
    "\1\213\2\103\1\214\14\103\1\327\7\103\3\327\3\103"+
    "\1\216\1\213\1\103\4\327\2\217\2\103\1\214\24\103"+
    "\1\132\12\103\1\330\1\103\1\330\2\103\1\213\2\103"+
    "\1\330\12\103\1\330\1\103\1\330\6\103\4\330\1\103"+
    "\2\330\1\216\1\213\5\330\2\217\3\330\5\103\1\330"+
    "\16\103\1\132\17\103\1\213\2\103\1\214\14\103\1\331"+
    "\10\103\2\331\3\103\1\216\1\213\5\103\2\217\2\103"+
    "\1\214\24\103\1\132\7\103\3\50\1\u0102\2\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\5\50\1\162\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\1\u0102\6\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\4\50\1\u0103\1\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\4\50\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\10\50\1\u0104\2\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\6\50\2\103\3\50\1\162\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\1\50"+
    "\1\u0105\1\147\1\50\2\103\1\u0106\3\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\1\336\6\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\6\50\2\103"+
    "\1\50\1\162\2\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\10\50\1\162\2\50\5\103\7\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\6\50\2\103"+
    "\4\50\2\103\3\50\1\333\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\4\50\1\162\1\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\1\147\6\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\1\50\1\343"+
    "\4\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\4\50\1\u0107\1\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\1\u0108\3\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\3\50"+
    "\1\u0109\2\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\1\50\1\u010a\4\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\6\50\1\u010b\4\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\3\50\1\u010c\2\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\6\50"+
    "\2\103\1\50\1\u010d\2\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\1\50\1\147\4\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\4\50\2\103\3\50"+
    "\1\u010e\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\6\50\2\103\1\304\3\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\4\50"+
    "\2\103\3\50\1\u010f\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\1\162\5\50\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\1\333"+
    "\5\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\22\103\1\214\45\103\1\214\24\103"+
    "\1\132\7\103\6\50\2\103\4\50\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\1\50\1\162"+
    "\5\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\6\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\5\50\1\162\1\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\6\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\2\50\1\147\4\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\6\50\2\103\1\u0110\3\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\10\50\1\u0111\2\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\4\50"+
    "\1\350\1\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\1\50\1\u0112\4\50"+
    "\2\103\4\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\6\50\2\103\3\50\1\u0113\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\5\50\1\275\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\6\50\2\103\1\50"+
    "\1\u0114\2\50\2\103\4\50\4\103\3\50\6\103\7\50"+
    "\1\103\13\50\5\103\7\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\7\103\3\50\1\u0115\2\50\2\103\4\50"+
    "\2\103\4\50\4\103\3\50\6\103\7\50\1\103\13\50"+
    "\5\103\7\50\1\103\1\150\2\103\1\50\3\103\1\132"+
    "\7\103\6\50\2\103\4\50\2\103\3\50\1\u0116\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\7\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\4\50\1\u0117"+
    "\1\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\1\50\1\u0118\4\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\5\50\1\u0119\2\103\4\50\2\103\4\50"+
    "\4\103\3\50\6\103\7\50\1\103\13\50\5\103\7\50"+
    "\1\103\1\150\2\103\1\50\3\103\1\132\7\103\3\50"+
    "\1\u011a\2\50\2\103\4\50\2\103\4\50\4\103\3\50"+
    "\6\103\7\50\1\103\13\50\5\103\7\50\1\103\1\150"+
    "\2\103\1\50\3\103\1\132\7\103\1\201\5\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\1\50\1\275\2\50\2\103"+
    "\4\50\4\103\3\50\6\103\7\50\1\103\13\50\5\103"+
    "\7\50\1\103\1\150\2\103\1\50\3\103\1\132\7\103"+
    "\6\50\2\103\4\50\2\103\4\50\4\103\3\50\6\103"+
    "\7\50\1\103\13\50\5\103\3\50\1\162\3\50\1\103"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\6\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\6\50\1\275\4\50\5\103\7\50\1\103\1\150\2\103"+
    "\1\50\3\103\1\132\7\103\6\50\2\103\1\50\1\264"+
    "\2\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\7\50\1\103\1\150\2\103\1\50\3\103"+
    "\1\132\7\103\6\50\2\103\4\50\2\103\4\50\4\103"+
    "\3\50\6\103\7\50\1\103\13\50\5\103\7\50\1\u011b"+
    "\1\150\2\103\1\50\3\103\1\132\7\103\6\50\2\103"+
    "\4\50\2\103\4\50\4\103\3\50\6\103\7\50\1\103"+
    "\13\50\5\103\1\275\6\50\1\103\1\150\2\103\1\50"+
    "\3\103\1\132\106\103\1\u011c\6\103\1\132\106\103\1\u011d"+
    "\6\103\1\132\106\103\1\u011e\4\103";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16692];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\65\1\1\0\2\11\1\1\2\11\1\1\1\11"+
    "\6\1\1\11\1\1\1\11\5\1\2\11\60\1\4\0"+
    "\1\1\2\0\1\1\3\0\14\1\1\0\2\11\5\0"+
    "\1\1\1\0\35\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\3\0\20\1\3\11\26\1\1\0\34\1\3\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

// -----------------------------------------------------------------------------
// State stack
// -----------------------------------------------------------------------------

private final Stack<Integer> stateStack = new Stack<Integer>();

/**
 * Pushes new state onto stack and sets parser to begin new state.
 * @param newState New parser state.
 * @return New stack size.
 */
private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

/**
 * Pops previous state from stack.
 * @return Previous state.
 */
private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

// -----------------------------------------------------------------------------
// Indent spaces handler
// -----------------------------------------------------------------------------

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

/**
 * Records last indent spaces and pushes the INDENTER state onto stack.
 */
private void handleIndent() {
    lastIndentSpaces = indentSpaces;
    indentSpaces = 0;
    pushState(INDENTER);
}

// -----------------------------------------------------------------------------
// Stack indenter
// -----------------------------------------------------------------------------

/**
 * Stores column number and increment for each indentation level.
 * This is required as it's not certain each indent is same size.
 */
private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();
private final Stack<IElementType> dedentStack = new Stack<IElementType>();

/**
 * This method is used to return multiple tokens by stalling the return state transition.
 * @return Next token to be returned to parser.
 */
private IElementType getIndenterToken() {

    // Return from INDENTER state with indent at same level, when length same.
    if (indentSpaces == lastIndentSpaces) {
        popState();
        return NimElementTypes.IND_EQ;
    }

    // Return from INDENTER state with indent at higher level, when length greater.
    if (indentSpaces > lastIndentSpaces) {

        // Length of last indent on stack, if any.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;

        // Push an entry onto the indenter stack.
        // Note the incremental column positions for indentation.
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimElementTypes.INDENT;
    }

    // Handle dedents.
    // Following is where indentSpaces < lastIndentSpaces.

    // Determine difference with previous indentation level.
    Indent lastIndent = indentStack.pop();
    int diff = lastIndent.Column - indentSpaces;

    // Handle error case where dedent is smaller than last indent.
    if (diff < lastIndent.Increment) {
        return TokenType.BAD_CHARACTER;
    }

    dedentStack.push(NimElementTypes.IND_EQ);

    // Add required dedents to stack to be returned.
    while (diff > lastIndent.Increment) {

        // Determine difference with previous indentation level.
        lastIndent = indentStack.pop();
        diff = lastIndent.Column - indentSpaces;

        // Handle error case where dedent is smaller than last indent.
        if (diff < lastIndent.Increment) {
            return TokenType.BAD_CHARACTER;
        }

        dedentStack.push(NimElementTypes.DEDENT);
    }

    lastIndentSpaces = lastIndent.Column;

    popState();
    pushState(DEDENTER);
    return NimElementTypes.DEDENT;
}

private IElementType getDedenterToken() {
    IElementType token = dedentStack.pop();
    if (dedentStack.size() == 0) popState();
    return token;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 86: break;
          case 2: 
            { return NimElementTypes.OP8B;
            } 
            // fall through
          case 87: break;
          case 3: 
            { return NimElementTypes.OP0B;
            } 
            // fall through
          case 88: break;
          case 4: 
            { return NimElementTypes.OPR;
            } 
            // fall through
          case 89: break;
          case 5: 
            { return NimElementTypes.OP8A;
            } 
            // fall through
          case 90: break;
          case 6: 
            { return NimElementTypes.OP9A;
            } 
            // fall through
          case 91: break;
          case 7: 
            { return NimElementTypes.OP9B;
            } 
            // fall through
          case 92: break;
          case 8: 
            { return NimElementTypes.OP2A;
            } 
            // fall through
          case 93: break;
          case 9: 
            { return NimElementTypes.OP2B;
            } 
            // fall through
          case 94: break;
          case 10: 
            { return NimElementTypes.OP2C;
            } 
            // fall through
          case 95: break;
          case 11: 
            { return NimElementTypes.IDENT;
            } 
            // fall through
          case 96: break;
          case 12: 
            { return NimElementTypes.OP5C;
            } 
            // fall through
          case 97: break;
          case 13: 
            { return NimElementTypes.OP7A;
            } 
            // fall through
          case 98: break;
          case 14: 
            { return NimElementTypes.OP9G;
            } 
            // fall through
          case 99: break;
          case 15: 
            { return NimElementTypes.OP10A;
            } 
            // fall through
          case 100: break;
          case 16: 
            { return NimElementTypes.OP10B;
            } 
            // fall through
          case 101: break;
          case 17: 
            { return NimElementTypes.INT_LIT;
            } 
            // fall through
          case 102: break;
          case 18: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 103: break;
          case 19: 
            { return NimElementTypes.BRACKET;
            } 
            // fall through
          case 104: break;
          case 20: 
            { handleIndent();
            } 
            // fall through
          case 105: break;
          case 21: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 106: break;
          case 22: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 107: break;
          case 23: 
            { return NimElementTypes.C_SEMICOLON;
            } 
            // fall through
          case 108: break;
          case 24: 
            { return NimElementTypes.C_COMMA;
            } 
            // fall through
          case 109: break;
          case 25: 
            { return NimElementTypes.C_GRAVE_ACCENT;
            } 
            // fall through
          case 110: break;
          case 26: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 111: break;
          case 27: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 112: break;
          case 28: 
            { indentSpaces = 0;
            } 
            // fall through
          case 113: break;
          case 29: 
            { indentSpaces++;
            } 
            // fall through
          case 114: break;
          case 30: 
            { yypushback(1); return getDedenterToken();
            } 
            // fall through
          case 115: break;
          case 31: 
            { popState(); return NimElementTypes.COMMENT;
            } 
            // fall through
          case 116: break;
          case 32: 
            { 
            } 
            // fall through
          case 117: break;
          case 33: 
            { popState(); return NimElementTypes.STR_LIT;
            } 
            // fall through
          case 118: break;
          case 34: 
            { popState(); return NimElementTypes.RSTR_LIT;
            } 
            // fall through
          case 119: break;
          case 35: 
            { popState(); return NimElementTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 120: break;
          case 36: 
            { popState(); return NimElementTypes.CHAR_LIT;
            } 
            // fall through
          case 121: break;
          case 37: 
            { return NimElementTypes.OP0A;
            } 
            // fall through
          case 122: break;
          case 38: 
            { return NimElementTypes.OP1C;
            } 
            // fall through
          case 123: break;
          case 39: 
            { return NimElementTypes.OP5D;
            } 
            // fall through
          case 124: break;
          case 40: 
            { return NimElementTypes.OP5A;
            } 
            // fall through
          case 125: break;
          case 41: 
            { return NimElementTypes.OP1A;
            } 
            // fall through
          case 126: break;
          case 42: 
            { return NimElementTypes.OP1B;
            } 
            // fall through
          case 127: break;
          case 43: 
            { return NimElementTypes.OP1D;
            } 
            // fall through
          case 128: break;
          case 44: 
            { return NimElementTypes.OP3A;
            } 
            // fall through
          case 129: break;
          case 45: 
            { return NimElementTypes.OP5L;
            } 
            // fall through
          case 130: break;
          case 46: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 131: break;
          case 47: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 132: break;
          case 48: 
            { return NimElementTypes.OP5M;
            } 
            // fall through
          case 133: break;
          case 49: 
            { return NimElementTypes.KEYW;
            } 
            // fall through
          case 134: break;
          case 50: 
            { return NimElementTypes.OP5B;
            } 
            // fall through
          case 135: break;
          case 51: 
            { return NimElementTypes.OP5F;
            } 
            // fall through
          case 136: break;
          case 52: 
            { return NimElementTypes.OP5G;
            } 
            // fall through
          case 137: break;
          case 53: 
            { return NimElementTypes.OP5I;
            } 
            // fall through
          case 138: break;
          case 54: 
            { return NimElementTypes.OP6A;
            } 
            // fall through
          case 139: break;
          case 55: 
            { return NimElementTypes.UINT_LIT;
            } 
            // fall through
          case 140: break;
          case 56: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 141: break;
          case 57: 
            { if (popState() == 0) return NimElementTypes.COMMENT;
            } 
            // fall through
          case 142: break;
          case 58: 
            { return NimElementTypes.OP3B;
            } 
            // fall through
          case 143: break;
          case 59: 
            { return NimElementTypes.OP4A;
            } 
            // fall through
          case 144: break;
          case 60: 
            { return NimElementTypes.OP5K;
            } 
            // fall through
          case 145: break;
          case 61: 
            { return NimElementTypes.NIL;
            } 
            // fall through
          case 146: break;
          case 62: 
            { return NimElementTypes.OP9C;
            } 
            // fall through
          case 147: break;
          case 63: 
            { return NimElementTypes.OP9F;
            } 
            // fall through
          case 148: break;
          case 64: 
            { return NimElementTypes.OP9E;
            } 
            // fall through
          case 149: break;
          case 65: 
            { return NimElementTypes.OP9D;
            } 
            // fall through
          case 150: break;
          case 66: 
            { return NimElementTypes.INT8_LIT;
            } 
            // fall through
          case 151: break;
          case 67: 
            { return NimElementTypes.FLOAT_LIT;
            } 
            // fall through
          case 152: break;
          case 68: 
            { return NimElementTypes.UINT8_LIT;
            } 
            // fall through
          case 153: break;
          case 69: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 154: break;
          case 70: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 155: break;
          case 71: 
            { popState(); return NimElementTypes.TRIPLESTR_LIT;
            } 
            // fall through
          case 156: break;
          case 72: 
            { popState(); return NimElementTypes.GENERALIZED_TRIPLESTR_LIT;
            } 
            // fall through
          case 157: break;
          case 73: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 158: break;
          case 74: 
            { return NimElementTypes.BOOL_LIT;
            } 
            // fall through
          case 159: break;
          case 75: 
            { return NimElementTypes.INT16_LIT;
            } 
            // fall through
          case 160: break;
          case 76: 
            { return NimElementTypes.INT64_LIT;
            } 
            // fall through
          case 161: break;
          case 77: 
            { return NimElementTypes.INT32_LIT;
            } 
            // fall through
          case 162: break;
          case 78: 
            { return NimElementTypes.FLOAT64_LIT;
            } 
            // fall through
          case 163: break;
          case 79: 
            { return NimElementTypes.FLOAT32_LIT;
            } 
            // fall through
          case 164: break;
          case 80: 
            { return NimElementTypes.UINT16_LIT;
            } 
            // fall through
          case 165: break;
          case 81: 
            { return NimElementTypes.UINT64_LIT;
            } 
            // fall through
          case 166: break;
          case 82: 
            { return NimElementTypes.UINT32_LIT;
            } 
            // fall through
          case 167: break;
          case 83: 
            { return NimElementTypes.OP5H;
            } 
            // fall through
          case 168: break;
          case 84: 
            { return NimElementTypes.OP5J;
            } 
            // fall through
          case 169: break;
          case 85: 
            { pushState(DISCARD_COMMENT);
            } 
            // fall through
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
