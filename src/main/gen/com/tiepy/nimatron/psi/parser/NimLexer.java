/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.psi.NimElementType;import com.tiepy.nimatron.psi.NimElementTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int DEDENTER = 4;
  public static final int OPERATOR = 6;
  public static final int LINE_COMMENT = 8;
  public static final int BLOCK_COMMENT = 10;
  public static final int BLOCK_DOC_COMMENT = 12;
  public static final int DISCARD_COMMENT = 14;
  public static final int STRING_LITERAL = 16;
  public static final int TRIPLE_STRING_LITERAL = 18;
  public static final int RAW_STRING_LITERAL = 20;
  public static final int GENERALIZED_STRING_LITERAL = 22;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 24;
  public static final int CHARACTER_LITERAL = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\34\1\33\1\115\1\116\1\32\22\0\1\113\1\16\1\114\1\27\1\11\1\14\1\13"+
    "\1\46\1\74\1\76\1\4\1\2\1\77\1\3\1\21\1\5\1\40\1\37\1\54\1\53\1\55\1\36\1"+
    "\52\1\36\1\51\1\24\1\22\1\77\1\6\1\1\1\7\1\17\1\10\1\35\1\45\1\35\1\65\1\61"+
    "\1\63\2\25\1\50\13\25\1\57\2\25\1\42\2\25\1\30\1\23\1\31\1\20\1\26\1\77\1"+
    "\70\1\44\1\102\1\64\1\60\1\62\1\111\1\107\1\47\1\110\1\103\1\71\1\101\1\100"+
    "\1\43\1\104\1\25\1\67\1\72\1\66\1\56\1\105\1\112\1\41\1\106\1\25\1\73\1\15"+
    "\1\75\1\12\1\0\5\25\1\117\172\25\250\0\2\115\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\2\2\1\3\1\4\1\5\2\6\2\7"+
    "\1\10\1\3\3\4\1\11\12\4\1\6\1\12\1\13"+
    "\7\4\1\14\1\15\2\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\21\1\45\2\46\7\45\1\47\1\45"+
    "\1\47\1\50\2\45\1\51\3\0\1\3\1\0\2\3"+
    "\1\52\1\0\1\53\3\0\3\4\1\54\4\4\2\54"+
    "\21\4\1\55\1\4\1\54\15\4\2\0\1\56\2\0"+
    "\1\57\1\60\4\0\1\3\4\0\1\3\1\0\1\61"+
    "\3\3\30\4\1\54\7\4\1\62\2\63\1\50\1\0"+
    "\1\64\14\4\1\65\6\4\1\66\20\4\1\54\3\0"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u0460"+
    "\0\u04b0\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0460\0\u0640\0\u0460"+
    "\0\u0690\0\u06e0\0\u0730\0\u0780\0\u07d0\0\u0460\0\u0820\0\u0870"+
    "\0\u08c0\0\u0910\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0"+
    "\0\u0b40\0\u0b40\0\u0460\0\u0b90\0\u0be0\0\u0c30\0\u0c80\0\u0cd0"+
    "\0\u0d20\0\u0d70\0\u0dc0\0\u0460\0\u0e10\0\u0460\0\u0460\0\u0460"+
    "\0\u0460\0\u0460\0\u0460\0\u0460\0\u0e60\0\u0460\0\u0460\0\u0460"+
    "\0\u0460\0\u0460\0\u0460\0\u0460\0\u0460\0\u0460\0\u0460\0\u0460"+
    "\0\u0460\0\u0460\0\u0460\0\u0460\0\u0eb0\0\u0f00\0\u0f50\0\u0fa0"+
    "\0\u0460\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u1130\0\u1180\0\u0460"+
    "\0\u11d0\0\u1220\0\u1220\0\u1270\0\u12c0\0\u0460\0\u1310\0\u1360"+
    "\0\u13b0\0\u13b0\0\u1400\0\u1450\0\u0460\0\u14a0\0\u14f0\0\u0460"+
    "\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u0550\0\u1720"+
    "\0\u1770\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900\0\u1950\0\u19a0"+
    "\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20"+
    "\0\u1c70\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u14a0\0\u1e50"+
    "\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0"+
    "\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350"+
    "\0\u0460\0\u23a0\0\u0fa0\0\u0fa0\0\u0460\0\u1040\0\u23f0\0\u2440"+
    "\0\u2490\0\u24e0\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0"+
    "\0\u0460\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0"+
    "\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70"+
    "\0\u1ea0\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0"+
    "\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f30\0\u2f80\0\u2fd0"+
    "\0\u3020\0\u3070\0\u30c0\0\u3110\0\u0460\0\u0460\0\u3160\0\u0460"+
    "\0\u31b0\0\u0460\0\u3200\0\u3250\0\u32a0\0\u32f0\0\u3340\0\u3390"+
    "\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520\0\u3570\0\u0550\0\u35c0"+
    "\0\u3610\0\u3660\0\u36b0\0\u3700\0\u3750\0\u0460\0\u37a0\0\u37f0"+
    "\0\u3840\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70"+
    "\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0"+
    "\0\u3d40\0\u3d90\0\u0460";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\20\20\1\21\2\20\1\22\1\23\1\17\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\23\2\22\1\32"+
    "\1\33\1\23\1\34\1\35\1\23\1\36\1\37\1\23"+
    "\5\22\1\40\1\23\1\41\1\23\1\42\1\23\1\43"+
    "\1\23\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\26\1\53\1\26\1\54\1\55\1\56\1\23\1\57"+
    "\1\60\1\61\3\23\1\62\1\31\1\63\1\0\1\31"+
    "\1\23\32\64\1\65\1\66\57\64\1\67\1\64\3\0"+
    "\32\70\2\0\61\70\3\0\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\6\71\1\115\62\71\3\0\32\116\1\117\1\120\61\116"+
    "\3\0\27\121\1\122\1\121\1\123\63\121\3\0\27\121"+
    "\1\124\1\121\1\125\63\121\3\0\114\121\1\126\3\0"+
    "\23\121\1\127\6\121\2\17\60\121\1\130\3\0\114\121"+
    "\1\131\3\0\32\121\2\17\60\121\1\132\3\0\32\121"+
    "\2\17\60\121\1\133\3\0\114\121\1\134\3\0\23\121"+
    "\1\135\6\121\2\17\12\121\1\136\46\121\154\0\1\26"+
    "\43\0\2\26\42\0\1\137\2\0\1\22\1\0\1\22"+
    "\7\0\3\22\5\0\1\140\2\141\5\22\2\142\2\143"+
    "\2\144\2\145\56\0\3\23\6\0\11\23\1\0\24\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\27\0\1\147"+
    "\1\150\110\0\2\26\130\0\1\30\120\0\1\31\56\0"+
    "\1\31\2\0\1\31\22\0\1\137\2\0\1\22\1\0"+
    "\1\22\7\0\3\22\2\151\1\152\2\153\1\140\2\141"+
    "\5\22\2\142\2\143\2\144\2\145\56\0\3\23\6\0"+
    "\6\23\1\154\2\23\1\0\24\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\7\23\1\155"+
    "\1\23\1\0\7\23\1\156\3\23\1\157\4\23\1\157"+
    "\3\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\1\160\17\23\1\161\1\23"+
    "\1\162\1\23\5\0\13\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\13\23\1\157\3\23"+
    "\1\163\3\23\1\164\5\0\1\165\1\166\11\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\23\23\1\167\5\0\13\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\4\23\1\170\4\23\1\0\22\23"+
    "\1\171\1\23\5\0\1\172\12\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\6\23\1\154\2\23\1\0"+
    "\1\173\6\23\1\174\10\23\1\175\1\176\2\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\6\23\1\157\2\23\1\0\1\177\10\23\1\200\12\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\7\23\1\201\1\23\1\202\6\23"+
    "\1\203\3\23\5\0\6\23\1\204\4\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\11\23"+
    "\1\205\7\23\1\206\2\23\5\0\13\23\1\0\1\207"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\15\23"+
    "\1\210\5\23\1\211\5\0\1\212\12\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\11\23"+
    "\1\156\12\23\5\0\13\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\17\23\1\213\4\23"+
    "\5\0\7\23\1\214\3\23\1\0\1\146\2\0\1\23"+
    "\21\0\1\26\122\0\3\23\6\0\6\23\1\215\2\23"+
    "\1\0\1\216\23\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\6\23\1\212\2\23\1\0"+
    "\1\217\10\23\1\220\7\23\1\221\2\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\6\23"+
    "\1\222\2\23\1\0\21\23\1\223\2\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\17\23\1\154\1\224\3\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\21\23\1\154\2\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\1\225\23\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\24\23\5\0\7\23\1\226\3\23"+
    "\1\0\1\146\2\0\1\23\114\0\1\227\36\0\1\66"+
    "\106\0\1\230\130\0\1\231\64\0\32\116\1\232\1\233"+
    "\61\116\32\0\1\121\3\0\1\234\1\233\56\0\1\233"+
    "\2\0\1\233\30\0\1\121\4\0\1\233\56\0\1\233"+
    "\2\0\1\233\31\0\1\150\116\0\1\235\117\0\1\147"+
    "\117\0\1\236\204\0\1\237\26\0\1\121\70\0\1\121"+
    "\117\0\1\240\117\0\1\121\117\0\1\241\26\0\1\121"+
    "\22\0\1\121\75\0\1\242\11\0\3\242\10\0\5\242"+
    "\111\0\2\141\5\0\2\142\2\0\2\144\2\145\71\0"+
    "\1\243\11\0\1\145\1\244\1\245\46\0\2\246\20\0"+
    "\1\247\11\0\3\247\10\0\5\247\114\0\1\244\1\245"+
    "\160\0\1\250\33\0\1\251\113\0\1\252\10\0\4\252"+
    "\3\0\2\252\3\0\5\252\2\0\6\252\2\0\1\252"+
    "\11\0\1\252\53\0\3\253\11\0\4\253\101\0\2\254"+
    "\103\0\3\23\6\0\11\23\1\0\20\23\1\157\3\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\24\23\5\0\10\23\1\255\2\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\17\23\1\157\4\23\5\0\13\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\24\23"+
    "\5\0\1\212\12\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\11\23\1\256\12\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\6\23\1\257\2\23\1\0\24\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\11\23\1\260\12\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\24\23\5\0"+
    "\1\261\12\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\17\23\1\262\4\23\5\0\2\23"+
    "\1\263\10\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\24\23\5\0\4\23\1\264\6\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\1\265\23\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\24\23\5\0"+
    "\2\23\1\266\1\23\1\264\6\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\1\267\22\23"+
    "\1\270\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\7\23\1\271\5\23\1\157"+
    "\6\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\24\23\5\0\1\272\12\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\24\23\5\0\1\273\12\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\6\23\1\271\2\23\1\0"+
    "\24\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\22\23\1\274\1\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\23\23\1\275\5\0\5\23\1\157\5\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\13\23\1\276\10\23\5\0\13\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\24\23"+
    "\5\0\4\23\1\277\6\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\24\23\5\0\1\23"+
    "\1\300\11\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\7\23\1\301\14\23\5\0\6\23"+
    "\1\157\4\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\24\23\5\0\4\23\1\270\6\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\13\23\1\157\3\23\1\302\4\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\1\303\23\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\15\23\1\154"+
    "\6\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\24\23\5\0\1\23\1\157"+
    "\11\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\15\23\1\157\6\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\21\23\1\304\2\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\20\23\1\157"+
    "\1\23\1\157\1\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\17\23\1\305"+
    "\4\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\22\23\1\157\1\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\4\23\1\306\4\23\1\0\24\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\17\23\1\307\4\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\24\23\5\0"+
    "\2\23\1\310\10\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\24\23\5\0\1\311\12\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\23\23\1\312\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\6\23\1\273\2\23\1\0"+
    "\24\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\11\23\1\313\12\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\1\277\10\23\1\314\12\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\114\0\1\315\3\0\32\316"+
    "\1\317\62\316\32\0\1\121\3\0\2\233\56\0\1\233"+
    "\2\0\1\233\115\0\1\235\117\0\1\130\117\0\1\320"+
    "\27\0\1\242\1\0\1\242\7\0\3\242\5\0\1\321"+
    "\2\0\5\242\2\0\2\143\2\144\2\145\104\0\1\145"+
    "\122\0\1\145\116\0\1\145\67\0\1\247\11\0\3\247"+
    "\10\0\5\247\66\0\1\247\1\0\1\247\7\0\3\247"+
    "\5\0\1\321\2\0\5\247\4\0\2\144\2\145\146\0"+
    "\1\322\27\0\1\252\1\0\1\252\6\0\4\252\3\0"+
    "\2\252\1\140\2\141\5\252\2\142\6\252\2\0\1\252"+
    "\11\0\1\252\43\0\1\253\7\0\3\253\5\0\1\140"+
    "\2\141\1\0\4\253\2\142\2\0\2\144\2\145\60\0"+
    "\1\254\10\0\2\254\5\0\1\140\2\141\5\0\2\142"+
    "\2\0\2\144\2\145\56\0\3\23\6\0\11\23\1\0"+
    "\11\23\1\323\12\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\21\23\1\324"+
    "\2\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\24\23\5\0\2\23\1\324"+
    "\10\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\20\23\1\325\3\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\6\23\1\156"+
    "\2\23\1\0\24\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\11\23\1\326"+
    "\12\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\22\23\1\327\1\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\6\23\1\330\2\23\1\0\24\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\24\23\5\0\1\331\12\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\11\23\1\332\12\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\13\23\1\157\10\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\11\23\1\157\12\23\5\0\13\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\21\23"+
    "\1\333\2\23\5\0\13\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\24\23\5\0\2\23"+
    "\1\157\10\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\23\23\1\301\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\17\23\1\334\4\23\5\0\2\23\1\335\10\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\11\23\1\154\12\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\22\23\1\270"+
    "\1\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\24\23\5\0\4\23\1\336"+
    "\6\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\11\23\1\337\12\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\7\23\1\340\14\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\23\23\1\270"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\17\23\1\341\4\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\1\314\23\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\24\23\5\0"+
    "\7\23\1\342\3\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\20\23\1\343\3\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\17\23\1\344\3\23\1\156\5\0\2\23"+
    "\1\266\2\23\1\345\5\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\11\23\1\157\5\23"+
    "\1\157\4\23\5\0\13\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\22\23\1\212\1\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\24\23\5\0\1\157\12\23\1\0"+
    "\1\146\2\0\1\23\33\0\1\346\146\0\2\144\2\145"+
    "\56\0\3\23\6\0\11\23\1\0\24\23\5\0\2\23"+
    "\1\156\10\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\24\23\5\0\3\23\1\157\7\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\21\23\1\347\2\23\5\0\13\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\20\23"+
    "\1\350\3\23\5\0\13\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\7\23\1\351\14\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\20\23\1\156\3\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\24\23\5\0\11\23\1\157\1\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\24\23"+
    "\5\0\4\23\1\156\6\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\11\23\1\0\22\23\1\352\1\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\1\353\23\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\21\23\1\354\2\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\22\23\1\355"+
    "\1\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\20\23\1\314\3\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\1\273\23\23\5\0\13\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\6\23\1\212\2\23"+
    "\1\0\24\23\5\0\13\23\1\0\1\146\2\0\1\23"+
    "\24\0\3\23\6\0\6\23\1\157\2\23\1\0\24\23"+
    "\5\0\13\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\1\356\23\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\11\23\1\357\12\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\17\23\1\33"+
    "\4\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\13\23\1\360\10\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\15\23\1\270\6\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\22\23\1\361\1\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\24\23\5\0"+
    "\1\323\12\23\1\0\1\146\2\0\1\23\24\0\3\23"+
    "\6\0\11\23\1\0\20\23\1\362\3\23\5\0\13\23"+
    "\1\0\1\146\2\0\1\23\24\0\3\23\6\0\11\23"+
    "\1\0\21\23\1\363\2\23\5\0\13\23\1\0\1\146"+
    "\2\0\1\23\24\0\3\23\6\0\11\23\1\0\24\23"+
    "\5\0\1\364\12\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\20\23\1\365\3\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\21\23\1\366\2\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\24\23\5\0\6\23\1\157\4\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\15\23\1\367"+
    "\6\23\5\0\13\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\17\23\1\270\4\23\5\0"+
    "\13\23\1\0\1\146\2\0\1\23\24\0\3\23\6\0"+
    "\11\23\1\0\7\23\1\270\14\23\5\0\13\23\1\0"+
    "\1\146\2\0\1\23\24\0\3\23\6\0\11\23\1\0"+
    "\17\23\1\276\4\23\5\0\13\23\1\0\1\146\2\0"+
    "\1\23\24\0\3\23\6\0\11\23\1\0\24\23\5\0"+
    "\2\23\1\270\10\23\1\0\1\146\2\0\1\23\24\0"+
    "\3\23\6\0\11\23\1\0\24\23\5\0\13\23\1\370"+
    "\1\146\2\0\1\23\114\0\1\371\117\0\1\372\117\0"+
    "\1\373\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\2\11\5\1\1\11\1\1\1\11\5\1\1\11"+
    "\14\1\1\11\10\1\1\11\1\1\7\11\1\1\17\11"+
    "\4\1\1\11\6\1\1\11\5\1\1\11\3\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\11\3\0\53\1"+
    "\2\0\1\11\2\0\1\1\1\11\4\0\1\1\4\0"+
    "\1\1\1\0\1\11\43\1\2\11\1\1\1\11\1\0"+
    "\1\11\23\1\1\11\21\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

// -----------------------------------------------------------------------------
// State stack
// -----------------------------------------------------------------------------

private final Stack<Integer> stateStack = new Stack<Integer>();

/**
 * Pushes new state onto stack and sets parser to begin new state.
 * @param newState New parser state.
 * @return New stack size.
 */
private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

/**
 * Pops previous state from stack.
 * @return Previous state.
 */
private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

// -----------------------------------------------------------------------------
// Indent spaces handler
// -----------------------------------------------------------------------------

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

// NOTE: Indent handler is suspended within parenthesis.
private boolean suspendIndent = false;

/**
 * Records last indent spaces and pushes the INDENTER state onto stack.
 */
private void handleIndent() {
    if (!suspendIndent) {
        lastIndentSpaces = indentSpaces;
        indentSpaces = 0;
        pushState(INDENTER);
    }
}

// -----------------------------------------------------------------------------
// Stack indenter
// -----------------------------------------------------------------------------

/**
 * Stores column number and increment for each indentation level.
 * This is required as it's not certain each indent is same size.
 */
private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();
private final Stack<IElementType> dedentStack = new Stack<IElementType>();

/**
 * This method is used to return multiple tokens by stalling the return state transition.
 * @return Next token to be returned to parser.
 */
private IElementType getIndenterToken() {

    // Return from INDENTER state with indent at same level, when length same.
    if (indentSpaces == lastIndentSpaces) {
        popState();
        if (indentSpaces == 0) {
            return NimElementTypes.IND_EQ0;
        } else {
            return NimElementTypes.IND_EQX;
        }
    }

    // Return from INDENTER state with indent at higher level, when length greater.
    if (indentSpaces > lastIndentSpaces) {

        // Length of last indent on stack, if any.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;

        // Push an entry onto the indenter stack.
        // Note the incremental column positions for indentation.
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimElementTypes.INDENT;
    }

    // Handle dedents.
    // Following is where indentSpaces < lastIndentSpaces.

    // Determine difference with previous indentation level.
    Indent lastIndent = indentStack.pop();
    int diff = lastIndent.Column - indentSpaces;

    if (indentSpaces == 0) {
        dedentStack.push(NimElementTypes.IND_EQ0);
    } else {
        dedentStack.push(NimElementTypes.IND_EQX);
    }

    // Add required dedents to stack to be returned.
    while (diff > lastIndent.Increment) {

        // Determine difference with previous indentation level.
        lastIndent = indentStack.pop();
        diff = lastIndent.Column - indentSpaces;

        if (indentSpaces == 0) {
            dedentStack.push(NimElementTypes.DEDENT0);
        } else {
            dedentStack.push(NimElementTypes.DEDENTX);
        }
    }

    lastIndentSpaces = lastIndent.Column;

    popState();
    pushState(DEDENTER);

    if (indentSpaces == 0) {
        return NimElementTypes.DEDENT0;
    } else {
        return NimElementTypes.DEDENTX;
    }
}

private IElementType getDedenterToken() {
    IElementType token = dedentStack.pop();
    if (dedentStack.size() == 0) popState();
    return token;
}

// -----------------------------------------------------------------------------
// Operator test
// -----------------------------------------------------------------------------

private final StringBuffer buffer = new StringBuffer();

private IElementType getOperatorToken(boolean isSpecialCase, int pushbackLength) {
    popState();

    if (isSpecialCase) {
        if (buffer.length() > 0) {
            // NOTE: Not special case.
            buffer.append("*:");
            yypushback(pushbackLength);
        } else {
            // NOTE: This is the special case. We want two tokens from "*:"
            // and here we return the first token.
            yypushback(pushbackLength + 1); // Pushes the ':' char back for next token to be generated.
            return NimElementTypes.OP9;
        }
    } else {
        yypushback(pushbackLength);
    }

    assert buffer.length() > 0;
    String s = buffer.toString();
    int len = s.length();

    // NOTE: The following from the Nim Manual, section on Operators.
    // . =, :, :: are not available as general operators; they are used for other notational purposes.
    if (s.equals(".") || s.equals("=") || s.equals(":") || s.equals("::")) {
        return NimElementTypes.NOTATION;
    }

    if (s.equals("->") || s.equals("=>") || s.equals("~>")) {
        return NimElementTypes.OP0;
    }

    if (s.equals("+=") || s.equals("*=") || s.equals("-=") || s.equals("/=")) {
        return NimElementTypes.OP1;
    }

    if (false && len > 1) {
        if (s.startsWith("@") || s.startsWith(":") || s.startsWith("?")) {
            return NimElementTypes.OP2;
        }
    }

    if (s.equals("==") ||
        s.equals("<=") ||
        s.equals("<") ||
        s.equals(">=") ||
        s.equals(">") ||
        s.equals("!=")) {
        return NimElementTypes.OP5;
    }

    if (false && len > 1) {
        if (s.startsWith("=") ||
            s.startsWith("<") ||
            s.startsWith(">") ||
            s.startsWith("!")) {
            return NimElementTypes.OP5;
        }
    }

    if (s.equals("..")) {
        return NimElementTypes.OP6;
    }

    if (true || len > 1) {
        if (s.startsWith(".")) {
            return NimElementTypes.OP6;
        }
    }

    if (true || len > 1) {
        if (s.startsWith("&")) {
            return NimElementTypes.OP7;
        }
    }

    if (s.equals("+") ||
        s.equals("-")) {
        return NimElementTypes.OP8;
    }

    if (true || len > 1) {
        if (s.startsWith("+") ||
            s.startsWith("-") ||
            s.startsWith("~") ||
            s.startsWith("|")) {
            return NimElementTypes.OP8;
        }
    }

    if (s.equals("*") ||
        s.equals("/") ||
        s.equals("%")) {
        return NimElementTypes.OP9;
    }

    if (true || len > 1) {
        if (s.startsWith("*") ||
            s.startsWith("%") ||
            s.startsWith("\\") ||
            s.startsWith("/")) {
            return NimElementTypes.OP9;
        }
    }

    if (true || len > 1) {
        if (s.startsWith("$") || s.startsWith("^")) {
            return NimElementTypes.OP10;
        }
    }

    return NimElementTypes.OPR;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case LINE_COMMENT: {
              popState(); return NimElementTypes.COMMENT;
            }  // fall though
            case 252: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 2: 
            { yypushback(1); buffer.setLength(0); pushState(OPERATOR);
            } 
            // fall through
          case 57: break;
          case 3: 
            { return NimElementTypes.NUM_LIT;
            } 
            // fall through
          case 58: break;
          case 4: 
            { return NimElementTypes.IDENT;
            } 
            // fall through
          case 59: break;
          case 5: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 60: break;
          case 6: 
            { return NimElementTypes.NOTATION;
            } 
            // fall through
          case 61: break;
          case 7: 
            { handleIndent(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 9: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 64: break;
          case 10: 
            { suspendIndent = true; return NimElementTypes.NOTATION;
            } 
            // fall through
          case 65: break;
          case 11: 
            { suspendIndent = false; return NimElementTypes.NOTATION;
            } 
            // fall through
          case 66: break;
          case 12: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 67: break;
          case 13: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 68: break;
          case 14: 
            { indentSpaces = 0;
            } 
            // fall through
          case 69: break;
          case 15: 
            { indentSpaces++;
            } 
            // fall through
          case 70: break;
          case 16: 
            { yypushback(1); return getDedenterToken();
            } 
            // fall through
          case 71: break;
          case 17: 
            { return getOperatorToken(false, 1);
            } 
            // fall through
          case 72: break;
          case 18: 
            { buffer.append('=');
            } 
            // fall through
          case 73: break;
          case 19: 
            { buffer.append('+');
            } 
            // fall through
          case 74: break;
          case 20: 
            { buffer.append('-');
            } 
            // fall through
          case 75: break;
          case 21: 
            { buffer.append('*');
            } 
            // fall through
          case 76: break;
          case 22: 
            { buffer.append('/');
            } 
            // fall through
          case 77: break;
          case 23: 
            { buffer.append('<');
            } 
            // fall through
          case 78: break;
          case 24: 
            { buffer.append('>');
            } 
            // fall through
          case 79: break;
          case 25: 
            { buffer.append('@');
            } 
            // fall through
          case 80: break;
          case 26: 
            { buffer.append('$');
            } 
            // fall through
          case 81: break;
          case 27: 
            { buffer.append('~');
            } 
            // fall through
          case 82: break;
          case 28: 
            { buffer.append('&');
            } 
            // fall through
          case 83: break;
          case 29: 
            { buffer.append('%');
            } 
            // fall through
          case 84: break;
          case 30: 
            { buffer.append('|');
            } 
            // fall through
          case 85: break;
          case 31: 
            { buffer.append('!');
            } 
            // fall through
          case 86: break;
          case 32: 
            { buffer.append('?');
            } 
            // fall through
          case 87: break;
          case 33: 
            { buffer.append('^');
            } 
            // fall through
          case 88: break;
          case 34: 
            { buffer.append('.');
            } 
            // fall through
          case 89: break;
          case 35: 
            { buffer.append(':');
            } 
            // fall through
          case 90: break;
          case 36: 
            { buffer.append('\\');
            } 
            // fall through
          case 91: break;
          case 37: 
            { 
            } 
            // fall through
          case 92: break;
          case 38: 
            { yypushback(1); popState(); return NimElementTypes.COMMENT;
            } 
            // fall through
          case 93: break;
          case 39: 
            { popState(); return NimElementTypes.STR_LIT;
            } 
            // fall through
          case 94: break;
          case 40: 
            { popState(); return NimElementTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 95: break;
          case 41: 
            { popState(); return NimElementTypes.CHAR_LIT;
            } 
            // fall through
          case 96: break;
          case 42: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 97: break;
          case 43: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 98: break;
          case 44: 
            { return NimElementTypes.KEYW;
            } 
            // fall through
          case 99: break;
          case 45: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 100: break;
          case 46: 
            { return getOperatorToken(false, 2);
            } 
            // fall through
          case 101: break;
          case 47: 
            { yypushback(2); popState(); return NimElementTypes.COMMENT;
            } 
            // fall through
          case 102: break;
          case 48: 
            { if (popState() == 0) return NimElementTypes.COMMENT;
            } 
            // fall through
          case 103: break;
          case 49: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 104: break;
          case 50: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 105: break;
          case 51: 
            { return getOperatorToken(true, 1);
            } 
            // fall through
          case 106: break;
          case 52: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 107: break;
          case 53: 
            { return NimElementTypes.BOOL_LIT;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return getOperatorToken(true, 2);
            } 
            // fall through
          case 109: break;
          case 55: 
            { pushState(DISCARD_COMMENT);
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
