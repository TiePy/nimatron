/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.psi.NimElementType;import com.tiepy.nimatron.psi.NimElementTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int DEDENTER = 4;
  public static final int OPERATOR = 6;
  public static final int BRACKETED = 8;
  public static final int OBJECT_OF = 10;
  public static final int LINE_COMMENT = 12;
  public static final int BLOCK_COMMENT = 14;
  public static final int BLOCK_DOC_COMMENT = 16;
  public static final int DISCARD_COMMENT = 18;
  public static final int STRING_LITERAL = 20;
  public static final int TRIPLE_STRING_LITERAL = 22;
  public static final int RAW_STRING_LITERAL = 24;
  public static final int GENERALIZED_STRING_LITERAL = 26;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 28;
  public static final int CHARACTER_LITERAL = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\34\1\33\1\113\1\114\1\32\22\0\1\111\1\16\1\112\1\27\1\11\1\14\1\13"+
    "\1\46\1\73\1\74\1\4\1\2\1\75\1\3\1\21\1\5\1\40\1\37\1\54\1\53\1\55\1\36\1"+
    "\52\1\36\1\51\1\24\1\22\1\75\1\6\1\1\1\7\1\17\1\10\1\35\1\45\1\35\1\65\1\61"+
    "\1\63\2\25\1\50\13\25\1\57\2\25\1\42\2\25\1\30\1\23\1\31\1\20\1\26\1\75\1"+
    "\70\1\44\1\100\1\64\1\60\1\62\1\107\1\105\1\47\1\106\1\101\1\71\1\77\1\76"+
    "\1\43\1\102\1\25\1\67\1\72\1\66\1\56\1\103\1\110\1\41\1\104\1\25\1\73\1\15"+
    "\1\74\1\12\1\0\5\25\1\115\172\25\250\0\2\113\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\3\3\4\1\11\12\4\1\6\1\12\7\4"+
    "\1\13\1\14\2\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\20\1\2\1\44\2\45\3\46\1\47\2\50"+
    "\7\47\1\51\1\47\1\51\1\52\2\47\1\53\3\0"+
    "\1\3\1\0\2\3\1\54\1\0\1\55\1\6\3\0"+
    "\3\4\1\56\1\57\4\4\2\57\21\4\1\60\1\4"+
    "\1\57\15\4\2\0\1\61\1\62\1\63\2\0\1\64"+
    "\1\65\4\0\1\3\4\0\1\3\1\0\1\66\3\3"+
    "\30\4\1\57\10\4\1\67\2\70\1\52\1\0\1\71"+
    "\14\4\1\72\10\4\1\73\12\4\1\74\10\4\1\57"+
    "\3\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u04e0"+
    "\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u04e0\0\u083a\0\u0888"+
    "\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8"+
    "\0\u0b46\0\u04e0\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a"+
    "\0\u0d68\0\u0db6\0\u04e0\0\u0e04\0\u04e0\0\u04e0\0\u04e0\0\u04e0"+
    "\0\u04e0\0\u04e0\0\u04e0\0\u0e52\0\u04e0\0\u04e0\0\u04e0\0\u04e0"+
    "\0\u04e0\0\u04e0\0\u04e0\0\u04e0\0\u04e0\0\u04e0\0\u04e0\0\u04e0"+
    "\0\u04e0\0\u04e0\0\u04e0\0\u0ea0\0\u0eee\0\u04e0\0\u0f3c\0\u04e0"+
    "\0\u04e0\0\u0f8a\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\u04e0\0\u1110"+
    "\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u04e0\0\u12e4\0\u1332"+
    "\0\u1332\0\u1380\0\u13ce\0\u04e0\0\u141c\0\u146a\0\u14b8\0\u14b8"+
    "\0\u1506\0\u1554\0\u04e0\0\u15a2\0\u15f0\0\u04e0\0\u04e0\0\u163e"+
    "\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u057c\0\u057c\0\u1812"+
    "\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82"+
    "\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u15a2\0\u1f14"+
    "\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184"+
    "\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4"+
    "\0\u04e0\0\u04e0\0\u04e0\0\u2442\0\u10c2\0\u10c2\0\u04e0\0\u115e"+
    "\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2"+
    "\0\u2700\0\u274e\0\u04e0\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4"+
    "\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44"+
    "\0\u2b92\0\u2be0\0\u1f62\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\u2d66"+
    "\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u2f88"+
    "\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u04e0"+
    "\0\u04e0\0\u31f8\0\u04e0\0\u3246\0\u04e0\0\u3294\0\u32e2\0\u3330"+
    "\0\u337e\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0"+
    "\0\u35ee\0\u057c\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774\0\u37c2"+
    "\0\u3810\0\u385e\0\u04e0\0\u38ac\0\u38fa\0\u3948\0\u3996\0\u39e4"+
    "\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u057c\0\u3bb8\0\u3c06"+
    "\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76"+
    "\0\u3ec4\0\u3f12\0\u04e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\23\22\1\23\1\24\1\21\1\25\1\26\1\21"+
    "\1\27\1\30\1\31\1\24\2\23\1\32\1\33\1\24"+
    "\1\34\1\35\1\24\1\36\1\37\1\24\5\23\1\40"+
    "\1\24\1\41\1\24\1\42\1\24\1\43\1\24\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\21\1\52\1\53"+
    "\1\54\1\55\1\24\1\56\1\57\1\60\3\24\1\61"+
    "\1\31\1\62\1\0\1\31\1\24\32\63\1\64\1\65"+
    "\55\63\1\66\1\63\3\0\32\67\2\0\57\67\3\0"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\6\70\1\114\60\70\3\0"+
    "\1\21\20\22\1\115\2\22\1\23\1\24\1\21\1\25"+
    "\1\26\1\116\1\117\1\120\1\31\1\24\2\23\1\32"+
    "\1\33\1\24\1\34\1\35\1\24\1\36\1\37\1\24"+
    "\5\23\1\40\1\24\1\41\1\24\1\42\1\24\1\43"+
    "\1\24\1\44\1\45\1\46\1\47\1\50\1\51\1\116"+
    "\1\52\1\53\1\54\1\55\1\24\1\56\1\57\1\60"+
    "\3\24\1\61\1\31\1\62\1\0\1\31\1\24\32\121"+
    "\1\122\1\121\1\31\6\121\1\123\45\121\1\31\1\121"+
    "\1\0\1\31\1\0\32\124\1\125\1\126\57\124\3\0"+
    "\27\127\1\130\1\127\1\131\61\127\3\0\27\127\1\132"+
    "\1\127\1\133\61\127\3\0\112\127\1\134\3\0\23\127"+
    "\1\135\6\127\2\21\56\127\1\136\3\0\112\127\1\137"+
    "\3\0\32\127\2\21\56\127\1\140\3\0\32\127\2\21"+
    "\56\127\1\141\3\0\112\127\1\142\3\0\23\127\1\143"+
    "\6\127\2\21\12\127\1\144\44\127\142\0\1\145\2\0"+
    "\1\23\1\0\1\23\7\0\3\23\5\0\1\146\2\147"+
    "\5\23\2\150\2\151\2\152\2\153\54\0\3\24\6\0"+
    "\11\24\1\0\24\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\27\0\1\155\1\156\106\0\2\157\126\0\1\30"+
    "\116\0\1\31\54\0\1\31\2\0\1\31\22\0\1\145"+
    "\2\0\1\23\1\0\1\23\7\0\3\23\2\160\1\161"+
    "\2\162\1\146\2\147\5\23\2\150\2\151\2\152\2\153"+
    "\54\0\3\24\6\0\6\24\1\163\2\24\1\0\24\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\7\24\1\164\1\24\1\0\7\24\1\165\3\24"+
    "\1\166\4\24\1\167\3\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\1\170"+
    "\17\24\1\171\1\24\1\172\1\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\13\24\1\166\3\24\1\173\3\24\1\174\3\0\1\175"+
    "\1\176\11\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\23\24\1\177\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\4\24\1\200"+
    "\4\24\1\0\22\24\1\201\1\24\3\0\1\202\12\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\6\24"+
    "\1\163\2\24\1\0\1\203\6\24\1\204\10\24\1\205"+
    "\1\206\2\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\6\24\1\167\2\24\1\0\1\207"+
    "\10\24\1\210\12\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\7\24\1\211"+
    "\1\24\1\212\6\24\1\213\3\24\3\0\6\24\1\214"+
    "\4\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\11\24\1\215\7\24\1\216\2\24\3\0"+
    "\13\24\1\0\1\217\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\15\24\1\220\5\24\1\221\3\0\1\222"+
    "\12\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\11\24\1\165\12\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\17\24\1\223\4\24\3\0\7\24\1\224\3\24\1\0"+
    "\1\154\2\0\1\24\21\0\1\157\120\0\3\24\6\0"+
    "\6\24\1\225\2\24\1\0\1\226\23\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\6\24"+
    "\1\222\2\24\1\0\1\227\10\24\1\230\7\24\1\231"+
    "\2\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\6\24\1\232\2\24\1\0\21\24\1\233"+
    "\2\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\17\24\1\163\1\234\3\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\21\24\1\163\2\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\1\235\23\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\24\24\3\0"+
    "\7\24\1\236\3\24\1\0\1\154\2\0\1\24\112\0"+
    "\1\237\36\0\1\65\104\0\1\240\126\0\1\241\113\0"+
    "\1\116\42\0\1\116\54\0\1\120\115\0\1\242\144\0"+
    "\1\243\33\0\32\124\1\244\1\245\57\124\32\0\1\127"+
    "\3\0\1\246\1\245\54\0\1\245\2\0\1\245\30\0"+
    "\1\127\4\0\1\245\54\0\1\245\2\0\1\245\31\0"+
    "\1\156\114\0\1\247\115\0\1\155\115\0\1\250\200\0"+
    "\1\251\26\0\1\127\66\0\1\127\115\0\1\252\115\0"+
    "\1\127\115\0\1\253\26\0\1\127\22\0\1\127\73\0"+
    "\1\254\11\0\3\254\10\0\5\254\107\0\2\147\5\0"+
    "\2\150\2\0\2\152\2\153\67\0\1\255\11\0\1\153"+
    "\1\256\1\257\44\0\2\260\20\0\1\261\11\0\3\261"+
    "\10\0\5\261\112\0\1\256\1\257\154\0\1\262\33\0"+
    "\1\263\111\0\1\264\10\0\4\264\3\0\2\264\3\0"+
    "\5\264\2\0\6\264\2\0\1\264\7\0\1\264\53\0"+
    "\3\265\11\0\4\265\77\0\2\266\101\0\3\24\6\0"+
    "\11\24\1\0\20\24\1\167\3\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\24\24\3\0\10\24\1\267\2\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\17\24\1\167"+
    "\4\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\24\24\3\0\1\222\12\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\11\24\1\270\12\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\6\24\1\271\2\24"+
    "\1\0\24\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\11\24\1\272\12\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\24\24\3\0\1\273\12\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\17\24\1\274\4\24\3\0\2\24\1\275\10\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\24\24\3\0\4\24\1\276\6\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\1\277\23\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\24\24\3\0\2\24\1\300\1\24"+
    "\1\276\6\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\1\301\22\24\1\302\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\7\24\1\303\5\24\1\167\6\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\24\24\3\0\1\304\12\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\24\24\3\0"+
    "\1\305\12\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\6\24\1\303\2\24\1\0\24\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\22\24\1\306\1\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\23\24"+
    "\1\307\3\0\5\24\1\167\5\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\13\24\1\310"+
    "\10\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\24\24\3\0\4\24\1\311"+
    "\6\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\24\24\3\0\1\24\1\312\11\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\7\24\1\313\14\24\3\0\6\24\1\167\4\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\24\24\3\0\4\24\1\302\6\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\13\24\1\167"+
    "\3\24\1\314\4\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\1\315\23\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\15\24\1\163\6\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\24\24\3\0\1\24\1\167\11\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\15\24"+
    "\1\167\6\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\21\24\1\316\2\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\20\24\1\167\1\24\1\167\1\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\17\24\1\317\4\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\22\24\1\167\1\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\4\24\1\320\4\24"+
    "\1\0\24\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\17\24\1\321\4\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\24\24\3\0\2\24\1\322\10\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\24\24\3\0\1\323\12\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\23\24\1\324"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\6\24\1\305\2\24\1\0\24\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\11\24\1\325\12\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\1\326"+
    "\10\24\1\327\12\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\112\0\1\330\3\0\32\331\1\332\60\331\32\0"+
    "\1\127\3\0\2\245\54\0\1\245\2\0\1\245\113\0"+
    "\1\247\115\0\1\136\115\0\1\333\27\0\1\254\1\0"+
    "\1\254\7\0\3\254\5\0\1\334\2\0\5\254\2\0"+
    "\2\151\2\152\2\153\102\0\1\153\120\0\1\153\114\0"+
    "\1\153\65\0\1\261\11\0\3\261\10\0\5\261\64\0"+
    "\1\261\1\0\1\261\7\0\3\261\5\0\1\334\2\0"+
    "\5\261\4\0\2\152\2\153\142\0\1\335\27\0\1\264"+
    "\1\0\1\264\6\0\4\264\3\0\2\264\1\146\2\147"+
    "\5\264\2\150\6\264\2\0\1\264\7\0\1\264\43\0"+
    "\1\265\7\0\3\265\5\0\1\146\2\147\1\0\4\265"+
    "\2\150\2\0\2\152\2\153\56\0\1\266\10\0\2\266"+
    "\5\0\1\146\2\147\5\0\2\150\2\0\2\152\2\153"+
    "\54\0\3\24\6\0\11\24\1\0\11\24\1\336\12\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\21\24\1\337\2\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\24\24\3\0\2\24\1\337\10\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\20\24"+
    "\1\340\3\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\6\24\1\165\2\24\1\0\24\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\11\24\1\341\12\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\22\24\1\342\1\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\6\24\1\343\2\24"+
    "\1\0\24\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\24\24\3\0\1\344"+
    "\12\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\11\24\1\345\12\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\13\24\1\166\10\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\11\24\1\167"+
    "\12\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\21\24\1\346\2\24\3\0"+
    "\13\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\24\24\3\0\2\24\1\167\10\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\23\24\1\313\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\17\24\1\347\4\24"+
    "\3\0\2\24\1\350\10\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\11\24\1\163\12\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\22\24\1\302\1\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\24\24\3\0\4\24\1\351\6\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\11\24"+
    "\1\352\12\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\7\24\1\353\14\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\23\24\1\302\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\17\24\1\354\4\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\1\355\23\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\24\24\3\0\7\24\1\356\3\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\20\24\1\357\3\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\17\24"+
    "\1\360\3\24\1\165\3\0\2\24\1\300\2\24\1\361"+
    "\5\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\11\24\1\167\5\24\1\167\4\24\3\0"+
    "\13\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\22\24\1\222\1\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\22\24\1\362\1\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\24\24\3\0"+
    "\1\166\12\24\1\0\1\154\2\0\1\24\33\0\1\363"+
    "\144\0\2\152\2\153\54\0\3\24\6\0\11\24\1\0"+
    "\24\24\3\0\2\24\1\364\10\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\24\24\3\0"+
    "\3\24\1\167\7\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\21\24\1\365\2\24\3\0"+
    "\13\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\20\24\1\366\3\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\7\24\1\367\14\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\20\24\1\165"+
    "\3\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\24\24\3\0\11\24\1\167"+
    "\1\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\24\24\3\0\4\24\1\165\6\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\22\24\1\370\1\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\1\371\23\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\21\24\1\372\2\24\3\0\13\24"+
    "\1\0\1\154\2\0\1\24\24\0\3\24\6\0\11\24"+
    "\1\0\22\24\1\373\1\24\3\0\13\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\20\24"+
    "\1\355\3\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\1\305\23\24\3\0"+
    "\13\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\24\24\3\0\1\167\12\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\6\24\1\222\2\24"+
    "\1\0\24\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\6\24\1\167\2\24\1\0\24\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\1\374\23\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\11\24\1\375\12\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\11\24\1\166"+
    "\12\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\17\24\1\376\4\24\3\0"+
    "\13\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\17\24\1\33\4\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\13\24\1\377\10\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\15\24\1\302"+
    "\6\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\22\24\1\u0100\1\24\3\0"+
    "\13\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\24\24\3\0\1\u0101\12\24\1\0\1\154"+
    "\2\0\1\24\24\0\3\24\6\0\11\24\1\0\20\24"+
    "\1\u0102\3\24\3\0\13\24\1\0\1\154\2\0\1\24"+
    "\24\0\3\24\6\0\11\24\1\0\21\24\1\u0103\2\24"+
    "\3\0\13\24\1\0\1\154\2\0\1\24\24\0\3\24"+
    "\6\0\11\24\1\0\24\24\3\0\1\u0104\12\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\20\24\1\u0105\3\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\21\24\1\u0106"+
    "\2\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\24\24\3\0\6\24\1\167"+
    "\4\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\24\24\3\0\2\24\1\165\10\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\15\24\1\u0107\6\24\3\0\13\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\17\24\1\302"+
    "\4\24\3\0\13\24\1\0\1\154\2\0\1\24\24\0"+
    "\3\24\6\0\11\24\1\0\7\24\1\302\14\24\3\0"+
    "\13\24\1\0\1\154\2\0\1\24\24\0\3\24\6\0"+
    "\11\24\1\0\17\24\1\310\4\24\3\0\13\24\1\0"+
    "\1\154\2\0\1\24\24\0\3\24\6\0\11\24\1\0"+
    "\24\24\3\0\2\24\1\302\10\24\1\0\1\154\2\0"+
    "\1\24\24\0\3\24\6\0\11\24\1\0\24\24\3\0"+
    "\13\24\1\u0108\1\154\2\0\1\24\112\0\1\u0109\115\0"+
    "\1\u010a\115\0\1\u010b\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\2\11\5\1\1\11\5\1\1\11\13\1\1\11"+
    "\10\1\1\11\1\1\7\11\1\1\17\11\2\1\1\11"+
    "\1\1\2\11\5\1\1\11\6\1\1\11\5\1\1\11"+
    "\3\0\1\1\1\0\1\1\1\11\1\1\1\0\2\11"+
    "\3\0\54\1\2\0\3\11\2\0\1\1\1\11\4\0"+
    "\1\1\4\0\1\1\1\0\1\11\44\1\2\11\1\1"+
    "\1\11\1\0\1\11\25\1\1\11\24\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

// -----------------------------------------------------------------------------
// State stack
// -----------------------------------------------------------------------------

private final Stack<Integer> stateStack = new Stack<Integer>();

/**
 * Pushes new state onto stack and sets parser to begin new state.
 * @param newState New parser state.
 * @return New stack size.
 */
private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

/**
 * Pops previous state from stack.
 * @return Previous state.
 */
private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

// -----------------------------------------------------------------------------
// Indent spaces handler
// -----------------------------------------------------------------------------

private boolean suspendIndent = false;

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

/**
 * Records last indent spaces and pushes the INDENTER state onto stack.
 */
private void handleIndent() {
    if (!suspendIndent) {
        lastIndentSpaces = indentSpaces;
        indentSpaces = 0;
        pushState(INDENTER);
    }
}

// -----------------------------------------------------------------------------
// Stack indenter
// -----------------------------------------------------------------------------

/**
 * Stores column number and increment for each indentation level.
 * This is required as it's not certain each indent is same size.
 */
private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();
private final Stack<IElementType> dedentStack = new Stack<IElementType>();

/**
 * This method is used to return multiple tokens by stalling the return state transition.
 * @return Next token to be returned to parser.
 */
private IElementType getIndenterToken() {

    // Return from INDENTER state with indent at same level, when length same.
    if (indentSpaces == lastIndentSpaces) {
        popState();
        if (indentSpaces == 0) {
            return NimElementTypes.IND_EQ0;
        } else {
            return NimElementTypes.IND_EQX;
        }
    }

    // Return from INDENTER state with indent at higher level, when length greater.
    if (indentSpaces > lastIndentSpaces) {

        // Length of last indent on stack, if any.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;

        // Push an entry onto the indenter stack.
        // Note the incremental column positions for indentation.
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimElementTypes.INDENT;
    }

    // Handle dedents.
    // Following is where indentSpaces < lastIndentSpaces.

    // Determine difference with previous indentation level.
    Indent lastIndent = indentStack.pop();
    int diff = lastIndent.Column - indentSpaces;

    if (indentSpaces == 0) {
        dedentStack.push(NimElementTypes.IND_EQ0);
    } else {
        dedentStack.push(NimElementTypes.IND_EQX);
    }

    // Add required dedents to stack to be returned.
    while (diff > lastIndent.Increment) {

        // Determine difference with previous indentation level.
        lastIndent = indentStack.pop();
        diff = lastIndent.Column - indentSpaces;

        if (indentSpaces == 0) {
            dedentStack.push(NimElementTypes.DEDENT0);
        } else {
            dedentStack.push(NimElementTypes.DEDENTX);
        }
    }

    lastIndentSpaces = lastIndent.Column;

    popState();
    pushState(DEDENTER);

    if (indentSpaces == 0) {
        return NimElementTypes.DEDENT0;
    } else {
        return NimElementTypes.DEDENTX;
    }
}

private IElementType getDedenterToken() {
    IElementType token = dedentStack.pop();
    if (dedentStack.size() == 0) popState();
    return token;
}

// -----------------------------------------------------------------------------
// Operator test
// -----------------------------------------------------------------------------

private final StringBuffer buffer = new StringBuffer();

private IElementType getOperatorToken(boolean isSpecialCase, int pushbackLength) {
    popState();

    if (isSpecialCase) {
        if (buffer.length() > 0) {
            // NOTE: Not special case.
            buffer.append("*:");
            yypushback(pushbackLength);
        } else {
            // NOTE: This is the special case. We want two tokens from "*:"
            // and here we return the first token.
            yypushback(pushbackLength + 1); // Pushes the ':' char back for next token to be generated.
            return NimElementTypes.OP9;
        }
    } else {
        yypushback(pushbackLength);
    }

    assert buffer.length() > 0;
    String s = buffer.toString();
    int len = s.length();

    // NOTE: The following from the Nim Manual, section on Operators.
    // . =, :, :: are not available as general operators; they are used for other notational purposes.
    if (s.equals(":")) {
        suspendIndent = false;
        return NimElementTypes.NOTATION;
    }

    if (s.equals(".") || s.equals("=") || s.equals("::")) {
        return NimElementTypes.NOTATION;
    }

    if (s.equals("->") || s.equals("=>") || s.equals("~>")) {
        return NimElementTypes.OP0;
    }

    if (s.equals("+=") || s.equals("*=") || s.equals("-=") || s.equals("/=")) {
        return NimElementTypes.OP1;
    }

    if (false && len > 1) {
        if (s.startsWith("@") || s.startsWith(":") || s.startsWith("?")) {
            return NimElementTypes.OP2;
        }
    }

    if (s.equals("==") ||
        s.equals("<=") ||
        s.equals("<") ||
        s.equals(">=") ||
        s.equals(">") ||
        s.equals("!=")) {
        return NimElementTypes.OP5;
    }

    if (false && len > 1) {
        if (s.startsWith("=") ||
            s.startsWith("<") ||
            s.startsWith(">") ||
            s.startsWith("!")) {
            return NimElementTypes.OP5;
        }
    }

    if (s.equals("..")) {
        return NimElementTypes.OP6;
    }

    if (true || len > 1) {
        if (s.startsWith(".")) {
            return NimElementTypes.OP6;
        }
    }

    if (true || len > 1) {
        if (s.startsWith("&")) {
            return NimElementTypes.OP7;
        }
    }

    if (s.equals("+") ||
        s.equals("-")) {
        return NimElementTypes.OP8;
    }

    if (true || len > 1) {
        if (s.startsWith("+") ||
            s.startsWith("-") ||
            s.startsWith("~") ||
            s.startsWith("|")) {
            return NimElementTypes.OP8;
        }
    }

    if (s.equals("*") ||
        s.equals("/") ||
        s.equals("%")) {
        return NimElementTypes.OP9;
    }

    if (true || len > 1) {
        if (s.startsWith("*") ||
            s.startsWith("%") ||
            s.startsWith("\\") ||
            s.startsWith("/")) {
            return NimElementTypes.OP9;
        }
    }

    if (true || len > 1) {
        if (s.startsWith("$") || s.startsWith("^")) {
            return NimElementTypes.OP10;
        }
    }

    return NimElementTypes.OPR;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case LINE_COMMENT: {
              popState(); return NimElementTypes.COMMENT;
            }  // fall though
            case 268: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 62: break;
          case 2: 
            { yypushback(1); buffer.setLength(0); pushState(OPERATOR);
            } 
            // fall through
          case 63: break;
          case 3: 
            { return NimElementTypes.NUM_LIT;
            } 
            // fall through
          case 64: break;
          case 4: 
            { return NimElementTypes.IDENT;
            } 
            // fall through
          case 65: break;
          case 5: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 66: break;
          case 6: 
            { pushState(BRACKETED); return NimElementTypes.NOTATION;
            } 
            // fall through
          case 67: break;
          case 7: 
            { handleIndent(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 8: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 9: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 70: break;
          case 10: 
            { return NimElementTypes.NOTATION;
            } 
            // fall through
          case 71: break;
          case 11: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 72: break;
          case 12: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 73: break;
          case 13: 
            { indentSpaces = 0;
            } 
            // fall through
          case 74: break;
          case 14: 
            { indentSpaces++;
            } 
            // fall through
          case 75: break;
          case 15: 
            { yypushback(1); return getDedenterToken();
            } 
            // fall through
          case 76: break;
          case 16: 
            { return getOperatorToken(false, 1);
            } 
            // fall through
          case 77: break;
          case 17: 
            { buffer.append('=');
            } 
            // fall through
          case 78: break;
          case 18: 
            { buffer.append('+');
            } 
            // fall through
          case 79: break;
          case 19: 
            { buffer.append('-');
            } 
            // fall through
          case 80: break;
          case 20: 
            { buffer.append('*');
            } 
            // fall through
          case 81: break;
          case 21: 
            { buffer.append('/');
            } 
            // fall through
          case 82: break;
          case 22: 
            { buffer.append('<');
            } 
            // fall through
          case 83: break;
          case 23: 
            { buffer.append('>');
            } 
            // fall through
          case 84: break;
          case 24: 
            { buffer.append('@');
            } 
            // fall through
          case 85: break;
          case 25: 
            { buffer.append('$');
            } 
            // fall through
          case 86: break;
          case 26: 
            { buffer.append('~');
            } 
            // fall through
          case 87: break;
          case 27: 
            { buffer.append('&');
            } 
            // fall through
          case 88: break;
          case 28: 
            { buffer.append('%');
            } 
            // fall through
          case 89: break;
          case 29: 
            { buffer.append('|');
            } 
            // fall through
          case 90: break;
          case 30: 
            { buffer.append('!');
            } 
            // fall through
          case 91: break;
          case 31: 
            { buffer.append('?');
            } 
            // fall through
          case 92: break;
          case 32: 
            { buffer.append('^');
            } 
            // fall through
          case 93: break;
          case 33: 
            { buffer.append('.');
            } 
            // fall through
          case 94: break;
          case 34: 
            { buffer.append(':');
            } 
            // fall through
          case 95: break;
          case 35: 
            { buffer.append('\\');
            } 
            // fall through
          case 96: break;
          case 36: 
            { popState(); return NimElementTypes.NOTATION;
            } 
            // fall through
          case 97: break;
          case 37: 
            { /*handleIndent();*/ return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 98: break;
          case 38: 
            { yypushback(1); popState();
            } 
            // fall through
          case 99: break;
          case 39: 
            { 
            } 
            // fall through
          case 100: break;
          case 40: 
            { yypushback(1); popState(); return NimElementTypes.COMMENT;
            } 
            // fall through
          case 101: break;
          case 41: 
            { popState(); return NimElementTypes.STR_LIT;
            } 
            // fall through
          case 102: break;
          case 42: 
            { popState(); return NimElementTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 103: break;
          case 43: 
            { popState(); return NimElementTypes.CHAR_LIT;
            } 
            // fall through
          case 104: break;
          case 44: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 105: break;
          case 45: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 106: break;
          case 46: 
            { suspendIndent = true; return NimElementTypes.KEYW;
            } 
            // fall through
          case 107: break;
          case 47: 
            { return NimElementTypes.KEYW;
            } 
            // fall through
          case 108: break;
          case 48: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 109: break;
          case 49: 
            { return getOperatorToken(false, 2);
            } 
            // fall through
          case 110: break;
          case 50: 
            { yypushback(2); popState();
            } 
            // fall through
          case 111: break;
          case 51: 
            { popState(); return NimElementTypes.KEYW;
            } 
            // fall through
          case 112: break;
          case 52: 
            { yypushback(2); popState(); return NimElementTypes.COMMENT;
            } 
            // fall through
          case 113: break;
          case 53: 
            { if (popState() == 0) return NimElementTypes.COMMENT;
            } 
            // fall through
          case 114: break;
          case 54: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 115: break;
          case 55: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 116: break;
          case 56: 
            { return getOperatorToken(true, 1);
            } 
            // fall through
          case 117: break;
          case 57: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 118: break;
          case 58: 
            { return NimElementTypes.BOOL_LIT;
            } 
            // fall through
          case 119: break;
          case 59: 
            { return getOperatorToken(true, 2);
            } 
            // fall through
          case 120: break;
          case 60: 
            { pushState(OBJECT_OF); return NimElementTypes.KEYW;
            } 
            // fall through
          case 121: break;
          case 61: 
            { pushState(DISCARD_COMMENT);
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
