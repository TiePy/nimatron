/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

package com.tiepy.nimatron.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.tiepy.nimatron.psi.NimElementTypes;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTER = 2;
  public static final int DEDENTER = 4;
  public static final int LINE_COMMENT = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int BLOCK_DOC_COMMENT = 10;
  public static final int DISCARD_COMMENT = 12;
  public static final int STRING_LITERAL = 14;
  public static final int TRIPLE_STRING_LITERAL = 16;
  public static final int RAW_STRING_LITERAL = 18;
  public static final int GENERALIZED_STRING_LITERAL = 20;
  public static final int GENERALIZED_TRIPLE_STRING_LITERAL = 22;
  public static final int CHARACTER_LITERAL = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\51\1\47\1\115\1\116\1\50\22\0\1\113\1\22\1\114\1\44\1\36\1\35\1\30"+
    "\1\61\1\77\1\100\1\6\1\5\1\102\1\1\1\27\1\7\1\55\1\54\1\66\1\65\1\67\1\53"+
    "\1\64\1\53\1\63\1\41\1\11\1\101\1\21\1\4\1\2\1\12\1\10\1\52\1\60\2\52\1\73"+
    "\1\74\2\42\1\62\13\42\1\71\2\42\1\56\2\42\1\45\1\120\1\46\1\37\1\43\1\103"+
    "\1\16\1\57\1\104\1\20\1\72\1\26\1\111\1\33\1\23\1\110\1\105\1\34\1\32\1\17"+
    "\1\13\1\106\1\42\1\14\1\25\1\24\1\70\1\31\1\112\1\15\1\107\1\42\1\75\1\40"+
    "\1\76\1\3\1\0\5\42\1\117\172\42\250\0\2\115\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\6\13\1\14\1\4\4\13\1\4"+
    "\1\15\4\13\1\16\1\17\1\20\1\4\1\21\1\22"+
    "\2\23\2\24\1\25\1\21\1\13\1\26\2\13\1\23"+
    "\2\27\1\30\1\31\1\32\4\13\1\33\1\34\2\35"+
    "\1\36\1\37\3\40\7\41\1\1\1\42\2\41\1\43"+
    "\1\44\1\41\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\2\13\1\61"+
    "\2\13\1\62\3\13\1\63\2\13\1\64\2\13\1\65"+
    "\1\66\1\67\1\13\1\70\14\13\1\71\4\13\1\0"+
    "\1\72\2\0\1\73\2\0\1\74\3\0\14\13\1\0"+
    "\1\75\4\0\1\13\1\0\2\13\1\76\1\77\1\100"+
    "\1\101\1\13\1\102\13\13\1\103\1\104\4\13\1\105"+
    "\3\13\1\0\1\106\4\0\1\107\1\0\1\110\3\0"+
    "\1\107\1\111\3\21\12\13\1\112\1\113\1\114\1\13"+
    "\1\115\11\13\1\116\5\13\1\117\1\120\1\121\1\122"+
    "\1\72\1\0\1\123\1\124\1\125\5\13\1\126\5\13"+
    "\1\127\13\13\1\64\1\13\3\0\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\u0195\0\u01e6\0\u0237"+
    "\0\u0288\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d\0\u046e\0\u04bf"+
    "\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654\0\u06a5\0\u06a5\0\u06a5"+
    "\0\u06f6\0\u0747\0\u0798\0\u07e9\0\u083a\0\u088b\0\u08dc\0\u092d"+
    "\0\u097e\0\u09cf\0\u0a20\0\u0a71\0\u0ac2\0\u06a5\0\u0b13\0\u0b64"+
    "\0\u0bb5\0\u0c06\0\u06a5\0\u06a5\0\u06a5\0\u06a5\0\u0c57\0\u0ca8"+
    "\0\u0cf9\0\u041d\0\u041d\0\u0d4a\0\u0d9b\0\u0dec\0\u0e3d\0\u041d"+
    "\0\u0e8e\0\u0edf\0\u0f30\0\u0f30\0\u041d\0\u041d\0\u041d\0\u041d"+
    "\0\u0f81\0\u0fd2\0\u1023\0\u1074\0\u10c5\0\u041d\0\u041d\0\u1116"+
    "\0\u041d\0\u041d\0\u1167\0\u041d\0\u11b8\0\u041d\0\u1209\0\u125a"+
    "\0\u12ab\0\u12fc\0\u134d\0\u139e\0\u13ef\0\u041d\0\u1440\0\u1491"+
    "\0\u1440\0\u1440\0\u14e2\0\u041d\0\u06a5\0\u06a5\0\u06a5\0\u06a5"+
    "\0\u06a5\0\u06a5\0\u06a5\0\u06a5\0\u06a5\0\u0bb5\0\u0bb5\0\u1533"+
    "\0\u1584\0\u15d5\0\u1626\0\u1677\0\u15d5\0\u16c8\0\u1719\0\u176a"+
    "\0\u17bb\0\u180c\0\u185d\0\u0bb5\0\u18ae\0\u18ff\0\u06a5\0\u06a5"+
    "\0\u1950\0\u19a1\0\u19f2\0\u1a43\0\u1a94\0\u1ae5\0\u1b36\0\u1b87"+
    "\0\u1bd8\0\u1c29\0\u1c7a\0\u1ccb\0\u1d1c\0\u1d6d\0\u1dbe\0\u06a5"+
    "\0\u1e0f\0\u1e60\0\u1eb1\0\u1f02\0\u1f53\0\u1fa4\0\u1ff5\0\u2046"+
    "\0\u2097\0\u20e8\0\u2139\0\u041d\0\u218a\0\u21db\0\u222c\0\u227d"+
    "\0\u22ce\0\u231f\0\u2370\0\u23c1\0\u2412\0\u2463\0\u24b4\0\u2505"+
    "\0\u2556\0\u25a7\0\u25f8\0\u2649\0\u041d\0\u125a\0\u269a\0\u26eb"+
    "\0\u273c\0\u278d\0\u27de\0\u282f\0\u2880\0\u0bb5\0\u0bb5\0\u28d1"+
    "\0\u0bb5\0\u2922\0\u0bb5\0\u2973\0\u29c4\0\u2a15\0\u2a66\0\u2ab7"+
    "\0\u2b08\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c\0\u2c9d\0\u0bb5\0\u0bb5"+
    "\0\u17bb\0\u2cee\0\u2d3f\0\u2d90\0\u0bb5\0\u2de1\0\u2e32\0\u2e83"+
    "\0\u2ed4\0\u041d\0\u2f25\0\u2f76\0\u2fc7\0\u3018\0\u3069\0\u30ba"+
    "\0\u041d\0\u310b\0\u315c\0\u31ad\0\u31fe\0\u041d\0\u324f\0\u32a0"+
    "\0\u32f1\0\u3342\0\u3393\0\u33e4\0\u3435\0\u3486\0\u34d7\0\u3528"+
    "\0\u3579\0\u35ca\0\u361b\0\u041d\0\u041d\0\u041d\0\u366c\0\u041d"+
    "\0\u36bd\0\u370e\0\u375f\0\u37b0\0\u3801\0\u3852\0\u38a3\0\u38f4"+
    "\0\u3945\0\u0bb5\0\u3996\0\u39e7\0\u3a38\0\u3a89\0\u3ada\0\u041d"+
    "\0\u041d\0\u041d\0\u041d\0\u041d\0\u3b2b\0\u041d\0\u041d\0\u041d"+
    "\0\u3b7c\0\u3bcd\0\u3c1e\0\u3c6f\0\u3cc0\0\u0bb5\0\u3d11\0\u3d62"+
    "\0\u3db3\0\u3e04\0\u3e55\0\u0bb5\0\u3ea6\0\u3ef7\0\u3f48\0\u3f99"+
    "\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e\0\u417f\0\u41d0\0\u4221"+
    "\0\u4272\0\u42c3\0\u4314\0\u4365\0\u041d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\51\1\16\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\51\2\57\1\66\1\51\1\67\1\51"+
    "\1\70\1\51\5\57\1\71\1\51\1\72\2\51\1\73"+
    "\1\62\1\74\1\75\1\76\1\77\1\100\1\101\1\51"+
    "\1\102\1\103\2\51\1\104\1\65\1\105\1\0\1\65"+
    "\1\51\1\56\47\106\1\107\1\110\42\106\1\111\1\106"+
    "\3\0\1\106\47\112\2\0\44\112\3\0\1\112\47\113"+
    "\1\114\1\115\44\113\3\0\1\113\44\116\1\117\1\116"+
    "\1\120\1\116\1\121\44\116\3\0\45\116\1\122\1\116"+
    "\1\123\1\116\1\121\44\116\3\0\51\116\1\121\43\116"+
    "\1\124\3\0\50\116\1\16\1\125\43\116\1\126\3\0"+
    "\1\127\50\116\1\121\43\116\1\130\3\0\50\116\1\16"+
    "\1\125\43\116\1\131\3\0\50\116\1\16\1\125\43\116"+
    "\1\132\3\0\51\116\1\121\43\116\1\133\3\0\50\116"+
    "\1\16\1\125\10\116\1\134\33\116\3\0\1\116\122\0"+
    "\1\56\1\135\1\56\1\136\6\56\6\0\2\56\4\0"+
    "\2\56\4\0\4\56\57\0\1\56\1\0\3\56\1\137"+
    "\6\56\6\0\2\56\4\0\2\56\4\0\4\56\57\0"+
    "\1\56\1\0\1\56\1\140\10\56\6\0\2\56\4\0"+
    "\2\56\4\0\4\56\57\0\1\56\1\0\1\56\1\141"+
    "\1\56\1\142\6\56\6\0\2\56\4\0\2\56\4\0"+
    "\4\56\57\0\1\56\1\0\3\56\1\143\6\56\6\0"+
    "\2\56\4\0\2\56\4\0\4\56\57\0\1\56\1\0"+
    "\3\56\1\144\6\56\6\0\2\56\4\0\2\56\4\0"+
    "\4\56\57\0\1\56\1\0\5\56\1\145\4\56\6\0"+
    "\2\56\4\0\2\56\4\0\4\56\57\0\1\56\1\0"+
    "\12\56\6\0\2\56\4\0\2\56\4\0\4\56\57\0"+
    "\1\56\13\0\1\51\1\146\4\51\2\0\3\51\1\147"+
    "\2\0\4\51\4\0\3\51\6\0\5\51\1\150\1\51"+
    "\1\0\6\51\1\151\4\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\3\51\1\153\2\51\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\10\51"+
    "\1\154\2\51\7\0\7\51\1\0\1\155\2\0\1\51"+
    "\14\0\1\156\5\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\4\51\1\157\1\160\2\0"+
    "\2\51\1\161\1\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\1\162\5\51\2\0\1\163\3\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\1\164\5\51"+
    "\2\0\1\165\3\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\10\51\1\166\2\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\2\0\3\56\1\167\6\56\6\0"+
    "\2\56\4\0\2\56\4\0\4\56\57\0\1\56\1\0"+
    "\3\56\1\170\6\56\6\0\2\56\4\0\2\56\4\0"+
    "\4\56\57\0\1\56\13\0\4\51\1\171\1\51\2\0"+
    "\1\51\1\172\1\173\1\164\2\0\1\51\1\174\2\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\1\51\1\175\4\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\6\51\1\176\1\51\1\177\2\51\7\0\3\51"+
    "\1\200\3\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\1\51\1\201\2\51\2\0\2\51\1\202\1\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\1\203\1\204\1\51"+
    "\1\205\2\51\2\0\1\206\3\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\6\51\1\207\4\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\2\0\12\56\6\0"+
    "\2\56\4\0\1\210\1\56\4\0\4\56\5\0\1\62"+
    "\27\0\1\62\1\0\1\62\17\0\1\56\13\0\3\51"+
    "\1\203\2\51\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\1\211\2\51\1\212\2\51\2\0"+
    "\1\213\3\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\10\51\1\214\2\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\10\51"+
    "\1\151\2\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\24\0\1\215\2\0\1\216\1\217\11\0\1\57\1\0"+
    "\1\57\7\0\3\57\3\0\1\220\1\215\5\57\2\221"+
    "\2\222\1\216\70\0\1\223\1\224\64\0\1\62\15\0"+
    "\1\62\140\0\1\63\122\0\1\65\41\0\1\65\2\0"+
    "\1\65\15\0\1\225\1\0\1\226\5\0\1\215\2\0"+
    "\1\216\1\217\11\0\1\57\1\0\1\57\7\0\3\57"+
    "\1\226\2\227\1\220\1\215\5\57\2\221\2\222\1\216"+
    "\37\0\1\51\1\230\4\51\2\0\1\231\3\51\2\0"+
    "\3\51\1\232\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\2\51\1\233\1\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\2\51\1\234\1\51\1\235\1\51"+
    "\2\0\4\51\2\0\3\51\1\236\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\30\0\1\62\104\0\1\237\2\51\1\240\2\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\1\51\1\241\4\51\2\0\1\51\1\203\2\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\1\242\3\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\2\51\1\243"+
    "\1\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\115\0\1\244\53\0"+
    "\1\107\51\0\47\113\2\0\44\113\3\0\1\113\47\0"+
    "\1\114\116\0\1\224\117\0\1\245\123\0\1\116\115\0"+
    "\1\223\120\0\1\246\170\0\1\247\53\0\1\16\165\0"+
    "\1\116\120\0\1\250\120\0\1\251\17\0\6\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\4\51\1\252\2\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\1\51\1\164\2\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\115\0\1\253\17\0"+
    "\6\51\2\0\1\254\3\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\1\51\1\255\1\51"+
    "\1\164\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\1\51\1\256\4\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\5\51\1\257\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\5\51"+
    "\1\203\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\1\51\1\164"+
    "\2\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\1\51\1\260\2\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\3\51\1\261"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\2\51"+
    "\1\262\1\51\2\0\1\263\3\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\3\51\1\264\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\1\51"+
    "\1\265\2\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\1\266\6\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\10\51\1\267\2\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\4\51\1\270"+
    "\1\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\2\51\1\271"+
    "\4\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\6\51\1\272\4\51\7\0\3\51\1\164\3\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\2\51\1\273\4\51\1\0\1\152\2\0\1\51\14\0"+
    "\6\51\2\0\4\51\2\0\1\51\1\274\2\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\2\51\1\275\4\51\1\0\1\152\2\0\1\51\14\0"+
    "\3\51\1\276\2\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\1\51\1\277\4\51\2\0"+
    "\4\51\2\0\3\51\1\300\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\1\51\1\164\4\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\1\301\5\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\6\51\2\0\4\51\2\0\3\51\1\302\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\4\51\1\303\1\51\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\4\51"+
    "\1\304\1\51\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\5\51\1\305\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\1\306\6\51\1\0\1\152\2\0\1\51"+
    "\14\0\2\51\1\307\3\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\1\51"+
    "\1\310\2\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\55\0\1\311\6\0\1\312\1\313\1\314\117\0\1\315"+
    "\1\316\74\0\1\317\11\0\3\317\5\0\5\317\54\0"+
    "\1\215\2\0\1\216\33\0\1\215\5\0\2\221\2\0"+
    "\1\216\100\0\1\320\6\0\1\321\1\322\1\323\34\0"+
    "\1\324\3\0\1\324\33\0\1\325\11\0\3\325\5\0"+
    "\5\325\76\0\1\326\126\0\3\327\6\0\4\327\47\0"+
    "\1\330\1\0\1\330\5\0\1\330\12\0\1\330\10\0"+
    "\4\330\1\0\2\330\2\0\5\330\2\0\3\330\7\0"+
    "\1\330\70\0\2\331\56\0\6\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\10\51\1\332"+
    "\2\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\4\51\1\333\1\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\1\334\5\51\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\1\335\3\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\1\336\1\51"+
    "\1\271\4\51\1\0\1\152\2\0\1\51\14\0\5\51"+
    "\1\164\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\6\51\1\301\4\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\1\337\1\51"+
    "\1\275\1\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\4\51\1\340\1\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\2\51"+
    "\1\341\1\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\1\304\5\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\10\51\1\342"+
    "\2\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\6\51\2\0\1\273\3\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\10\51\1\343\2\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\115\0\1\344\120\0\1\245"+
    "\120\0\1\345\120\0\1\346\17\0\6\51\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\10\51"+
    "\1\347\2\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\115\0\1\350\17\0\6\51\2\0\2\51\1\275\1\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\6\51\1\351\4\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\1\352\3\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\1\51\1\353\2\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\1\354\6\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\10\51\1\203\2\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\10\51\1\355\2\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\4\51\2\0\3\51"+
    "\1\356\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\1\51\1\357"+
    "\4\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\1\360\5\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\1\361\5\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\6\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\10\51\1\362\2\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\4\51\2\0"+
    "\3\51\1\275\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\2\51\1\363\4\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\10\51\1\164\2\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\1\51\1\364\2\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\2\51\1\272\1\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\3\51"+
    "\1\365\2\51\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\1\164"+
    "\6\51\1\0\1\152\2\0\1\51\14\0\1\51\1\366"+
    "\4\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\1\343\3\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\4\51"+
    "\2\0\2\51\1\367\1\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\65\0\1\370\123\0\1\371\117\0\1\372\121\0\1\373"+
    "\117\0\1\374\60\0\1\216\12\0\1\317\1\0\1\317"+
    "\7\0\3\317\3\0\1\375\1\0\5\317\2\0\2\222"+
    "\1\216\110\0\1\376\123\0\1\377\117\0\1\u0100\73\0"+
    "\1\325\11\0\3\325\5\0\5\325\57\0\1\216\12\0"+
    "\1\325\1\0\1\325\7\0\3\325\3\0\1\375\1\0"+
    "\5\325\4\0\1\216\47\0\1\215\2\0\1\216\14\0"+
    "\1\327\7\0\3\327\3\0\1\220\1\215\1\0\4\327"+
    "\2\221\2\0\1\216\42\0\1\330\1\0\1\330\2\0"+
    "\1\215\2\0\1\330\12\0\1\330\1\0\1\330\6\0"+
    "\4\330\1\0\2\330\1\220\1\215\5\330\2\221\3\330"+
    "\7\0\1\330\37\0\1\215\2\0\1\216\14\0\1\331"+
    "\10\0\2\331\3\0\1\220\1\215\5\0\2\221\2\0"+
    "\1\216\37\0\3\51\1\u0101\2\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\5\51\1\164"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\6\51\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\1\u0101\6\51\1\0"+
    "\1\152\2\0\1\51\14\0\4\51\1\u0102\1\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\6\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\10\51\1\u0103\2\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\3\51\1\164"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\1\51\1\u0104\1\151\1\51\2\0\1\u0105\3\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\1\336"+
    "\6\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\1\51\1\164\2\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\10\51\1\164\2\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\4\51\2\0"+
    "\3\51\1\333\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\4\51"+
    "\1\164\1\51\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\1\151"+
    "\6\51\1\0\1\152\2\0\1\51\14\0\1\51\1\343"+
    "\4\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\4\51\1\u0106\1\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\1\u0107\3\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\3\51\1\u0108\2\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\1\51\1\u0109\4\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\6\51\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\6\51\1\u010a\4\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\3\51\1\u010b\2\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\6\51\2\0\1\51\1\u010c\2\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\1\51\1\151\4\51"+
    "\2\0\4\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\6\51\2\0\4\51\2\0\3\51\1\u010d\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\1\304\3\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\4\51\2\0\3\51\1\u010e\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\1\164\5\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\1\333\5\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\7\51\1\0\1\152\2\0\1\51\27\0"+
    "\1\216\45\0\1\216\37\0\6\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\1\51\1\164\5\51\1\0\1\152\2\0\1\51\14\0"+
    "\6\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\5\51\1\164\1\51\1\0"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\2\51\1\151\4\51\1\0\1\152\2\0\1\51\14\0"+
    "\6\51\2\0\1\u010f\3\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\6\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\10\51\1\u0110\2\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\4\51"+
    "\1\347\1\51\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\1\51\1\u0111\4\51\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\6\51"+
    "\2\0\3\51\1\u0112\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\5\51\1\275\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\1\51"+
    "\1\u0113\2\51\2\0\4\51\4\0\3\51\6\0\7\51"+
    "\1\0\13\51\7\0\7\51\1\0\1\152\2\0\1\51"+
    "\14\0\3\51\1\u0114\2\51\2\0\4\51\2\0\4\51"+
    "\4\0\3\51\6\0\7\51\1\0\13\51\7\0\7\51"+
    "\1\0\1\152\2\0\1\51\14\0\6\51\2\0\4\51"+
    "\2\0\3\51\1\u0115\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\4\51\1\u0116\1\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\0"+
    "\1\152\2\0\1\51\14\0\1\51\1\u0117\4\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\7\51\1\0\1\152\2\0\1\51\14\0"+
    "\5\51\1\u0118\2\0\4\51\2\0\4\51\4\0\3\51"+
    "\6\0\7\51\1\0\13\51\7\0\7\51\1\0\1\152"+
    "\2\0\1\51\14\0\3\51\1\u0119\2\51\2\0\4\51"+
    "\2\0\4\51\4\0\3\51\6\0\7\51\1\0\13\51"+
    "\7\0\7\51\1\0\1\152\2\0\1\51\14\0\1\203"+
    "\5\51\2\0\4\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\1\51\1\275\2\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\4\51\2\0\4\51\4\0\3\51\6\0\7\51\1\0"+
    "\13\51\7\0\3\51\1\164\3\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\6\51\1\275\4\51\7\0"+
    "\7\51\1\0\1\152\2\0\1\51\14\0\6\51\2\0"+
    "\1\51\1\264\2\51\2\0\4\51\4\0\3\51\6\0"+
    "\7\51\1\0\13\51\7\0\7\51\1\0\1\152\2\0"+
    "\1\51\14\0\6\51\2\0\4\51\2\0\4\51\4\0"+
    "\3\51\6\0\7\51\1\0\13\51\7\0\7\51\1\u011a"+
    "\1\152\2\0\1\51\14\0\6\51\2\0\4\51\2\0"+
    "\4\51\4\0\3\51\6\0\7\51\1\0\13\51\7\0"+
    "\1\275\6\51\1\0\1\152\2\0\1\51\115\0\1\u011b"+
    "\120\0\1\u011c\120\0\1\u011d\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17334];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\43\1\2\11\4\1\1\11\4\1\4\11"+
    "\5\1\2\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\5\1\1\11\60\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\11\3\0\14\1\1\0\1\11\4\0"+
    "\1\1\1\0\35\1\1\0\1\11\4\0\1\1\1\0"+
    "\1\11\3\0\1\1\1\11\15\1\3\11\1\1\1\11"+
    "\17\1\5\11\1\0\3\11\31\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

// -----------------------------------------------------------------------------
// State stack
// -----------------------------------------------------------------------------

private final Stack<Integer> stateStack = new Stack<Integer>();

/**
 * Pushes new state onto stack and sets parser to begin new state.
 * @param newState New parser state.
 * @return New stack size.
 */
private int pushState(int newState) {
    stateStack.push(yystate());
    yybegin(newState);
    return stateStack.size();
}

/**
 * Pops previous state from stack.
 * @return Previous state.
 */
private int popState() {
    yybegin(stateStack.pop());
    return stateStack.size();
}

// -----------------------------------------------------------------------------
// Indent spaces handler
// -----------------------------------------------------------------------------

private int lastIndentSpaces = 0;
private int indentSpaces = 0;

/**
 * Records last indent spaces and pushes the INDENTER state onto stack.
 */
private void handleIndent() {
    lastIndentSpaces = indentSpaces;
    indentSpaces = 0;
    pushState(INDENTER);
}

// -----------------------------------------------------------------------------
// Stack indenter
// -----------------------------------------------------------------------------

/**
 * Stores column number and increment for each indentation level.
 * This is required as it's not certain each indent is same size.
 */
private class Indent {
    public int Column;
    public int Increment;
}

private final Stack<Indent> indentStack = new Stack<Indent>();
private final Stack<IElementType> dedentStack = new Stack<IElementType>();

/**
 * This method is used to return multiple tokens by stalling the return state transition.
 * @return Next token to be returned to parser.
 */
private IElementType getIndenterToken() {

    // Return from INDENTER state with indent at same level, when length same.
    if (indentSpaces == lastIndentSpaces) {
        popState();
        return NimElementTypes.IND_EQ;
    }

    // Return from INDENTER state with indent at higher level, when length greater.
    if (indentSpaces > lastIndentSpaces) {

        // Length of last indent on stack, if any.
        int lastLength = 0;
        if (indentStack.size() > 0) lastLength = indentStack.peek().Column;

        // Push an entry onto the indenter stack.
        // Note the incremental column positions for indentation.
        Indent indent = new Indent();
        indent.Column = indentSpaces;
        indent.Increment = indentSpaces - lastLength;
        indentStack.push(indent);

        popState();
        return NimElementTypes.INDENT;
    }

    // Handle dedents.
    // Following is where indentSpaces < lastIndentSpaces.

    // Determine difference with previous indentation level.
    Indent lastIndent = indentStack.pop();
    int diff = lastIndent.Column - indentSpaces;

    // Handle error case where dedent is smaller than last indent.
    if (diff < lastIndent.Increment) {
        return TokenType.BAD_CHARACTER;
    }

    dedentStack.push(NimElementTypes.IND_EQ);

    // Add required dedents to stack to be returned.
    while (diff > lastIndent.Increment) {

        // Determine difference with previous indentation level.
        lastIndent = indentStack.pop();
        diff = lastIndent.Column - indentSpaces;

        // Handle error case where dedent is smaller than last indent.
        if (diff < lastIndent.Increment) {
            return TokenType.BAD_CHARACTER;
        }

        dedentStack.push(NimElementTypes.DEDENT);
    }

    lastIndentSpaces = lastIndent.Column;

    popState();
    pushState(DEDENTER);
    return NimElementTypes.DEDENT;
}

private IElementType getDedenterToken() {
    IElementType token = dedentStack.pop();
    if (dedentStack.size() == 0) popState();
    return token;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 89: break;
          case 2: 
            { return NimElementTypes.OP8B;
            } 
            // fall through
          case 90: break;
          case 3: 
            { return NimElementTypes.OP5E;
            } 
            // fall through
          case 91: break;
          case 4: 
            { return NimElementTypes.OPR;
            } 
            // fall through
          case 92: break;
          case 5: 
            { return NimElementTypes.OP8A;
            } 
            // fall through
          case 93: break;
          case 6: 
            { return NimElementTypes.OP9A;
            } 
            // fall through
          case 94: break;
          case 7: 
            { return NimElementTypes.OP9B;
            } 
            // fall through
          case 95: break;
          case 8: 
            { return NimElementTypes.OP2A;
            } 
            // fall through
          case 96: break;
          case 9: 
            { return NimElementTypes.OP2B;
            } 
            // fall through
          case 97: break;
          case 10: 
            { return NimElementTypes.OP2C;
            } 
            // fall through
          case 98: break;
          case 11: 
            { return NimElementTypes.IDENT;
            } 
            // fall through
          case 99: break;
          case 12: 
            { return NimElementTypes.OP5C;
            } 
            // fall through
          case 100: break;
          case 13: 
            { return NimElementTypes.OP7A;
            } 
            // fall through
          case 101: break;
          case 14: 
            { return NimElementTypes.OP9G;
            } 
            // fall through
          case 102: break;
          case 15: 
            { return NimElementTypes.OP10A;
            } 
            // fall through
          case 103: break;
          case 16: 
            { return NimElementTypes.OP10B;
            } 
            // fall through
          case 104: break;
          case 17: 
            { return NimElementTypes.INT_LIT;
            } 
            // fall through
          case 105: break;
          case 18: 
            { pushState(LINE_COMMENT);
            } 
            // fall through
          case 106: break;
          case 19: 
            { return NimElementTypes.BRACKET;
            } 
            // fall through
          case 107: break;
          case 20: 
            { handleIndent(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 108: break;
          case 21: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 109: break;
          case 22: 
            { pushState(CHARACTER_LITERAL);
            } 
            // fall through
          case 110: break;
          case 23: 
            { return NimElementTypes.PARENTHESIS;
            } 
            // fall through
          case 111: break;
          case 24: 
            { return NimElementTypes.C_SEMICOLON;
            } 
            // fall through
          case 112: break;
          case 25: 
            { return NimElementTypes.C_COMMA;
            } 
            // fall through
          case 113: break;
          case 26: 
            { return NimElementTypes.C_GRAVE_ACCENT;
            } 
            // fall through
          case 114: break;
          case 27: 
            { pushState(STRING_LITERAL);
            } 
            // fall through
          case 115: break;
          case 28: 
            { yypushback(1); return getIndenterToken();
            } 
            // fall through
          case 116: break;
          case 29: 
            { indentSpaces = 0;
            } 
            // fall through
          case 117: break;
          case 30: 
            { indentSpaces++;
            } 
            // fall through
          case 118: break;
          case 31: 
            { yypushback(1); return getDedenterToken();
            } 
            // fall through
          case 119: break;
          case 32: 
            { popState(); return NimElementTypes.COMMENT;
            } 
            // fall through
          case 120: break;
          case 33: 
            { 
            } 
            // fall through
          case 121: break;
          case 34: 
            { popState(); return NimElementTypes.STR_LIT;
            } 
            // fall through
          case 122: break;
          case 35: 
            { popState(); return NimElementTypes.RSTR_LIT;
            } 
            // fall through
          case 123: break;
          case 36: 
            { popState(); return NimElementTypes.GENERALIZED_STR_LIT;
            } 
            // fall through
          case 124: break;
          case 37: 
            { popState(); return NimElementTypes.CHAR_LIT;
            } 
            // fall through
          case 125: break;
          case 38: 
            { return NimElementTypes.OP0A;
            } 
            // fall through
          case 126: break;
          case 39: 
            { return NimElementTypes.OP1C;
            } 
            // fall through
          case 127: break;
          case 40: 
            { return NimElementTypes.OP5D;
            } 
            // fall through
          case 128: break;
          case 41: 
            { return NimElementTypes.OP0B;
            } 
            // fall through
          case 129: break;
          case 42: 
            { return NimElementTypes.OP0C;
            } 
            // fall through
          case 130: break;
          case 43: 
            { return NimElementTypes.OP5A;
            } 
            // fall through
          case 131: break;
          case 44: 
            { return NimElementTypes.OP1A;
            } 
            // fall through
          case 132: break;
          case 45: 
            { return NimElementTypes.OP1B;
            } 
            // fall through
          case 133: break;
          case 46: 
            { return NimElementTypes.OP1D;
            } 
            // fall through
          case 134: break;
          case 47: 
            { return NimElementTypes.OP3A;
            } 
            // fall through
          case 135: break;
          case 48: 
            { return NimElementTypes.OP5L;
            } 
            // fall through
          case 136: break;
          case 49: 
            { pushState(GENERALIZED_STRING_LITERAL);
            } 
            // fall through
          case 137: break;
          case 50: 
            { pushState(RAW_STRING_LITERAL);
            } 
            // fall through
          case 138: break;
          case 51: 
            { return NimElementTypes.OP5M;
            } 
            // fall through
          case 139: break;
          case 52: 
            { return NimElementTypes.KEYW;
            } 
            // fall through
          case 140: break;
          case 53: 
            { return NimElementTypes.OP5B;
            } 
            // fall through
          case 141: break;
          case 54: 
            { return NimElementTypes.OP5F;
            } 
            // fall through
          case 142: break;
          case 55: 
            { return NimElementTypes.OP5G;
            } 
            // fall through
          case 143: break;
          case 56: 
            { return NimElementTypes.OP5I;
            } 
            // fall through
          case 144: break;
          case 57: 
            { return NimElementTypes.OP6A;
            } 
            // fall through
          case 145: break;
          case 58: 
            { return NimElementTypes.FLOAT32_LIT;
            } 
            // fall through
          case 146: break;
          case 59: 
            { return NimElementTypes.UINT_LIT;
            } 
            // fall through
          case 147: break;
          case 60: 
            { pushState(BLOCK_COMMENT);
            } 
            // fall through
          case 148: break;
          case 61: 
            { if (popState() == 0) return NimElementTypes.COMMENT;
            } 
            // fall through
          case 149: break;
          case 62: 
            { return NimElementTypes.OP3B;
            } 
            // fall through
          case 150: break;
          case 63: 
            { return NimElementTypes.OP4A;
            } 
            // fall through
          case 151: break;
          case 64: 
            { return NimElementTypes.OP5K;
            } 
            // fall through
          case 152: break;
          case 65: 
            { return NimElementTypes.NIL;
            } 
            // fall through
          case 153: break;
          case 66: 
            { return NimElementTypes.OP9C;
            } 
            // fall through
          case 154: break;
          case 67: 
            { return NimElementTypes.OP9F;
            } 
            // fall through
          case 155: break;
          case 68: 
            { return NimElementTypes.OP9E;
            } 
            // fall through
          case 156: break;
          case 69: 
            { return NimElementTypes.OP9D;
            } 
            // fall through
          case 157: break;
          case 70: 
            { return NimElementTypes.INT8_LIT;
            } 
            // fall through
          case 158: break;
          case 71: 
            { return NimElementTypes.FLOAT_LIT;
            } 
            // fall through
          case 159: break;
          case 72: 
            { return NimElementTypes.UINT8_LIT;
            } 
            // fall through
          case 160: break;
          case 73: 
            { pushState(BLOCK_DOC_COMMENT);
            } 
            // fall through
          case 161: break;
          case 74: 
            { pushState(TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 162: break;
          case 75: 
            { popState(); return NimElementTypes.TRIPLESTR_LIT;
            } 
            // fall through
          case 163: break;
          case 76: 
            { popState(); return NimElementTypes.GENERALIZED_TRIPLESTR_LIT;
            } 
            // fall through
          case 164: break;
          case 77: 
            { pushState(GENERALIZED_TRIPLE_STRING_LITERAL);
            } 
            // fall through
          case 165: break;
          case 78: 
            { return NimElementTypes.BOOL_LIT;
            } 
            // fall through
          case 166: break;
          case 79: 
            { return NimElementTypes.INT16_LIT;
            } 
            // fall through
          case 167: break;
          case 80: 
            { return NimElementTypes.INT64_LIT;
            } 
            // fall through
          case 168: break;
          case 81: 
            { return NimElementTypes.INT32_LIT;
            } 
            // fall through
          case 169: break;
          case 82: 
            { return NimElementTypes.FLOAT64_LIT;
            } 
            // fall through
          case 170: break;
          case 83: 
            { return NimElementTypes.UINT16_LIT;
            } 
            // fall through
          case 171: break;
          case 84: 
            { return NimElementTypes.UINT64_LIT;
            } 
            // fall through
          case 172: break;
          case 85: 
            { return NimElementTypes.UINT32_LIT;
            } 
            // fall through
          case 173: break;
          case 86: 
            { return NimElementTypes.OP5H;
            } 
            // fall through
          case 174: break;
          case 87: 
            { return NimElementTypes.OP5J;
            } 
            // fall through
          case 175: break;
          case 88: 
            { pushState(DISCARD_COMMENT);
            } 
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
