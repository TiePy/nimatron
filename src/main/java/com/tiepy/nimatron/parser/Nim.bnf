/*
 * This file is based on example provided by the IntelliJ Platform SDK DevGuide.
 * Copyright 2000-2020 JetBrains s.r.o. and other contributors.
 * Use of original example source code is governed by the Apache 2.0 license.
 *
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

{
  parserClass="com.tiepy.nimatron.parser.NimParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Nim"
  psiImplClassSuffix="Impl"
  psiPackage="com.tiepy.nimatron.parser"
  psiImplPackage="com.tiepy.nimatron.parser.impl"

  elementTypeHolderClass="com.tiepy.nimatron.parser.NimTypes"
  elementTypeClass="com.tiepy.nimatron.psi.NimElementType"
  tokenTypeClass="com.tiepy.nimatron.psi.NimTokenType"

  tokens = [
    BRACKET="BRACKET"
    SEMICOLON="SEMICOLON"
    COMMA="COMMA"
    GRAVE_ACCENT="GRAVE_ACCENT"
  ]

  psiImplUtilClass="com.tiepy.nimatron.parser.impl.NimPsiImplUtil"
}

//module = stmt ^* (';' / IND{=})
module ::= IND_EQ* stmts? ';'? IND_EQ*
stmts ::= stmt ((';' | IND_EQ) stmt)*

//comma = ',' COMMENT?
//semicolon = ';' COMMENT?
//colon = ':' COMMENT?
//colcom = ':' COMMENT?

//operator =  OP0 | OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 | OP8 | OP9
//         | 'or' | 'xor' | 'and'
//         | 'is' | 'isnot' | 'in' | 'notin' | 'of' | 'as' | 'from' |
//         | 'div' | 'mod' | 'shl' | 'shr' | 'not' | 'static' | '..'
operator ::= OP0|OP1|OP2|OP3|OP4|OP5|OP6|OP7|OP8|OP9|'from'|'static'|'..'

//prefixOperator = operator

//optInd = COMMENT? IND?
termInd ::= DEDENT | <<eof>>
meta optInd ::= <<RULE>> | (INDENT <<RULE>> termInd)

//optPar = (IND{>} | IND{=})?

//simpleExpr = arrowExpr (OP0 optInd arrowExpr)* pragma?
//arrowExpr = assignExpr (OP1 optInd assignExpr)*
//assignExpr = orExpr (OP2 optInd orExpr)*
//orExpr = andExpr (OP3 optInd andExpr)*
//andExpr = cmpExpr (OP4 optInd cmpExpr)*
//cmpExpr = sliceExpr (OP5 optInd sliceExpr)*
//sliceExpr = ampExpr (OP6 optInd ampExpr)*
//ampExpr = plusExpr (OP7 optInd plusExpr)*
//plusExpr = mulExpr (OP8 optInd mulExpr)*
//mulExpr = dollarExpr (OP9 optInd dollarExpr)*
//dollarExpr = primary (OP10 optInd primary)*
op ::= OP0|OP1/*|OP2*/|OP3|OP4|OP5|OP6|OP7|OP8|OP9|OP10 // TODO: Reconsider OP2 which was removed here.
simpleExpr ::= primary (op <<optInd primary>>)* pragma?

//symbol = '`' (KEYW|IDENT|literal|(operator|'('|')'|'['|']'|'{'|'}'|'=')+)+ '`'|IDENT|KEYW
symbol ::= '`' (KEYW|IDENT|literal|operator|'('|')'|'['|']'|'{'|'}'|'=')+ '`'|IDENT|KEYW

//exprColonEqExpr = expr (':'|'=' expr)?
exprColonEqExpr ::= expr (':'|'=' expr)?

//exprList = expr ^+ comma
exprs ::= expr (',' expr)*

//exprColonEqExprList = exprColonEqExpr (comma exprColonEqExpr)* (comma)?
exprColonEqExprs ::= exprColonEqExpr (',' exprColonEqExpr)* ','?

//dotExpr = expr '.' optInd (symbol | '[:' exprList ']')

//explicitGenericInstantiation = '[:' exprList ']' ( '(' exprColonEqExpr ')' )?

//qualifiedIdent = symbol ('.' optInd symbol)?
qualifiedIdent ::= symbol ('.' <<optInd symbol>>)?

//setOrTableConstr = '{' ((exprColonEqExpr comma)* | ':' ) '}'
setOrTableConstr ::= '{' ((exprColonEqExpr ',')+ | ':') '}'

//castExpr = 'cast' '[' optInd typeDesc optPar ']' '(' optInd expr optPar ')'
castExpr ::= 'cast' '[' <<optInd typeDesc>> <<optInd (']')>> '(' <<optInd expr>> <<optInd (')')>> {pin=1}

//parKeyw = 'discard' | 'include' | 'if' | 'while' | 'case' | 'try'
//        | 'finally' | 'except' | 'for' | 'block' | 'const' | 'let'
//        | 'when' | 'var' | 'mixin'

//par = '(' optInd
//          ( &parKeyw complexOrSimpleStmt ^+ ';'
//          | ';' complexOrSimpleStmt ^+ ';'
//          | pragmaStmt
//          | simpleExpr ( ('=' expr (';' complexOrSimpleStmt ^+ ';' )? )
//                       | (':' expr (',' exprColonEqExpr     ^+ ',' )? ) ) )
//          optPar ')'
par ::= '(' <<optInd par1>> <<optInd (')')>>
par1 ::= par2
       | par3
       | pragmaStmt
       | par4
par2 ::= complexOrSimpleStmt (';' complexOrSimpleStmt)* // TODO: Consider &parKeyw that was removed from here.
par3 ::= ';' complexOrSimpleStmt (';' complexOrSimpleStmt)*
par4 ::= simpleExpr (par5 | par6)
par5 ::= '=' expr (';' complexOrSimpleStmt (';' complexOrSimpleStmt)*)?
par6 ::= ':' expr (',' exprColonEqExpr (',' exprColonEqExpr)*)?

//literal = | INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT
//          | UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT
//          | FLOAT_LIT | FLOAT32_LIT | FLOAT64_LIT
//          | STR_LIT | RSTR_LIT | TRIPLESTR_LIT
//          | CHAR_LIT
//          | NIL
literal ::= INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT
          | UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT
          | FLOAT_LIT | FLOAT32_LIT | FLOAT64_LIT
          | STR_LIT | RSTR_LIT | TRIPLESTR_LIT
          | CHAR_LIT
          | BOOL_LIT // NOTE: BOOL_LIT was added here.
          | NIL

//generalizedLit = GENERALIZED_STR_LIT | GENERALIZED_TRIPLESTR_LIT
generalizedLit ::= GENERALIZED_STR_LIT | GENERALIZED_TRIPLESTR_LIT

//identOrLiteral = generalizedLit | symbol | literal
//               | par | arrayConstr | setOrTableConstr
//               | castExpr
identOrLiteral ::= generalizedLit | symbol | literal
                 | par | arrayConstr | setOrTableConstr
                 | castExpr

//tupleConstr = '(' optInd (exprColonEqExpr comma?)* optPar ')'

//arrayConstr = '[' optInd (exprColonEqExpr comma?)* optPar ']'
arrayConstr ::= '[' <<optInd ((exprColonEqExpr ','?)*)>> <<optInd (']')>>

//primarySuffix = '(' (exprColonEqExpr comma?)* ')'
//      | '.' optInd symbol generalizedLit?
//      | '[' optInd exprColonEqExprList optPar ']'
//      | '{' optInd exprColonEqExprList optPar '}'
//      | &( '`'|IDENT|literal|'cast'|'addr'|'type') expr # command syntax
primarySuffix ::= primarySuffix1
                | primarySuffix2
                | primarySuffix3
                | primarySuffix4
                | primarySuffix5
primarySuffix1 ::= '(' <<optInd ((exprColonEqExpr ','?)*)>> ')'
primarySuffix2 ::= '.' <<optInd (symbol generalizedLit?)>>
primarySuffix3 ::= '[' <<optInd exprColonEqExprs>> <<optInd (']')>>
primarySuffix4 ::= '{' <<optInd exprColonEqExprs>> <<optInd ('}')>>
primarySuffix5 ::= /* &('`'|IDENT|literal|'cast'|'addr'|'type') */ <<optInd exprs>> // command syntax
// TODO: Consider the lookahead operator that was removed from the last rule here.
// NOTE: That in last rule above, this has been changed from 'expr' to '<<optInd exprs>>'. This is currently required
// to support command syntax with multiple args, like echo "A", "B"

//condExpr = expr colcom expr optInd
//        ('elif' expr colcom expr optInd)*
//         'else' colcom expr
condExpr ::= expr ':' <<optInd expr>>
          ('elif' expr ':' <<optInd expr>>)*
           'else' ':' expr

//ifExpr = 'if' condExpr
ifExpr ::= 'if' condExpr {pin=1}

//whenExpr = 'when' condExpr
whenExpr ::= 'when' condExpr {pin=1}

//pragma = '{.' optInd (exprColonEqExpr comma?)* optPar ('.}' | '}')
pragma ::= '{.' <<optInd ((exprColonEqExpr ','?)*)>> <<optInd ('.}'|'}')>> {pin=1}

//identVis = symbol OPR?  # postfix position
identVis ::= symbol OPR? // postfix position

//identVisDot = symbol '.' optInd symbol OPR?
identVisDot ::= symbol '.' <<optInd symbol>> OPR?

//identWithPragma = identVis pragma?
identWithPragma ::= identVis pragma?

//identWithPragmaDot = identVisDot pragma?
identWithPragmaDot ::= identVisDot pragma?

//declColonEquals = identWithPragma (comma identWithPragma)* comma?
//                  (':' optInd typeDesc)? ('=' optInd expr)?
declColonEquals ::= identWithPragma (',' identWithPragma)* ','?
                    (':' <<optInd typeDesc>>)? ('=' <<optInd expr>>)?

//identColonEquals = IDENT (comma IDENT)* comma?
//     (':' optInd typeDesc)? ('=' optInd expr)?)
identColonEquals ::= IDENT (',' IDENT)* ','?
     (':' <<optInd typeDesc>>)? ('=' <<optInd expr>>)?

//inlTupleDecl = 'tuple'
//    '[' optInd  (identColonEquals (comma/semicolon)?)*  optPar ']'

//extTupleDecl = 'tuple'
//    COMMENT? (IND{>} identColonEquals (IND{=} identColonEquals)*)?

//tupleClass = 'tuple'

//paramList = '(' declColonEquals ^* (comma/semicolon) ')'
params ::= '(' (declColonEquals ((','|';') declColonEquals)*)? ')' {pin=1}

//paramListArrow = paramList? ('->' optInd typeDesc)?
paramsArrow ::= params? ('->' <<optInd typeDesc>>)?

//paramListColon = paramList? (':' optInd typeDesc)?
paramsColon ::= params? (':' <<optInd typeDesc>>)?

//doBlock = 'do' paramListArrow pragma? colcom stmt
doBlock ::= 'do' paramsArrow pragma? ':' stmt {pin=1}

//procExpr = 'proc' paramListColon pragma? ('=' COMMENT? stmt)?

//distinct = 'distinct' optInd typeDesc

//forStmt = 'for' (identWithPragma ^+ comma) 'in' expr colcom stmt
forStmt ::= 'for' (identWithPragma (',' identWithPragma)*) 'in' expr ':' stmt {pin=1}

//forExpr = forStmt

//expr = (blockExpr
//      | ifExpr
//      | whenExpr
//      | caseStmt
//      | forExpr
//      | tryExpr)
//      / simpleExpr
expr ::= blockExpr
       | ifExpr
       | whenExpr
       | caseStmt
       | forStmt
       | tryExpr
       | simpleExpr

//typeKeyw = 'var' | 'out' | 'ref' | 'ptr' | 'shared' | 'tuple'
//         | 'proc' | 'iterator' | 'distinct' | 'object' | 'enum'
typeKeyw ::= 'var' | 'out' | 'ref' | 'ptr' | 'shared' | 'tuple'
           | 'proc' | 'iterator' | 'distinct' | 'object' | 'enum'

//primary = typeKeyw optInd typeDesc
//        /  prefixOperator* identOrLiteral primarySuffix*
//        / 'bind' primary
primary ::= primary1
          | primary2
          | primary3
primary1 ::= typeKeyw <<optInd typeDesc>> {pin=1}
primary2 ::= /* operator* */ identOrLiteral primarySuffix* // TODO: Re-consider prefixOperator that was removed here.
primary3 ::= 'bind' primary {pin=1}

//typeDesc = simpleExpr ('not' expr)?
typeDesc ::= simpleExpr ('not' expr)?

//typeDefAux = simpleExpr ('not' expr)?
//           | 'concept' typeClass
typeDefAux ::= simpleExpr ('not' expr)?
             | 'concept' typeClass

//postExprBlocks = ':' stmt? ( IND{=} doBlock
//                           | IND{=} 'of' exprList ':' stmt
//                           | IND{=} 'elif' expr ':' stmt
//                           | IND{=} 'except' exprList ':' stmt
//                           | IND{=} 'else' ':' stmt )*
postExprBlocks ::= ':' stmt? ( postExprBlocks1
                             | postExprBlocks2
                             | postExprBlocks3
                             | postExprBlocks4
                             | postExprBlocks5 )*
postExprBlocks1 ::= IND_EQ doBlock
postExprBlocks2 ::= IND_EQ 'of' exprs ':' stmt
postExprBlocks3 ::= IND_EQ 'elif' expr ':' stmt
postExprBlocks4 ::= IND_EQ 'except' exprs ':' stmt
postExprBlocks5 ::= IND_EQ 'else' ':' stmt

//exprStmt = simpleExpr
//         (( '=' optInd expr colonBody? )
//         / ( expr ^+ comma
//             postExprBlocks
//           ))?
exprStmt ::= simpleExpr (exprStmt1 | exprStmt2)?
exprStmt1 ::= '=' <<optInd expr>> colonBody? {pin=1}
exprStmt2 ::= expr (',' expr)* postExprBlocks

//importStmt = 'import' optInd expr
//              ((comma expr)*
//              / 'except' optInd (expr ^+ comma))
importStmt ::= 'import' <<optInd expr>> ((',' expr)+ | importStmt1) {pin=1}
importStmt1 ::= 'except' <<optInd (expr (',' expr)*)>> {pin=1}

//exportStmt = 'export' optInd expr
//              ((comma expr)*
//              / 'except' optInd (expr ^+ comma))
exportStmt ::= 'export' <<optInd expr>> ((',' expr)+ | exportStmt1) {pin=1}
exportStmt1 ::= 'except' <<optInd (expr (',' expr)*)>> {pin=1}

//includeStmt = 'include' optInd expr ^+ comma
includeStmt ::= 'include' <<optInd expr>> (',' expr)* {pin=1}

//fromStmt = 'from' expr 'import' optInd expr (comma expr)*
fromStmt ::= 'from' expr 'import' <<optInd expr>> (',' expr)* {pin=1}

//returnStmt = 'return' optInd expr?
returnStmt ::= 'return' <<optInd expr>>? {pin=1}

//raiseStmt = 'raise' optInd expr?
raiseStmt ::= 'raise' <<optInd expr>>? {pin=1}

//yieldStmt = 'yield' optInd expr?
yieldStmt ::= 'yield' <<optInd expr>>? {pin=1}

//discardStmt = 'discard' optInd expr?
discardStmt ::= 'discard' <<optInd expr>>? {pin=1}

//breakStmt = 'break' optInd expr?
breakStmt ::= 'break' <<optInd expr>>? {pin=1}

//continueStmt = 'break' optInd expr?
continueStmt ::= 'break' <<optInd expr>>? {pin=1}

//condStmt = expr colcom stmt COMMENT?
//           (IND{=} 'elif' expr colcom stmt)*
//           (IND{=} 'else' colcom stmt)?
condStmt ::= expr ':' <<optInd stmts>>
             (IND_EQ 'elif' expr ':' <<optInd stmts>>)*
             (IND_EQ 'else' ':' <<optInd stmts>>)?

//ifStmt = 'if' condStmt
ifStmt ::= 'if' condStmt {pin=1}

//whenStmt = 'when' condStmt
whenStmt ::= 'when' condStmt {pin=1}

//whileStmt = 'while' expr colcom stmt
whileStmt ::= 'while' expr ':' stmt {pin=1}

//ofBranch = 'of' exprList colcom stmt
ofBranch ::= 'of' exprs ':' stmt {pin=1}

//ofBranches = ofBranch (IND{=} ofBranch)*
//                      (IND{=} 'elif' expr colcom stmt)*
//                      (IND{=} 'else' colcom stmt)?
ofBranches ::= ofBranch (IND_EQ ofBranch)*
                        (IND_EQ 'elif' expr ':' stmt)*
                        (IND_EQ 'else' ':' stmt)?

//caseStmt = 'case' expr ':'? COMMENT?
//            (IND{>} ofBranches DED
//            | IND{=} ofBranches)
caseStmt ::= 'case' expr ':'? (caseStmt1 | caseStmt2) {pin=1}
caseStmt1 ::= INDENT ofBranches DEDENT
caseStmt2 ::= IND_EQ ofBranches

//tryStmt = 'try' colcom stmt &(IND{=}? 'except'|'finally')
//           (IND{=}? 'except' exprList colcom stmt)*
//           (IND{=}? 'finally' colcom stmt)?
tryStmt ::= 'try' ':' stmt
             (IND_EQ? 'except' exprs ':' stmt)*
             (IND_EQ? 'finally' ':' stmt)? {pin=1}

//tryExpr = 'try' colcom stmt &(optInd 'except'|'finally')
//           (optInd 'except' exprList colcom stmt)*
//           (optInd 'finally' colcom stmt)?
tryExpr ::= 'try' ':' stmt
             (<<optInd ('except' exprs ':' stmt)>>)*
             (<<optInd ('finally' ':' stmt)>>)? {pin=1}

//exceptBlock = 'except' colcom stmt

//blockStmt = 'block' symbol? colcom stmt
blockStmt ::= 'block' symbol? ':' stmt {pin=1}

//blockExpr = 'block' symbol? colcom stmt
blockExpr ::= 'block' symbol? ':' stmt {pin=1}

//staticStmt = 'static' colcom stmt
staticStmt ::= 'static' ':' stmt {pin=1}

//deferStmt = 'defer' colcom stmt
deferStmt ::= 'defer' ':' stmt {pin=1}

//asmStmt = 'asm' pragma? (STR_LIT | RSTR_LIT | TRIPLESTR_LIT)
asmStmt ::= 'asm' pragma? (STR_LIT|RSTR_LIT|TRIPLESTR_LIT) {pin=1}

//genericParam = symbol (comma symbol)* (colon expr)? ('=' optInd expr)?
genericParam ::= symbol (',' symbol)* (':' expr)? ('=' <<optInd expr>>)?

//genericParamList = '[' optInd
//  genericParam ^* (comma/semicolon) optPar ']'
genericParams ::= '[' <<optInd
  ((genericParam ((','|';') genericParam)*)?)>> <<optInd (']')>> {pin=1}

//pattern = '{' stmt '}'
pattern ::= '{' stmt '}' {pin=1}

//indAndComment = (IND{>} COMMENT)? | COMMENT?

//routine = optInd identVis pattern? genericParamList?
//  paramListColon pragma? ('=' COMMENT? stmt)? indAndComment
routine ::= <<optInd (identVis pattern? genericParams?
  paramsColon pragma? ('=' stmt)?)>>

//commentStmt = COMMENT

//section(RULE) = COMMENT? RULE / (IND{>} (RULE / COMMENT)^+IND{=} DED)
meta section ::= <<RULE>> | (INDENT <<RULE>>? (IND_EQ <<RULE>>?)* termInd)

//objectWhen = 'when' expr colcom objectPart COMMENT?
//            ('elif' expr colcom objectPart COMMENT?)*
//            ('else' colcom objectPart COMMENT?)?

//objectBranch = 'of' exprList colcom objectPart

//objectBranches = objectBranch (IND{=} objectBranch)*
//                      (IND{=} 'elif' expr colcom objectPart)*
//                      (IND{=} 'else' colcom objectPart)?

//objectCase = 'case' identWithPragma ':' typeDesc ':'? COMMENT?
//            (IND{>} objectBranches DED
//            | IND{=} objectBranches)

//objectPart = IND{>} objectPart^+IND{=} DED
//           / objectWhen / objectCase / 'nil' / 'discard' / declColonEquals

//object = 'object' pragma? ('of' typeDesc)? COMMENT? objectPart

//typeClassParam = ('var' | 'out')? symbol
typeClassParam ::= ('var'|'out')? symbol {pin=1}

//typeClass = typeClassParam ^* ',' (pragma)? ('of' typeDesc ^* ',')? &IND{>} stmt
typeClass ::= (typeClassParam (',' typeClassParam)*)? pragma? ('of' (typeDesc (',' typeDesc)*)?)?

//typeDef = identWithPragmaDot genericParamList? '=' optInd typeDefAux
//            indAndComment? / identVisDot genericParamList? pragma '=' optInd typeDefAux
//            indAndComment?
typeDef ::= identWithPragmaDot genericParams? '=' <<optInd typeDefAux>>
            identVisDot genericParams? pragma '=' <<optInd typeDefAux>>

//varTuple = '(' optInd identWithPragma ^+ comma optPar ')' '=' optInd expr
varTuple ::= '(' <<optInd (identWithPragma (',' identWithPragma)*)>> <<optInd (')')>> '=' <<optInd expr>> {pin=1}

//colonBody = colcom stmt postExprBlocks?
colonBody ::= ':' stmt postExprBlocks? {pin=1}

//variable = (varTuple / identColonEquals) colonBody? indAndComment
variable ::= (varTuple|identColonEquals) colonBody?

//constant = (varTuple / identWithPragma) (colon typeDesc)? '=' optInd expr indAndComment
constant ::= (varTuple|identWithPragma) (':' typeDesc)? '=' <<optInd expr>>

//bindStmt = 'bind' optInd qualifiedIdent ^+ comma
bindStmt ::= 'bind' <<optInd (qualifiedIdent (',' qualifiedIdent)*)>> {pin=1}

//mixinStmt = 'mixin' optInd qualifiedIdent ^+ comma
mixinStmt ::= 'mixin' <<optInd (qualifiedIdent (',' qualifiedIdent)*)>> {pin=1}

//pragmaStmt = pragma (':' COMMENT? stmt)?
pragmaStmt ::= pragma (':' stmt)?

//simpleStmt = ((returnStmt | raiseStmt | yieldStmt | discardStmt | breakStmt
//           | continueStmt | pragmaStmt | importStmt | exportStmt | fromStmt
//           | includeStmt | commentStmt) / exprStmt) COMMENT?
simpleStmt ::= returnStmt | raiseStmt | yieldStmt | discardStmt | breakStmt
             | continueStmt | pragmaStmt | importStmt | exportStmt | fromStmt
             | includeStmt | exprStmt

//complexOrSimpleStmt = (ifStmt | whenStmt | whileStmt
//                    | tryStmt | forStmt
//                    | blockStmt | staticStmt | deferStmt | asmStmt
//                    | 'proc' routine
//                    | 'func' routine
//                    | 'method' routine
//                    | 'iterator' routine
//                    | 'macro' routine
//                    | 'template' routine
//                    | 'converter' routine
//                    | 'type' section(typeDef)
//                    | 'const' section(constant)
//                    | ('let' | 'var' | 'using') section(variable)
//                    | bindStmt | mixinStmt)
//                    / simpleStmt
complexOrSimpleStmt ::= ifStmt
                      | whenStmt
                      | whileStmt
                      | tryStmt
                      | forStmt
                      | blockStmt
                      | staticStmt
                      | deferStmt
                      | asmStmt
                      | procStmt
                      | funcStmt
                      | methodStmt
                      | iterStmt
                      | macroStmt
                      | templateStmt
                      | converterStmt
                      | typeStmt
                      | constStmt
                      | varStmt
                      | bindStmt
                      | mixinStmt
                      | simpleStmt
procStmt ::= 'proc' routine {pin=1}
funcStmt ::= 'func' routine {pin=1}
methodStmt ::= 'method' routine {pin=1}
iterStmt ::= 'iterator' routine {pin=1}
macroStmt ::= 'macro' routine {pin=1}
templateStmt ::= 'template' routine {pin=1}
converterStmt ::= 'converter' routine {pin=1}
typeStmt ::= 'type' <<section typeDef>> {pin=1}
constStmt ::= 'const' <<section constant>> {pin=1}
varStmt ::= ('let'|'var'|'using') <<section variable>> {pin=1}

//stmt = (IND{>} complexOrSimpleStmt^+(IND{=} / ';') DED) / simpleStmt ^+ ';'
stmt ::= complexOrSimpleStmt | simpleStmt
