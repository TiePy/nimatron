/*
 * Copyright 2020 TiePy Ltd. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of Nimatron, a Nim plug-in for IDEA platform IDEs.
 *
 * Nimatron is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.  TiePy Ltd designates this
 * particular file as subject to the "Classpath" exception as provided
 * by TiePy Ltd in the LICENSE file that accompanied this code.
 *
 * Nimatron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Nimatron.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please contact TiePy Ltd, 19 Lyall Way, Laurencekirk, AB30 1FU, UK
 * or visit www.tiepy.com if you need additional information or have any
 * questions.
 */

{
    parserClass="com.tiepy.nimatron.psi.parser.NimParser"

    implements="com.tiepy.nimatron.psi.NimElement"
    extends="com.tiepy.nimatron.psi.impl.NimElementImpl"

    psiClassPrefix="Nim"
    psiImplClassSuffix="Impl"
    psiPackage="com.tiepy.nimatron.psi"
    psiImplPackage="com.tiepy.nimatron.psi.impl"

    parserUtilClass="com.tiepy.nimatron.manualParsing.NimParserUtil"

    elementTypeHolderClass="com.tiepy.nimatron.psi.NimElementTypes"
    elementTypeClass="com.tiepy.nimatron.psi.NimElementType"
    tokenTypeClass="com.tiepy.nimatron.psi.NimTokenType"

    implements("namedRoutine")="com.tiepy.nimatron.psi.NimNamedElement"
    mixin("namedRoutine")="com.tiepy.nimatron.psi.impl.NimNamedElementImpl"

    tokens = [
        COMMENT="COMMENT"
        NOTATION="NOTATION"
    ]
}

//module = stmt ^* (';' / IND{=})
module ::= ind_eq* (stmt ';'?)? ind_eq*

ind_eq ::= IND_EQX | IND_EQ0
dedent ::= DEDENTX | DEDENT0
private termInd ::= dedent | <<eof>>

//comma = ',' COMMENT?
comma ::= ',' COMMENT?

//semicolon = ';' COMMENT?
semicolon ::= ';' COMMENT?

//colcom = ':' COMMENT?
colcom ::= ':' COMMENT?

//colon = ':' COMMENT?
colon ::= ':' COMMENT?

//operator =  OP0 | OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 | OP8 | OP9
//         | 'or' | 'xor' | 'and'
//         | 'is' | 'isnot' | 'in' | 'notin' | 'of' | 'as' | 'from' |
//         | 'div' | 'mod' | 'shl' | 'shr' | 'not' | 'static' | '..'
operator ::= operator1
private operator1 ::= op0 | op1 | op2 | op3 | op4 | op5 | op6 | op7 | op8 | op9
           | 'from' | 'static' // NOTE: Keywords included in o1-op9 removed.

private op0 ::= OP0
private op1 ::= OP1
private op2 ::= OP2
private op3 ::= OP3 | 'or' | 'xor'
private op4 ::= OP4 | 'and'
private op5 ::= OP5 | 'in' | 'notin' | 'is' | 'isnot' | 'not' | 'of' | 'as'
private op6 ::= OP6
private op7 ::= OP7
private op8 ::= OP8
private op9 ::= OP9 | 'div' | 'mod' | 'shl' | 'shr'
//private op10 ::= OP10

private oprCombo ::= OP0|OP1|OP2|OP3|OP4|OP5|OP6|OP7|OP8|OP9|OP10|OPR

//prefixOperator = operator
prefixOperator ::= operator

//optInd = COMMENT? IND?
meta optInd ::= <<RULE>> | (INDENT COMMENT? <<RULE>>? (ind_eq <<RULE>>?)* termInd)

//optPar = (IND{>} | IND{=})?
optPar ::= (INDENT | ind_eq)?

//simpleExpr = arrowExpr (OP0 optInd arrowExpr)* pragma?
//arrowExpr = assignExpr (OP1 optInd assignExpr)*
//assignExpr = orExpr (OP2 optInd orExpr)*
//orExpr = andExpr (OP3 optInd andExpr)*
//andExpr = cmpExpr (OP4 optInd cmpExpr)*
//cmpExpr = sliceExpr (OP5 optInd sliceExpr)*
//sliceExpr = ampExpr (OP6 optInd ampExpr)*
//ampExpr = plusExpr (OP7 optInd plusExpr)*
//plusExpr = mulExpr (OP8 optInd mulExpr)*
//mulExpr = dollarExpr (OP9 optInd dollarExpr)*
//dollarExpr = primary (OP10 optInd primary)*
simpleExpr ::= arrowExpr (OP0 <<optInd arrowExpr>>)* /*pragma?*/
private arrowExpr ::= assignExpr (OP1 <<optInd assignExpr>>)*
private assignExpr ::= orExpr (OP2 <<optInd orExpr>>)*
private orExpr ::= andExpr (OP3 <<optInd andExpr>>)*
private andExpr ::= cmpExpr (OP4 <<optInd cmpExpr>>)*
private cmpExpr ::= sliceExpr (OP5 <<optInd sliceExpr>>)*
private sliceExpr ::= ampExpr (OP6 <<optInd ampExpr>>)*
private ampExpr ::= plusExpr (OP7 <<optInd plusExpr>>)*
private plusExpr ::= mulExpr (OP8 <<optInd mulExpr>>)*
private mulExpr ::= dollarExpr (OP9 <<optInd dollarExpr>>)*
private dollarExpr ::= primary (OP10 <<optInd primary>>)*

//symbol = '`' (KEYW|IDENT|literal|(operator|'('|')'|'['|']'|'{'|'}'|'=')+)+ '`'|IDENT|KEYW
symbol ::= symbol1
private symbol1 ::= symbol2|IDENT|KEYW
private symbol2 ::= '`' symbol3+ '`'
private symbol3 ::= KEYW|IDENT|literal|(operator|'('|')'|'['|']'|'{'|'}'|'=')+

//exprColonEqExpr = expr (':'|'=' expr)?
exprColonEqExpr ::= expr (exprColonEqExpr1 expr)?
private exprColonEqExpr1 ::= ':'|'='

//exprList = expr ^+ comma
exprs ::= expr (comma expr)*

//exprColonEqExprList = exprColonEqExpr (comma exprColonEqExpr)* comma?
exprColonEqExprs ::= exprColonEqExpr (comma exprColonEqExpr)* comma?

//dotExpr = expr '.' optInd (symbol | '[:' exprList ']')

//explicitGenericInstantiation = '[:' exprList ']' ( '(' exprColonEqExpr ')' )?

//qualifiedIdent = symbol ('.' optInd symbol)?
qualifiedIdent ::= symbol ('.' <<optInd symbol>>)?

//setOrTableConstr = '{' ((exprColonEqExpr comma)* | ':' ) '}'
setOrTableConstr ::= '{' setOrTableConstr1 '}'
private setOrTableConstr1 ::= ((exprColonEqExpr comma)+ | ':')?  // NOTE: Changed '*' to '+' + '?'

//castExpr = 'cast' '[' optInd typeDesc optPar ']' '(' optInd expr optPar ')'
castExpr ::= 'cast' '[' <<optInd typeDesc>> optPar ']' '(' <<optInd expr>> optPar ')'

//parKeyw = 'discard' | 'include' | 'if' | 'while' | 'case' | 'try'
//        | 'finally' | 'except' | 'for' | 'block' | 'const' | 'let'
//        | 'when' | 'var' | 'mixin'
//parKeyw ::= parKeyw1
//private parKeyw1 ::= 'discard' | 'include' | 'if' | 'while' | 'case' | 'try'
//          | 'finally' | 'except' | 'for' | 'block' | 'const' | 'let'
//          | 'when' | 'var' | 'mixin'

//par = '(' optInd
//          ( &parKeyw complexOrSimpleStmt ^+ ';'
//          | ';' complexOrSimpleStmt ^+ ';'
//          | pragmaStmt
//          | simpleExpr ( ('=' expr (';' complexOrSimpleStmt ^+ ';' )? )
//                       | (':' expr (',' exprColonEqExpr     ^+ ',' )? ) ) )
//          optPar ')'
par ::= '(' <<optInd par1>> optPar ')'
private par1 ::= par2 | par3 | pragmaStmt | par4
private par2 ::= /*&parKeyw*/ complexOrSimpleStmt (';' complexOrSimpleStmt)*
private par3 ::= ';' complexOrSimpleStmt (';' complexOrSimpleStmt)*
private par4 ::= simpleExpr (par5 | par6)
private par5 ::= '=' expr (';' complexOrSimpleStmt (';' complexOrSimpleStmt)*)?
private par6 ::= ':' expr (',' exprColonEqExpr (',' exprColonEqExpr)*)?

//literal = | INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT
//          | UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT
//          | FLOAT_LIT | FLOAT32_LIT | FLOAT64_LIT
//          | STR_LIT | RSTR_LIT | TRIPLESTR_LIT
//          | CHAR_LIT
//          | NIL
literal ::= literal1
private literal1 ::= NUM_LIT | STR_LIT | CHAR_LIT | BOOL_LIT | 'nil'
// NOTE: Reduced number of tokens. Added BOOL_LIT token.

//generalizedLit = GENERALIZED_STR_LIT | GENERALIZED_TRIPLESTR_LIT
generalizedLit ::= GENERALIZED_STR_LIT // NOTE: Reduced number of tokens.

//identOrLiteral = generalizedLit | symbol | literal
//               | par | arrayConstr | setOrTableConstr
//               | castExpr
identOrLiteral ::= identOrLiteral1
private identOrLiteral1 ::= generalizedLit | symbol | literal
                          | par | arrayConstr | setOrTableConstr
                          | castExpr

//tupleConstr = '(' optInd (exprColonEqExpr comma?)* optPar ')'

//arrayConstr = '[' optInd (exprColonEqExpr comma?)* optPar ']'
arrayConstr ::= '@'? '[' (<<optInd (exprColonEqExpr comma?)>>)* optPar ']'
// NOTE: Added optional sequence operator.

//primarySuffix = '(' (exprColonEqExpr comma?)* ')'
//      | '.' optInd symbol generalizedLit?
//      | '[' optInd exprColonEqExprList optPar ']'
//      | '{' optInd exprColonEqExprList optPar '}'
//      | &( '`'|IDENT|literal|'cast'|'addr'|'type') expr # command syntax
primarySuffix ::= primarySuffix0
private primarySuffix0 ::= primarySuffix1
                         | primarySuffix2
                         | primarySuffix3
                         | primarySuffix4
                         | primarySuffix5
private primarySuffix1 ::= '(' (exprColonEqExpr comma?)* ')'
private primarySuffix2 ::= '.' <<optInd (symbol generalizedLit?)>>
private primarySuffix3 ::= '[' (<<optInd exprColonEqExprs>>)? optPar ']'
private primarySuffix4 ::= '{' <<optInd exprColonEqExprs>> optPar '}'
private primarySuffix5 ::= &('`'|IDENT|literal|'cast'|'addr'|'type') exprs // command syntax

//condExpr = expr colcom expr optInd
//        ('elif' expr colcom expr optInd)*
//         'else' colcom expr
// TODO: Consider how to apply optInd in this rule.
condExpr ::= expr colcom expr condExpr1* condExpr2
private condExpr1 ::= 'elif' expr colcom expr
private condExpr2 ::= 'else' colcom expr

//ifExpr = 'if' condExpr
ifExpr ::= 'if' condExpr

//whenExpr = 'when' condExpr
whenExpr ::= 'when' condExpr

//pragma = '{.' optInd (exprColonEqExpr comma?)* optPar ('.}' | '}')
pragma ::= '{.' <<optInd ((exprColonEqExpr comma?)*)>> optPar pragma1
private pragma1 ::= '.}' | '}'

//identVis = symbol OPR?  # postfix position
identVis ::= symbol oprCombo? // postfix position

//identVisDot = symbol '.' optInd symbol OPR?
identVisDot ::= symbol ('.' <<optInd symbol>>)? oprCombo? // NOTE: '.' is now optional.

//identWithPragma = identVis pragma?
identWithPragma ::= identVis pragma?

//identWithPragmaDot = identVisDot pragma?
identWithPragmaDot ::= identVisDot pragma?

//declColonEquals = identWithPragma (comma identWithPragma)* comma?
//                  (':' optInd typeDesc)? ('=' optInd expr)?
declColonEquals ::= identWithPragma (comma identWithPragma)* comma?
                    ( ':' <<optInd typeDesc>>)? ('=' <<optInd expr>>)?

//identColonEquals = IDENT (comma IDENT)* comma?
//     (':' optInd typeDesc)? ('=' optInd expr)?)
identColonEquals ::= IDENT (comma IDENT)* comma?
     (':' <<optInd typeDesc>>)? ('=' <<optInd expr>>)?

//inlTupleDecl = 'tuple'
//    '[' optInd  (identColonEquals (comma/semicolon)?)*  optPar ']'

//extTupleDecl = 'tuple'
//    COMMENT? (IND{>} identColonEquals (IND{=} identColonEquals)*)?

//tupleClass = 'tuple'

//paramList = '(' declColonEquals ^* (comma/semicolon) ')'
params ::= '(' (declColonEquals ((comma|semicolon) declColonEquals)*)? ')'

//paramListArrow = paramList? ('->' optInd typeDesc)?
paramsArrow ::= params? ('->' <<optInd typeDesc>>)?

//paramListColon = paramList? (':' optInd typeDesc)?
paramsColon ::= params? (':' <<optInd typeDesc>>)?

//doBlock = 'do' paramListArrow pragma? colcom stmt
doBlock ::= 'do' paramsArrow pragma? colcom inlineStmt

//procExpr = 'proc' paramListColon pragma? ('=' COMMENT? stmt)?

//distinct = 'distinct' optInd typeDesc

//forStmt = 'for' (identWithPragma ^+ comma) 'in' expr colcom stmt
forStmt ::= 'for' (identWithPragma (comma identWithPragma)*) 'in' expr colcom inlineStmt {pin=1}

//forExpr = forStmt

//expr = (blockExpr
//      | ifExpr
//      | whenExpr
//      | caseStmt
//      | forExpr
//      | tryExpr)
//      / simpleExpr
expr ::= expr1 | simpleExpr
private expr1 ::= blockStmt
                | ifExpr
                | whenExpr
//              | caseStmt
                | forStmt
                | tryExpr
// NOTE: Moved caseStmt from here to complexStmt.

//typeKeyw = 'var' | 'out' | 'ref' | 'ptr' | 'shared' | 'tuple'
//         | 'proc' | 'iterator' | 'distinct' | 'object' | 'enum'
//primary = typeKeyw optInd typeDesc
//        /  prefixOperator* identOrLiteral primarySuffix*
//        / 'bind' primary
primary ::= primary1 | primary2 | primary3
private primary1 ::= type // NOTE: This is a new rule to handle type definitions.
private primary2 ::= prefixOperator? identOrLiteral primarySuffix*
private primary3 ::= 'bind' primary

private type ::= varType
               | outType
               | refType
               | ptrType
               | sharedType
               | tupleType
               | procType
               | iteratorType
               | distinctType
               | objectType
               | enumType

varType ::= 'var' <<optInd typeDesc>>
outType ::= 'out' <<optInd typeDesc>>
refType ::= 'ref' <<optInd typeDesc>>
ptrType ::= 'ptr' <<optInd typeDesc>>
sharedType ::= 'shared' <<optInd typeDesc>>
tupleType ::= 'tuple' <<optInd typeDesc>>
procType ::= 'proc' <<optInd typeDesc>>
iteratorType ::= 'iterator' <<optInd typeDesc>>
distinctType ::= 'distinct' <<optInd typeDesc>>
objectType ::= &'object' object {pin=1}
enumType ::= 'enum' <<optInd typeDesc>>

//typeDesc = simpleExpr ('not' expr)?
typeDesc ::= typeDesc0
private typeDesc0 ::= typeDesc1 | typeDesc2
private typeDesc1 ::= 'proc' paramsColon // NOTE: This is a new rule to handle 'proc' typed parameters.
private typeDesc2 ::= simpleExpr ('not' expr)?

//typeDefAux = simpleExpr ('not' expr)?
//           | 'concept' typeClass
typeDefAux ::= typeDefAux0
private typeDefAux0 ::= simpleExpr ('not' expr)? | typeDefAux1
private typeDefAux1 ::= 'concept' typeClass

//postExprBlocks = ':' stmt? ( IND{=} doBlock
//                           | IND{=} 'of' exprList ':' stmt
//                           | IND{=} 'elif' expr ':' stmt
//                           | IND{=} 'except' exprList ':' stmt
//                           | IND{=} 'else' ':' stmt )*
postExprBlocks ::= ':' inlineStmt? postExprBlocks0*
private postExprBlocks0 ::= postExprBlocks1
                          | postExprBlocks2
                          | postExprBlocks3
                          | postExprBlocks4
                          | postExprBlocks5
private postExprBlocks1 ::= ind_eq doBlock
private postExprBlocks2 ::= ind_eq 'of' exprs ':' inlineStmt
private postExprBlocks3 ::= ind_eq 'elif' expr ':' inlineStmt
private postExprBlocks4 ::= ind_eq 'except' exprs ':' inlineStmt
private postExprBlocks5 ::= ind_eq 'else' ':' inlineStmt

//exprStmt = simpleExpr
//         (( '=' optInd expr colonBody? )
//         / ( expr ^+ comma
//             postExprBlocks
//           ))?
exprStmt ::= simpleExpr (exprStmt1 | exprStmt2)? exprStmt1?
private exprStmt1 ::= '=' <<optInd (expr colonBody?)>>
private exprStmt2 ::= expr (comma expr)* postExprBlocks

//importStmt = 'import' optInd expr
//              ((comma expr)*
//              / 'except' optInd (expr ^+ comma))
importStmt ::= 'import' (importStmt1 | importStmt2) {pin=1}
private importStmt1 ::= <<optInd (expr (comma ind_eq* expr)*)>>
private importStmt2 ::= <<optInd (expr importStmt3)>>
private importStmt3 ::= 'except' <<optInd (expr (comma ind_eq* expr)*)>>

//exportStmt = 'export' optInd expr
//              ((comma expr)*
//              / 'except' optInd (expr ^+ comma))
exportStmt ::= 'export' (exportStmt1 | exportStmt2) {pin=1}
private exportStmt1 ::= <<optInd (expr (comma ind_eq* expr)*)>>
private exportStmt2 ::= <<optInd (expr exportStmt3)>>
private exportStmt3 ::= 'except' <<optInd (expr (comma ind_eq* expr)*)>>

//includeStmt = 'include' optInd expr ^+ comma
includeStmt ::= 'include' <<optInd (expr (comma ind_eq* expr)*)>> {pin=1}

//fromStmt = 'from' expr 'import' optInd expr (comma expr)*
fromStmt ::= 'from' expr 'import' <<optInd (expr (comma ind_eq* expr)*)>> {pin=1}

//returnStmt = 'return' optInd expr?
returnStmt ::= 'return' <<optInd expr>>? {pin=1}

//raiseStmt = 'raise' optInd expr?
raiseStmt ::= 'raise' <<optInd expr>>? {pin=1}

//yieldStmt = 'yield' optInd expr?
yieldStmt ::= 'yield' <<optInd expr>>? {pin=1}

//discardStmt = 'discard' optInd expr?
discardStmt ::= 'discard' <<optInd expr>>? {pin=1}

//breakStmt = 'break' optInd expr?
breakStmt ::= 'break' <<optInd expr>>? {pin=1}

//continueStmt = 'continue' optInd expr?
continueStmt ::= 'continue' <<optInd expr>>? {pin=1}

//condStmt = expr colcom stmt COMMENT?
//           (IND{=} 'elif' expr colcom stmt)*
//           (IND{=} 'else' colcom stmt)?
condStmt ::= expr colcom inlineStmt COMMENT? condStmt1* condStmt2?
private condStmt1 ::= ind_eq 'elif' expr colcom inlineStmt
private condStmt2 ::= ind_eq 'else' colcom inlineStmt

//ifStmt = 'if' condStmt
ifStmt ::= 'if' condStmt {pin=1}

//whenStmt = 'when' condStmt
whenStmt ::= 'when' condStmt {pin=1}

//whileStmt = 'while' expr colcom stmt
whileStmt ::= 'while' expr colcom inlineStmt {pin=1}

//ofBranch = 'of' exprList colcom stmt
ofBranch ::= 'of' exprs colcom inlineStmt

//ofBranches = ofBranch (IND{=} ofBranch)*
//                      (IND{=} 'elif' expr colcom stmt)*
//                      (IND{=} 'else' colcom stmt)?
ofBranches ::= ofBranch (ind_eq ofBranch)* ofBranches1* ofBranches2?
private ofBranches1 ::= ind_eq 'elif' expr colcom inlineStmt
private ofBranches2 ::= ind_eq 'else' colcom inlineStmt

//caseStmt = 'case' expr ':'? COMMENT?
//            (IND{>} ofBranches DED
//            | IND{=} ofBranches)
caseStmt ::= 'case' expr ':'? COMMENT? caseStmt0 {pin=1}
private caseStmt0 ::= caseStmt1 | caseStmt2
private caseStmt1 ::= INDENT ofBranches termInd
private caseStmt2 ::= ind_eq ofBranches

//tryStmt = 'try' colcom stmt &(IND{=}? 'except'|'finally')
//           (IND{=}? 'except' exprList colcom stmt)*
//           (IND{=}? 'finally' colcom stmt)?
tryStmt ::= 'try' colcom inlineStmt &(ind_eq? 'except'|'finally') tryStmt1* tryStmt2? {pin=1}
private tryStmt1 ::= ind_eq? 'except' exprs colcom inlineStmt {pin=2}
private tryStmt2 ::= ind_eq? 'finally' colcom inlineStmt {pin=2}

//tryExpr = 'try' colcom stmt &(optInd 'except'|'finally')
//           (optInd 'except' exprList colcom stmt)*
//           (optInd 'finally' colcom stmt)?
tryExpr ::= 'try' colcom inlineStmt &(<<optInd ('except'|'finally')>>) tryExpr1* tryExpr2?
private tryExpr1 ::= <<optInd ('except' exprs colcom inlineStmt)>>
private tryExpr2 ::= <<optInd ('finally' colcom inlineStmt)>>

//exceptBlock = 'except' colcom stmt

//blockStmt = 'block' symbol? colcom stmt
//blockExpr = 'block' symbol? colcom stmt
blockStmt ::= 'block' symbol? colcom inlineStmt {pin=1}

//staticStmt = 'static' colcom stmt
staticStmt ::= 'static' colcom inlineStmt {pin=1}

//deferStmt = 'defer' colcom stmt
deferStmt ::= 'defer' colcom inlineStmt {pin=1}

//asmStmt = 'asm' pragma? (STR_LIT|RSTR_LIT|TRIPLESTR_LIT)
asmStmt ::= 'asm' pragma? asmStmt1 {pin=1}
private asmStmt1 ::= STR_LIT

//genericParam = symbol (comma symbol)* (colon expr)? ('=' optInd expr)?
genericParam ::= symbol (comma symbol)* (colon expr)? ('=' <<optInd expr>>)?

//genericParamList = '[' optInd
//  genericParam ^* (comma/semicolon) optPar ']'
genericParams ::= '[' <<optInd ((genericParam ((comma|semicolon) genericParam)*)?)>> optPar ']'

//pattern = '{' stmt '}'
pattern ::= '{' inlineStmt '}'

//indAndComment = (IND{>} COMMENT)? | COMMENT?
indAndComment ::= <<optInd COMMENT>>?

//routine = optInd identVis pattern? genericParamList?
//  paramListColon pragma? ('=' COMMENT? stmt)? indAndComment
namedRoutine ::= symbol oprCombo? routine {methods=[nameIdentifier="symbol"]}
routine ::= pattern? genericParams? paramsColon pragma? ('=' COMMENT? inlineStmt)? indAndComment

//commentStmt = COMMENT
commentStmt ::= COMMENT

//section(RULE) = COMMENT? RULE / (IND{>} (RULE / COMMENT)^+IND{=} DED)
meta section ::= COMMENT? (<<RULE>> | (INDENT (<<RULE>> | COMMENT) (ind_eq (<<RULE>> | COMMENT))* termInd))

//objectWhen = 'when' expr colcom objectPart COMMENT?
//            ('elif' expr colcom objectPart COMMENT?)*
//            ('else' colcom objectPart COMMENT?)?
objectWhen ::= 'when' expr colcom objectPart COMMENT?
              ('elif' expr colcom objectPart COMMENT?)*
              ('else' colcom objectPart COMMENT?)?

//objectBranch = 'of' exprList colcom objectPart
objectBranch ::= 'of' exprs colcom objectPart

//objectBranches = objectBranch (IND{=} objectBranch)*
//                      (IND{=} 'elif' expr colcom objectPart)*
//                      (IND{=} 'else' colcom objectPart)?
objectBranches ::= objectBranch (ind_eq objectBranch)*
                        (ind_eq 'elif' expr colcom objectPart)*
                        (ind_eq 'else' colcom objectPart)?

//objectCase = 'case' identWithPragma ':' typeDesc ':'? COMMENT?
//            (IND{>} objectBranches DED
//            | IND{=} objectBranches)
objectCase ::= 'case' identWithPragma ':' typeDesc ':'? COMMENT?
            (INDENT objectBranches termInd
            | ind_eq objectBranches)

//objectPart = IND{>} objectPart^+IND{=} DED
//           / objectWhen / objectCase / 'nil' / 'discard' / declColonEquals
objectPart ::= ((INDENT objectPart (ind_eq objectPart)* termInd)
             | objectWhen | objectCase | 'nil' | 'discard' | declColonEquals) COMMENT?

//object = 'object' pragma? ('of' typeDesc)? COMMENT? objectPart
object ::= 'object' pragma? ('of' typeDesc)? COMMENT? objectPart?

//typeClassParam = ('var' | 'out')? symbol
typeClassParam ::= ('var'|'out')? symbol

//typeClass = typeClassParam ^* ',' (pragma)? ('of' typeDesc ^* ',')? &IND{>} stmt
typeClass ::= (typeClassParam (',' typeClassParam)*)? pragma? ('of' (typeDesc (',' typeDesc)*)?)?

//typeDef = identWithPragmaDot genericParamList? '=' optInd typeDefAux
//            indAndComment? / identVisDot genericParamList? pragma '=' optInd typeDefAux
//            indAndComment?
typeDef ::= typeDef1 | typeDef2
private typeDef1 ::= identWithPragmaDot genericParams? '=' <<optInd typeDefAux>> indAndComment
private typeDef2 ::= identVisDot genericParams? pragma '=' <<optInd typeDefAux>> indAndComment

//varTuple = '(' optInd identWithPragma ^+ comma optPar ')' '=' optInd expr
varTuple ::= '(' <<optInd (identWithPragma (comma identWithPragma)*)>> optPar ')' '=' <<optInd expr>>

//colonBody = colcom stmt postExprBlocks?
colonBody ::= colcom inlineStmt postExprBlocks?

//variable = (varTuple / identColonEquals) colonBody? indAndComment
variable ::= (varTuple | identColonEquals) colonBody? indAndComment

//constant = (varTuple / identWithPragma) (colon typeDesc)? '=' optInd expr indAndComment
constant ::= (varTuple | identWithPragma) (colon typeDesc)? '=' <<optInd expr>> indAndComment

//bindStmt = 'bind' optInd qualifiedIdent ^+ comma
bindStmt ::= 'bind' <<optInd (qualifiedIdent (comma qualifiedIdent)*)>> {pin=1}

//mixinStmt = 'mixin' optInd qualifiedIdent ^+ comma
mixinStmt ::= 'mixin' <<optInd (qualifiedIdent (comma qualifiedIdent)*)>> {pin=1}

//pragmaStmt = pragma (colon COMMENT? stmt)?
pragmaStmt ::= pragma (colon COMMENT? inlineStmt)?

//simpleStmt = ((returnStmt | raiseStmt | yieldStmt | discardStmt | breakStmt
//           | continueStmt | pragmaStmt | importStmt | exportStmt | fromStmt
//           | includeStmt | commentStmt) / exprStmt) COMMENT?
simpleStmt ::= (simpleStmt1 | exprStmt) COMMENT?
private simpleStmt1 ::= returnStmt | raiseStmt | yieldStmt | discardStmt | breakStmt
                      | continueStmt | pragmaStmt | importStmt | exportStmt | fromStmt
                      | includeStmt | commentStmt

//complexOrSimpleStmt = (ifStmt | whenStmt | whileStmt
//                    | tryStmt | forStmt
//                    | blockStmt | staticStmt | deferStmt | asmStmt
//                    | 'proc' routine
//                    | 'func' routine
//                    | 'method' routine
//                    | 'iterator' routine
//                    | 'macro' routine
//                    | 'template' routine
//                    | 'converter' routine
//                    | 'type' section(typeDef)
//                    | 'const' section(constant)
//                    | ('let' | 'var' | 'using') section(variable)
//                    | bindStmt | mixinStmt)
//                    / simpleStmt
complexOrSimpleStmt ::= complexStmt | simpleStmt
private complexStmt ::= ifStmt | whenStmt | whileStmt
                      | tryStmt | forStmt
                      | blockStmt | staticStmt | deferStmt | asmStmt
                      | procStmt
                      | funcStmt
                      | methodStmt
                      | iteratorStmt
                      | macroStmt
                      | templateStmt
                      | converterStmt
                      | typeStmt
                      | constStmt
                      | varStmt
                      | bindStmt | mixinStmt
                      | caseStmt // NOTE: Moved caseStmt to here from expr.

procStmt ::= 'proc' <<optInd namedRoutine>> {pin=1}
funcStmt ::= 'func' <<optInd namedRoutine>> {pin=1}
methodStmt ::= 'method' <<optInd namedRoutine>> {pin=1}
iteratorStmt ::= 'iterator' <<optInd namedRoutine>> {pin=1}
macroStmt ::= 'macro' <<optInd namedRoutine>> {pin=1}
templateStmt ::= 'template' <<optInd namedRoutine>> {pin=1}
converterStmt ::= 'converter' <<optInd namedRoutine>> {pin=1}
typeStmt ::= 'type' <<section typeDef>> {pin=1}
constStmt ::= 'const' <<section constant>> {pin=1}
varStmt ::= ('let'|'var'|'using') <<section variable>> {pin=1}

//stmt = (IND{>} complexOrSimpleStmt^+(IND{=} / ';') DED) / simpleStmt ^+ ';'
//stmt ::= complexOrSimpleStmt ((';' | ind_eq+) complexOrSimpleStmt)*

// NOTE: The following is an attempt to isolate statements by terminator, which could be useful in error recovery.
//stmt ::= (stmt1+ complexOrSimpleStmt) | complexOrSimpleStmt
//private stmt1 ::= complexOrSimpleStmt (';' | (IND_EQ0 ind_eq*))

// NOTE: The following is an attempt to add recovery.
stmt ::= stmt1 | complexOrSimpleStmt
private stmt1 ::= stmt2+ complexOrSimpleStmt
private stmt2 ::= stmt3 (';' | (IND_EQ0 ind_eq*))
private stmt3 ::= complexOrSimpleStmt &(';' | (IND_EQ0)) {recoverWhile=stmtRecover}
private stmtRecover ::= !(';' | IND_EQ0)

inlineStmt ::= inlineComplex | inlineSimple
private inlineComplex ::= INDENT complexOrSimpleStmt ((';' | ind_eq+) complexOrSimpleStmt)* termInd
private inlineSimple ::= simpleStmt (';' simpleStmt)*